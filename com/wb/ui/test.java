/**
 * @author clarence.lai
 * @created December 6, 2003
 * @copyright Copyright (C) 2003 Portrade dotcom Berhad. All Rights Reserved.
 * @version $Id: AccountReceivableManagerBean.java,v 1.312.4.57.2.59.4.123.2.152 2015/03/02 09:06:00 yuenyee.boey Exp $
 * @modelguid {6F3E8531-22F9-422B-A2F0-C5A30684606D}
 */
public class AccountReceivableManagerBean implements com.portrade.ipms.afms.IConstants, javax.ejb.SessionBean {
  /**
   * @modelguid {41A8F9A8-A1D6-49D3-B3D8-7ABB9344F8A1}
   */
  private AccountPayableManagerHome accountPayableHome = null;
  /**
   * @modelguid {2D42D07B-8BE7-433A-95EB-5DFF15DA2690}
   */
  private ARAccountBalanceHome arAccountBalanceHome = null;
  /**
   * @modelguid {F6525095-9B9E-4F28-A7F0-7F0B49D0D3F7}
   */
  private BankGuaranteeHome bankGuaranteeHome = null;
  /**
   * @modelguid {E7DA01A2-19F0-4CE6-AD47-25A002459712}
   */
  private CashBookSetupHome cashBookSetupHome = null;
  /**
   * @modelguid {862B4433-C28C-4758-B44E-115ECC4D4366}
   */
  private CashManagerHome cashManagerHome = null;
  /**
   * @modelguid {CCD4FB0F-8C66-4FE2-914F-3A39C5740270}
   */
  private CashTransferorHome cashTransferorHome = null;
  /**
   * @modelguid {C3DCBA97-EE6F-4F46-BBEF-24DF0C96EA6B}
   */
  private ClearingTransactionHome clearingTransactionHome = null;
  /**
   * @modelguid {B089F8DD-A9B7-4466-A88B-A460ABA49AD0}
   */
  private ClearingTransactionItemHome clearingTransactionItemHome = null;
  /**
   * @modelguid {AFA29870-6D13-4F1A-904B-F0FBC6BAC53F}
   */
  private CommonFunctionHome commonFunctionHome = null;
  /**
   * @modelguid {2B2C0696-D863-4AE3-B5AD-AE0ACFAD229A}
   */
  private CompanyAccountHome companyAccountHome = null;
  /**
   * @modelguid {9208769F-60D0-4AA0-9C17-F2E5EBBC7DD3}
   */
  private DebtorAccountHome debtorAccountHome = null;
  /**
   * @modelguid {E64E3ABD-5EF8-41F9-A143-A38AD130D5E0}
   */
  private DebtorAgeingPeriodHome debtorAgeingPeriodHome = null;
  /**
   * @modelguid {363289EB-C513-4CDB-87D0-C5FCC0CFA9C5}
   */
  private DebtorAccountGroupHome debtorAccountGroupHome = null;
  /**
   * @modelguid {A70AC25F-BD5D-492A-B4FD-6429C66157C0}
   */
  private DebtorDebitCreditMemoHome debtorDebitCreditMemoHome = null;
  /**
   * @modelguid {57253203-3C0D-4474-9D95-87913232B5DF}
   */
  private DebtorDebitCreditMemoItemHome debtorDebitCreditMemoItemHome = null;
  /**
   * @modelguid {EEAE6C4B-7C2C-427E-AA24-7B059E8E6C08}
   */
  private DebtorNumberRangeHome debtorNumberRangeHome = null;
  /**
   * @modelguid {3189FFDF-7E9C-47EC-8FF1-C3F095B7E2A7}
   */
  private DebtorPaymentHome debtorPaymentHome = null;
  /**
   * @modelguid {A60ACB70-7D96-4337-B9F9-1DEB04217151}
   */
  /**
   * @modelguid {30BFDB26-EE20-4002-93D6-26EED2A5EC14}
   */
  private DebtorCashDepositHome debtorCashDepositHome = null;

  private DebtorCashDepositRefundHome debtorCashDepositRefundHome = null;
  /**
   * @modelguid {A60ACB70-7D96-4337-B9F9-1DEB04217151}
   */
  private DebtorPaymentItemHome debtorPaymentItemHome = null;
  /**
   * @modelguid {F4642020-5A43-471C-BC3B-68334D77A2FE}
   */
  private DebtorReconAccountHome debtorReconAccountHome = null;
  /**
   * @modelguid {09DCC88E-DCE4-4029-80E8-300BDB7A647B}
   */
  private DepositToBankHome depositToBankHome = null;
  /**
   * @modelguid {6C64053D-7CBC-4D0C-99C2-C5683F094573}
   */
  private DepositToBankItemHome depositToBankItemHome = null;
  /**
   * @modelguid {D39F113A-951D-401C-BB8A-1C7136F9FE4F}
   */
  private DepositToBankReceiptHome depositToBankReceiptHome = null;
  /**
   * @modelguid {8F92FF7B-B00E-4577-9713-0F5A63FD43CB}
   */
  private GeneralLedgerManagerHome generalLedgerManagerHome = null;
  /**
   * @modelguid {877A12E7-4F72-4CB8-9107-06CA7D203543}
   */
  private GLAccountItemHome gLAccountItemHome = null;
  /**
   * @modelguid {634ACC80-F3B8-4325-8072-4931DF1772F8}
   */
  private InterOfficeCollectionHome interOfficeCollectionHome = null;
  /**
   * @modelguid {7DFEA6D8-6B80-4054-B6D6-3089E3640595}
   */
  private InvoiceHome invoiceHome = null;
  /**
   * @modelguid {CCD3B602-1D67-4CF0-A5E5-F64C2C7A41CE}
   */
  private InvoiceItemHome invoiceItemHome = null;
  /**
   * @modelguid {3ABCC9D7-FA80-42F8-9BEA-083E5B0CFC15}
   */
  private InvoicePrefixHome invoicePrefixHome = null;
  /**
   * @modelguid {5A915B89-9583-497C-BD37-73B26FC4D0C4}
   */
  private NotesReceivableHome notesReceivableHome = null;
  /**
   * @modelguid {FEC88742-BD1C-4794-A6DB-4432A0B16A6D}
   */
  private NotesReceivableInvoiceItemHome notesReceivableInvoiceItemHome = null;
  /**
   * @modelguid {DE4DE91E-7B75-44C4-8B42-8CFB13AC1968}
   */
  private NotesReceivableItemHome notesReceivableItemHome = null;
  /**
   * @modelguid {D3D954F2-F2CD-4805-AE67-2D0F09A7823B}
   */
  private StaffAdvanceHome staffAdvanceHome = null;
  /**
   * @modelguid {9516C5E7-85E0-4E93-A281-D3C783BA8C7E}
   */
  private StaffAdvanceBudgetItemHome staffAdvanceBudgetItemHome = null;
  /**
   * @modelguid {0F3C5322-2705-4BB0-9816-B78BE3A15521}
   */
  private StaffAdvanceLiquidationHome staffAdvanceLiquidateHome = null;
  /**
   * @modelguid {9DE23C38-22A2-4C35-9728-556322B9037C}
   */
  private StaffAdvanceLiquidationItemHome staffAdvanceLiquidateItemHome = null;
  /**
   * @modelguid {788C0412-4354-4225-86D0-D57C4634B6AC}
   */
  private StaffAdvanceLiquidationPaidItemHome staffAdvanceLiquidatePaidItemHome = null;
  /**
   * @modelguid {CF7DDBD2-04A2-4748-BADA-0EEF4949028B}
   */
  private StaffAdvanceTypeHome staffAdvanceTypeHome = null;
  /**
   * @modelguid {9A840179-A388-43EF-B54F-A4282ABB5A65}
   */
  private SurchargeTypeHome surchargeTypeHome = null;
  /**
   * @modelguid {BD0A36AF-8029-4138-9A36-721DBB710077}
   */
  private SurchargeTypeRateHome surchargeTypeRateHome = null;
  /**
   * @modelguid {29453D4C-4BA8-4212-AF95-299D8BC05CF7}
   */
  private SurchargeInvoiceHome surchargeInvoiceHome = null;
  /**
   * @modelguid {E613F952-A890-49FA-910C-9390A803490B}
   */
  private SurchargeInvoiceItemHome surchargeInvoiceItemHome = null;
  /**
   * @modelguid {212662FA-1E78-4DC8-9C65-8F477B2C54BB}
   */
  private AccountReceivableManagerHome accountReceivableManagerHome = null;

  /**
   * @modelguid {C35772F5-9DB3-4EC8-A173-9028C327B867}
   */
  private AccountReceivableSetupHome accountReceivableSetupHome = null;

  /**
   * @modelguid {588F64C3-34EA-4EC0-970A-50870B62B29B}
   */
  private GeneralLedgerSetupHome generalLedgerSetupHome = null;

  /**
   * @modelguid {1AA1AF18-08BB-4343-B5C1-75719A31ADDA}
   */
  private ProtestInvoiceHome protestInvoiceHome = null;

  /**
   * @modelguid {7FD5C790-6F5E-412E-B040-22D8DD3F9AFA}
   */
  private DebtorCashDepositToCOAHome debtorCashDepositToCOAHome = null;
  /**
   * @modelguid {FD6E42B4-BF07-4BB1-9E3E-7979E5C4F803}
   */
  private OverridingApprovalHome overridingApprovalHome = null;

  private NonDebtorPaymentHome nonDebtorPaymentHome = null;
  private NonDebtorPaymentItemHome nonDebtorPaymentItemHome = null;
  private ChequeClearingHome chequeClearingHome = null;

	String errorMessage = ", System is busy. Please try again.";

  /**
   * @modelguid {355261FD-B577-4669-BC39-E5231831EFCE}
   */
  private javax.ejb.SessionContext sessionContext;


  /**
   * @modelguid {A7C774D6-D9C2-4354-A8A8-676712C222EA}
   */
  public AccountReceivableManagerBean() { }


  /**
   * @param sessionContext The new sessionContext value
   * @modelguid {B86FDCF1-28E0-429F-8EBD-33B953965ECE}
   */
  public void setSessionContext(javax.ejb.SessionContext sessionContext) {
    this.sessionContext = sessionContext;
  }


  /**
   * Sets the surchargeInvoiceValue attribute of the
   * AccountReceivableManagerBean object
   *
   * @param bo The new surchargeInvoiceValue value
   * @param user The new surchargeInvoiceValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {E8ADD78A-BA3F-4AD9-BFC2-ED3A9D585F4A}
   */
  public void setSurchargeInvoiceValue(com.portrade.ipms.afms.ISurchargeInvoice bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    Logger.getInstance().logDebug("bo.getInvoiceNumber() = " + bo.getInvoiceNumber());
    if (bo.getInvoiceNumber() == null || bo.getInvoiceNumber().equals("")) {
      java.util.Calendar calendar = com.portrade.ipms.afms.util.AFMSUtilities.getCalendar();
      java.util.List invoiceList = new java.util.ArrayList();
      Invoice invoice = null;
      String invoiceNumber = null;
      //Chee Seng 09th Dec 2004, bugId: 8866
      //String documentType = null;
      Logger.getInstance().logDebug("bo.getInvoicePrefix() = " + bo.getInvoicePrefix());
      Logger.getInstance().logDebug("user.getIcmsSession() = " + user.getIcmsSession());
      Logger.getInstance().logDebug("bo.getIcmsSession() = " + bo.getOfficeCode());
      try {
        //Chee Seng 09th Dec 2004, bugId: 8866

        //karen 3 January 2007 bugId:19807 change the retrieve document number method
        invoiceNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.InvoicePrefixParameter.SC, bo.getOfficeCode(), null, null, null, false);
        Logger.getInstance().logDebug("invoiceNumber = " + invoiceNumber);
        bo.setInvoiceNumber(invoiceNumber);
        //Chee Seng 08th Dec 2004, bugId: 8866
        //Chee Seng 13th Aug 2004, bugId: 6948
        AbstractCriteria[] filter = {
            new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_INVOICENUMBER, "=", invoiceNumber),
            new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode())
            };
        invoiceList = DAOProxy.list("surchargeInvoice", user, filter);
        if (invoiceList.size() > 0) {
          setSurchargeInvoiceValue(bo, user);
        }
      }
      catch (java.sql.SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
				}
      }
      catch (AFMSException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.DOCUMENT_CONTROL_DOCUMENT_TYPE});
      }
    }
  }


  /**
   * @param bo The new debtorCashDepositValue value
   * @param user The new debtorCashDepositValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {231C6E6C-1393-4680-B322-F5D962B234B6}
   */
  public void setDebtorCashDepositValue(IDebtorCashDeposit bo, IUser user) throws AFMSException {

    try {
      if (bo.getOrNumber() == null || bo.getOrNumber().equals("")) {
        String nextDocumentNumber = null;
        //nextDocumentNumber = ICMSConnector.getNextDocumentControlNumber(user.getIcmsSession(), IConstants.Prefix.RA, bo.getOfficeCode(), null, null, null);
        //karen BugId:17536 20 Nov 2006
        nextDocumentNumber = ICMSConnector.getNextDocumentControlNumber(user.getIcmsSession(), IConstants.Prefix.RT, bo.getOfficeCode(), null, null, null);

        Logger.getInstance().logDebug("nextDocumentNumber " + nextDocumentNumber);
        if (nextDocumentNumber == null || nextDocumentNumber.length() == 0) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorPaymentLabelId.OR_NUMBER});
        }
        bo.setOrNumber(nextDocumentNumber);
      }
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorPaymentLabelId.OR_NUMBER});
    }
  }


  /**
   * @param bo The new debtorCashDepositRefundValue value
   * @param user The new debtorCashDepositRefundValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {75D212FB-E8BC-47BD-AED4-BB132765448E}
   */
  public void setDebtorCashDepositRefundValue(IDebtorCashDepositRefund bo, IUser user) throws AFMSException { }


  /**
   * @param bo The new debtorCashDepositToCOAValue value
   * @param user The new debtorCashDepositToCOAValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {F0B94CEA-93C0-449A-A644-729FDF7FB13E}
   */
  public void setDebtorCashDepositToCOAValue(IDebtorCashDepositToCOA bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    if (bo.getFiscalYear() == null) {
      try {
        Integer fiscalYear = commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user);
        bo.setFiscalYear(fiscalYear);
      }
      catch (RecordNotFoundException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
      }
      catch (RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
    }
    try {
      AbstractCriteria[] filter = {
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_OFFICE_CODE, "=", DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_FISCAL_YEAR, "=", DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_DOCUMENT_NUMBER, "=", DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_OFFICE_CODE, "=", bo.getOfficeCode()),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_FISCAL_YEAR, "=", bo.getClearedRefFiscalYear()),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_DOCUMENT_NUMBER, "=", bo.getClearedRefDocumentNumber()),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_DEBITCREDITTYPE, "=", IConstants.DebitCreditType.CREDIT)
          };
      List resultsList = DAOProxy.list("debtorCashDeposit", user, filter);

      if (resultsList.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositToCOALabelId.OFFICE_CODE_AND_CLEAR_REF_FISCAL_YEAR_AND_CLEAR_REF_DOCUMENT_NUMBER});
      }
      else {
        IDebtorCashDeposit debtorCashDep = (IDebtorCashDeposit) resultsList.get(0);
        Logger.getInstance().logDebug("debtorCashDep.getGLAccount()===" + debtorCashDep.getGLAccount());
        bo.setCashDeposit(debtorCashDep);
      }

    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositToCOALabelId.OFFICE_CODE_AND_CLEAR_REF_FISCAL_YEAR_AND_CLEAR_REF_DOCUMENT_NUMBER});
			}
    }
  }


  /**
   * @modelguid {8053452A-1A09-4F18-9A73-546F4274F1F8}
   */
  // FIXME: DebtorAccount
  /*
   * public com.portrade.ipms.afms.business.entity.debtor.DebtorAccount getDebtor(String code) throws AFMSException
   * {
   * return null;
   * }
   */
  /**
   * @param forCompanyCode Description of the Parameter
   * @return The debtors value
   * @exception AFMSException Description of the Exception
   * @modelguid {22892873-5F8C-4BAA-B821-5970259A6C90}
   */
  public java.util.ArrayList getDebtors(int forCompanyCode) throws AFMSException {
    return null;
  }


  /**
   * @param forCompanyCode Description of the Parameter
   * @param groupId Description of the Parameter
   * @return The debtorsForGroup value
   * @exception AFMSException Description of the Exception
   * @modelguid {27790B30-7077-4D9C-A0C5-BE20F5FED515}
   */
  public java.util.ArrayList getDebtorsForGroup(String forCompanyCode, String groupId) throws AFMSException {
    return null;
  }


  /**
   * @param companyCode Description of the Parameter
   * @return The currentDuePayments value
   * @exception AFMSException Description of the Exception
   * @modelguid {23072226-4A3E-420A-B4AB-5054FD14BE34}
   */
  public java.util.ArrayList getCurrentDuePayments(String companyCode) throws AFMSException {
    return null;
  }


  /**
   * @param type Description of the Parameter
   * @param code Description of the Parameter
   * @return The document value
   * @exception AFMSException Description of the Exception
   * @modelguid {1288E012-6643-40ED-AAB4-61A7ABA7A73D}
   */
  public com.portrade.ipms.afms.IARDocument getDocument(String type, String code) throws AFMSException {
    return null;
  }


  /**
   * @param companyCode Description of the Parameter
   * @param dueDate Description of the Parameter
   * @param DebtorIds Description of the Parameter
   * @return The duePayments value
   * @exception AFMSException Description of the Exception
   * @modelguid {50408B92-49D6-458A-9B0E-E8A293A59EBA}
   */
  public java.util.ArrayList getDuePayments(String companyCode, java.util.Date dueDate, java.util.ArrayList DebtorIds) throws AFMSException {
    return null;
  }


  /**
   * @param type Description of the Parameter
   * @param forCompanyCode Description of the Parameter
   * @return The paymentDocuments value
   * @exception AFMSException Description of the Exception
   * @modelguid {97EEECA8-B4AC-47DD-AB4E-056BAEC772A0}
   */
  public java.util.ArrayList getPaymentDocuments(String type, String forCompanyCode) throws AFMSException {
    return null;
  }


  /**
   * @param type Description of the Parameter
   * @param docId Description of the Parameter
   * @return The transactionDocument value
   * @exception AFMSException Description of the Exception
   * @modelguid {B5C16C9E-A431-4FA9-83D8-A9B143AC67BC}
   */
  public com.portrade.ipms.afms.IARDocument getTransactionDocument(String type, String docId) throws AFMSException {
    return null;
  }


  /**
   * @param type Description of the Parameter
   * @param forCompanyCode Description of the Parameter
   * @return The transactionDocuments value
   * @exception AFMSException Description of the Exception
   * @modelguid {AC3D3BBB-D5B1-454A-BA10-3E101424BC60}
   */
  public java.util.ArrayList getTransactionDocuments(String type, String forCompanyCode) throws AFMSException {
    return null;
  }


  /**
   * @modelguid {8048179F-3DA9-402A-851B-33E3E0949743}
   */
  // FIXME: BankAccount
  /*
   * public com.portrade.ipms.afms.business.entity.bankaccount.BankAccount getBankAccount() throws AFMSException
   * {
   * return null;
   * }
   */
  /**
   * @modelguid {A11C2C41-8CDF-4710-AFFE-2BDAFAC82E49}
   */
  // FIXME: CompanyAccountingInfo
  /*
   * public com.portrade.ipms.afms.business.entity.company.CompanyAccountingInfo getCompanyAccount() throws AFMSException
   * {
   * return null;
   * }
   */
  /**
   * @return The debtorAccounts value
   * @exception AFMSException Description of the Exception
   * @modelguid {614D33A4-DCFB-4A24-8639-88CFDAFBAABA}
   */

  public java.util.ArrayList getDebtorAccounts() throws AFMSException {
    return null;
  }



  /**
   * @return The debtors value
   * @exception AFMSException Description of the Exception
   * @modelguid {75BE5A99-F870-48FC-B97F-64CC8A376B21}
   */
  public java.util.ArrayList getDebtors() throws AFMSException {
    return null;
  }


  /**
   * @param code Description of the Parameter
   * @return The groupWideDebtor value
   * @exception AFMSException Description of the Exception
   * @modelguid {7CACA23F-D6AF-49E8-830D-D399812D70E3}
   */
  public com.portrade.ipms.afms.IGroupWideAccount getGroupWideDebtor(String code) throws AFMSException {
    return null;
  }


  /**
   * @param code Description of the Parameter
   * @return The interCompanyDebtorPayment value
   * @exception AFMSException Description of the Exception
   * @modelguid {628C8DC5-113A-44E2-83DD-8337E60AF8B9}
   */
  public com.portrade.ipms.afms.IPayment getInterCompanyDebtorPayment(String code) throws AFMSException {
    return null;
  }


  /**
   * @param code Description of the Parameter
   * @return The interCompanyGLAccounts value
   * @exception AFMSException Description of the Exception
   * @modelguid {3574F63F-378B-4C6C-B581-E93E824399FA}
   */
  public java.util.ArrayList getInterCompanyGLAccounts(String code) throws AFMSException {
    return null;
  }


  /**
   * @param ID Description of the Parameter
   * @return The outStandingDebtorInvoice value
   * @exception AFMSException Description of the Exception
   * @modelguid {6EC22A5F-F853-4329-B3B8-BB8FF2E09192}
   */
  public com.portrade.ipms.afms.IARDocument getOutStandingDebtorInvoice(int ID) throws AFMSException {
    return null;
  }


  /**
   * @param code Description of the Parameter
   * @return The staffAdvance value
   * @exception AFMSException Description of the Exception
   * @modelguid {48F1107F-C949-4CF3-B7E6-9661BCB09BDE}
   */
  public com.portrade.ipms.afms.IStaffAdvance getStaffAdvance(String code) throws AFMSException {
    return null;
  }


  /**
   * @param doc Description of the Parameter
   * @return The equalDebitCredit value
   * @exception AFMSException Description of the Exception
   * @modelguid {FABE4A42-975A-4CD9-BE59-3F98A1E3EB6D}
   */
  public Boolean isEqualDebitCredit(com.portrade.ipms.afms.IARDocument doc) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @return The equalDebtorInvoicePayment value
   * @exception AFMSException Description of the Exception
   * @modelguid {25213880-CB35-48A0-BB2B-03329184FC93}
   */
  public Boolean isEqualDebtorInvoicePayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException {
    return null;
  }


  /**
   * Gets the totalGuarantee attribute of the AccountReceivableManagerBean
   * object
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return The totalGuarantee value
   * @exception AFMSException Description of the Exception
   * @modelguid {B7149DE8-E73A-41EB-9925-A60AF16D599F}
   */
  public BigDecimal getTotalGuarantee(ICustomer bo, IUser user) throws AFMSException {
    BigDecimal aTotal = new BigDecimal("0");
    //java.util.ArrayList debtorBankGuaranteeList = new java.util.ArrayList();
    //BankGuarantee bankGuarantee = null;
    IBankGuarantee bankGuarantee = new BankGuaranteeValue();

    try {
      //Chee Seng 13th Aug 2004, bugId: 6948

      AbstractCriteria[] filter = {
          new Criteria(BankGuaranteeDAO.FILTER_ACCOUNTNUMBER, "=", bo.getAccountNumber()),
          new Criteria(BankGuaranteeDAO.FILTER_GUARANTEE_STATUS, "<>", IConstants.ActiveStatus.CANCELL)
          };
      //THC 15981 Add in to exclude calculation if guarantee status = cancelled.

      List debtorBankGuaranteeList = DAOProxy.list("BankGuarantee", bo.getOfficeCode(), user, filter);
      for (int i = 0; i < debtorBankGuaranteeList.size(); i++) {
        bankGuarantee = (IBankGuarantee) debtorBankGuaranteeList.get(i);
				if (bankGuarantee.getGuaranteeType() != null  && !bankGuarantee.getGuaranteeType().equals("C")) {
					if ((bankGuarantee.getEndDate().compareTo(AFMSUtilities.getCurrentDate()) >= 0) && (bankGuarantee.getStartDate().compareTo(AFMSUtilities.getCurrentDate()) <= 0)) {
					  aTotal = aTotal.add(bankGuarantee.getAmount());
					}
				}
				else {
					aTotal = aTotal.add(bankGuarantee.getAmount());
				}
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.BANKGUARANTEE});
			}
    }
    return aTotal;
  }


  /**
   * Gets the accountBalance attribute of the AccountReceivableManagerBean
   * object
   *
   * @param bo Description of the Parameter
   * @param aFiscalYear Description of the Parameter
   * @param user Description of the Parameter
   * @return The accountBalance value
   * @exception AFMSException Description of the Exception
   * @modelguid {EFB53659-D7F8-4CBD-A00B-860D804806E4}
   */
  public BigDecimal getAccountBalance(ICustomer bo, Integer aFiscalYear, IUser user) throws AFMSException {
    //java.util.ArrayList arAccountBalanceList = new java.util.ArrayList();
    //ARAccountBalance arAccountBalance = null;
    IAccountBalance arAccountBalance = new ARAccountBalanceValue();
    BigDecimal aOpeningBalance = new BigDecimal("0");
    BigDecimal aTotalDebit = new BigDecimal("0");
    BigDecimal aTotalCredit = new BigDecimal("0");
    AbstractCriteria[] filter = null;

    try {
      //Jaymee BugId: 5850. 28/07/04. Change to list method to avoid table locking.
      //arAccountBalanceList = new java.util.ArrayList(arAccountBalanceHome.findByDebtorCodeAndFiscalYear(bo.getOfficeCode(), aFiscalYear, bo.getAccountNumber().toString()));
      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.DEBTOR_COMBINE_FLAG))) {
        filter = new AbstractCriteria[2];
        filter[0] = new Criteria(ARAccountBalanceDAO.FILTER_FISCALYEAR, "=", aFiscalYear);
        filter[1] = new Criteria(ARAccountBalanceDAO.FILTER_DEBTORACCOUNT, "=", bo.getAccountNumber());
      }
      else {
        filter = new AbstractCriteria[3];
        filter[0] = new Criteria(ARAccountBalanceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode());
        filter[1] = new Criteria(ARAccountBalanceDAO.FILTER_FISCALYEAR, "=", aFiscalYear);
        filter[2] = new Criteria(ARAccountBalanceDAO.FILTER_DEBTORACCOUNT, "=", bo.getAccountNumber());
      }

      List arAccountBalanceList = DAOProxy.list("ARAccountBalance", user, filter);

      if (arAccountBalanceList.isEmpty()) {
        return new BigDecimal(0);
        //Jason 10th Aug 2004, BugId: 6914 throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.AR_ACCOUNT_BALANCE});
      }

      for (int i = 0; i < arAccountBalanceList.size(); i++) {
        //arAccountBalance = (ARAccountBalance) arAccountBalanceList.get(i);
        arAccountBalance = (IAccountBalance) arAccountBalanceList.get(i);

        if (arAccountBalance.getPostingPeriod().intValue() == 0) {
          if (arAccountBalance.getFiscalYearOpeningBalance() != null && !arAccountBalance.getFiscalYearOpeningBalance().equals("")) {
            aOpeningBalance = aOpeningBalance.add(arAccountBalance.getFiscalYearOpeningBalance());
          }
        }
        else {
          if (arAccountBalance.getTotalDebit() != null && !arAccountBalance.getTotalDebit().equals("")) {
            aTotalDebit = aTotalDebit.add(arAccountBalance.getTotalDebit());
          }
          if (arAccountBalance.getTotalCredit() != null && !arAccountBalance.getTotalCredit().equals("")) {
            aTotalCredit = aTotalCredit.add(arAccountBalance.getTotalCredit());
          }
        }
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.AR_ACCOUNT_BALANCE});
			}
    }
    return aOpeningBalance.subtract(aTotalCredit).add(aTotalDebit);
  }


  /**
   * Gets the vesselAccrualAmount attribute of the AccountReceivableManagerBean
   * object
   *
   * @param aDebtorId Description of the Parameter
   * @param aVesselId Description of the Parameter
   * @param user Description of the Parameter
   * @return The vesselAccrualAmount value
   * @exception AFMSException Description of the Exception
   * @modelguid {DE5D5752-D9D0-460E-85ED-4244A1DEB1AD}
   */
  public BigDecimal getVesselAccrualAmount(String aDebtorId, String aVesselId, IUser user) throws AFMSException {
    BigDecimal aAccrualAmount = new BigDecimal("0");
    try {
      aAccrualAmount = ICMSConnector.getVesselAccrualAmount(user.getIcmsSession(), aDebtorId, aVesselId);
      if (aAccrualAmount == null) {
        aAccrualAmount = new BigDecimal("0");
      }
    }
    catch (SQLException ex) {
      Logger.getInstance().logDebug("exception " + ex.getMessage());
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
			}
    }
    return aAccrualAmount;
  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return The totalDebtorCashDepositRefundAmount value
   * @exception AFMSException Description of the Exception
   * @modelguid {B0710AC1-CB46-4F27-9EB8-FE6ECDB2D9C1}
   */
  public BigDecimal getTotalDebtorCashDepositRefundAmount(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    return null;
  }


  /**
   * The formula of Total cash deposit equals to cash deposit amount minus total
   * refund amount minus total convert to COA amount.
   *
   * @param bo Description of the Parameter
   * @param user value object
   * @return total cash deposit
   * @exception AFMSException AFMS business exception
   * @modelguid {4BD722FB-48F8-45CD-9F97-0E1EE14C81A0}
   */
  public BigDecimal getTotalCashDeposit(ICustomer bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    BigDecimal totalCashDeposit = new BigDecimal(0.0);
    BigDecimal tempValue = null;
    AbstractCriteria[] filter1 = null;
    AbstractCriteria[] filter2 = null;
    AbstractCriteria[] filter3 = null;
    String combineFlag = SystemProfile.get(SystemProfile.DEBTOR_COMBINE_FLAG).toString();
    String trueFlag = Boolean.TRUE.toString();

    if (combineFlag.equals(trueFlag)) {
      filter1 = new AbstractCriteria[6];
      //Chee Seng 29th June 2005, bugId: 11991
      filter1[0] = new Criteria(DebtorCashDepositDAO.FILTER_DEBTOR_CODE, "=", bo.getAccountNumber());
      //filter1[0] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_SUBLEDGERACCOUNT, "=", bo.getAccountNumber());
      filter1[1] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE);
      filter1[2] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "=", ProcessStatus.POST);
      filter1[3] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_REVERSALDOCUMENTINDICATOR, "is null", null);
      filter1[4] = new FieldCriteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_FISCALYEAR, "=", DebtorCashDepositDAO.FILTER_FISCAL_YEAR);
      filter1[5] = new FieldCriteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER, "=", DebtorCashDepositDAO.FILTER_DOCUMENT_NUMBER);
    }
    else {
      filter1 = new AbstractCriteria[7];
      //Chee Seng 29th June 2005, bugId: 11991
      //filter1[0] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_SUBLEDGERACCOUNT, "=", bo.getAccountNumber());
      filter1[0] = new Criteria(DebtorCashDepositDAO.FILTER_DEBTOR_CODE, "=", bo.getAccountNumber());
      filter1[1] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE);
      filter1[2] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "=", ProcessStatus.POST);
      filter1[3] = new Criteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_REVERSALDOCUMENTINDICATOR, "is null", null);
      filter1[4] = new FieldCriteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_OFFICECODE, "=", DebtorCashDepositDAO.FILTER_OFFICE_CODE);
      filter1[5] = new FieldCriteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_FISCALYEAR, "=", DebtorCashDepositDAO.FILTER_FISCAL_YEAR);
      filter1[6] = new FieldCriteria(DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER, "=", DebtorCashDepositDAO.FILTER_DOCUMENT_NUMBER);
    }

    //Chee Seng 14th July 2005, bugId: 12360
    /*
    if (combineFlag.equals(trueFlag)) {
      filter2 = new AbstractCriteria[6];
      filter2[0] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_SUBLEDGERACCOUNT, "=", bo.getAccountNumber());
      filter2[1] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE);
      filter2[2] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "=", ProcessStatus.POST);
      filter2[3] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_REVERSALDOCUMENTINDICATOR, "is null", null);
      filter2[4] = new FieldCriteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_FISCALYEAR, "=", DebtorCashDepositRefundDAO.FILTER_FISCALYEAR);
      filter2[5] = new FieldCriteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER, "=", DebtorCashDepositRefundDAO.FILTER_DOCUMENTNUMBER);
    }
    else {
      filter2 = new AbstractCriteria[7];
      filter2[0] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_SUBLEDGERACCOUNT, "=", bo.getAccountNumber());
      filter2[1] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE);
      filter2[2] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "=", ProcessStatus.POST);
      filter2[3] = new Criteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_REVERSALDOCUMENTINDICATOR, "is null", null);
      filter2[4] = new FieldCriteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_OFFICECODE, "=", DebtorCashDepositRefundDAO.FILTER_OFFICECODE);
      filter2[5] = new FieldCriteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_FISCALYEAR, "=", DebtorCashDepositRefundDAO.FILTER_FISCALYEAR);
      filter2[6] = new FieldCriteria(DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER, "=", DebtorCashDepositRefundDAO.FILTER_DOCUMENTNUMBER);
    }
    */
    if (combineFlag.equals(trueFlag)) {
      filter3 = new AbstractCriteria[5];
      filter3[0] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_SUBLEDGER_ACCOUNT, "=", bo.getAccountNumber());
      //Chee Seng 14th July 2005, bugId: 12360
      //filter3[1] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_HEADER_INDICATOR, "=", Boolean.TRUE);
      filter3[1] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_PROCESS_STATUS, "=", ProcessStatus.POST);
      filter3[2] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_REVERSAL_DOCUMENT_INDICATOR, "is null", null);
      filter3[3] = new FieldCriteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_FISCAL_YEAR, "=", DebtorCashDepositToCOADAO.FILTER_FISCAL_YEAR);
      filter3[4] = new FieldCriteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_DOCUMENT_NUMBER, "=", DebtorCashDepositToCOADAO.FILTER_DOCUMENT_NUMBER);
    }
    else {
      filter3 = new AbstractCriteria[6];
      filter3[0] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_SUBLEDGER_ACCOUNT, "=", bo.getAccountNumber());
      //Chee Seng 14th July 2005, bugId: 12360
      //filter3[1] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_HEADER_INDICATOR, "=", Boolean.TRUE);
      filter3[1] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_PROCESS_STATUS, "=", ProcessStatus.POST);
      filter3[2] = new Criteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_REVERSAL_DOCUMENT_INDICATOR, "is null", null);
      filter3[3] = new FieldCriteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_OFFICE_CODE, "=", DebtorCashDepositToCOADAO.FILTER_OFFICE_CODE);
      filter3[4] = new FieldCriteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_FISCAL_YEAR, "=", DebtorCashDepositToCOADAO.FILTER_FISCAL_YEAR);
      filter3[5] = new FieldCriteria(DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_DOCUMENT_NUMBER, "=", DebtorCashDepositToCOADAO.FILTER_DOCUMENT_NUMBER);
    }

    try {
      java.util.List cashDepositList = DAOProxy.list("debtorCashDeposit", user, filter1);
      //Chee Seng 14th July 2005, bugId: 12360
      //java.util.List cashDepositRefundList = DAOProxy.list("debtorCashDepositRefund", user, filter2);
      java.util.List cashDepositRefundList = null;
      java.util.List cashDepositCOAList = DAOProxy.list("debtorCashDepositToCOA", user, filter3);

      BigDecimal totalCashDepositRefund = new BigDecimal("0.00");
      BigDecimal totalCashDepositCOA = new BigDecimal("0.00");

      if (cashDepositList != null && cashDepositList.size() > 0) {
        int cashDepositSize = cashDepositList.size();
        for (int depositCounter = 0; depositCounter < cashDepositSize; depositCounter++) {
          tempValue = ((IDebtorCashDeposit) cashDepositList.get(depositCounter)).getAmount();
          if (tempValue != null) {
            totalCashDeposit = totalCashDeposit.add(tempValue);
            Logger.getInstance().logDebug("CashDepositAmount " + tempValue);
          }
        }
      }

      Logger.getInstance().logDebug("totalCashDeposit " + totalCashDeposit);
      if (cashDepositList != null && cashDepositList.size() > 0) {
        DebtorCashDepositRefundDAO dao = (DebtorCashDepositRefundDAO) DAOProxy.getDAO("debtorCashDepositRefund", user);
        cashDepositRefundList = dao.listDebtorDepositRefund(bo.getOfficeCode(), cashDepositList);
      }

      if (cashDepositRefundList != null) {
        int cashRefundSize = cashDepositRefundList.size();
        for (int refundCounter = 0; refundCounter < cashRefundSize; refundCounter++) {
          tempValue = ((IDebtorCashDepositRefund) cashDepositRefundList.get(refundCounter)).getAmount();
          if (tempValue != null) {
            totalCashDeposit = totalCashDeposit.subtract(tempValue);
            Logger.getInstance().logDebug("CashDepositRefundAmount " + tempValue);
            totalCashDepositRefund = totalCashDepositRefund.add(tempValue);
          }
        }
      }
      Logger.getInstance().logDebug("totalCashDepositRefund " + totalCashDepositRefund);

      if (cashDepositCOAList != null) {
        int cashDepositCOASize = cashDepositCOAList.size();
        for (int depositCOACounter = 0; depositCOACounter < cashDepositCOASize; depositCOACounter++) {
          tempValue = ((IDebtorCashDepositToCOA) cashDepositCOAList.get(depositCOACounter)).getAmount();
          if (tempValue != null) {
            totalCashDeposit = totalCashDeposit.subtract(tempValue);
            Logger.getInstance().logDebug("CashDepositCOAAmount " + tempValue);
            totalCashDepositCOA = totalCashDepositCOA.add(tempValue);
          }
        }
      }
      Logger.getInstance().logDebug("totalCashDepositCOA " + totalCashDepositCOA);
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
      	throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
			}
    }
    //end try

    return totalCashDeposit;
  }


  /**
   * Gets the cashOnAccount attribute of the AccountReceivableManagerBean object
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return The cashOnAccount value
   * @exception AFMSException Description of the Exception
   * @modelguid {D3EEDF78-166B-49FD-8C98-8994396D2A54}
   */
  public BigDecimal getCashOnAccount(ICustomer bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    BigDecimal totalCashOnAccount = new BigDecimal(0.0);
    BigDecimal tempValue = null;

    AbstractCriteria[] filter1 = {
        new Criteria(GLAccountItemDAO.FILTER_SUBLEDGERACCOUNT, "=", bo.getAccountNumber()),
        new Criteria(GLAccountItemDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
        new Criteria(GLAccountItemDAO.FILTER_DOCUMENTTYPE, "=", TransactionDocumentType.DEBTOR_PAYMENT),
        new Criteria(GLAccountItemDAO.FILTER_SPECIALGLINDICATOR, "=", SpecialGLIndicator.CASH_GUARANTEE)};

    try {
      java.util.List cashOnAcctList = DAOProxy.list("GLAccountItem", user, filter1);
      if (cashOnAcctList != null) {
        int cashOnAcctSize = cashOnAcctList.size();

        for (int cashOnAcctCounter = 0; cashOnAcctCounter < cashOnAcctSize; cashOnAcctCounter++) {
          tempValue = ((IAbstractGLAccountItem) cashOnAcctList.get(cashOnAcctCounter)).getAmount();
          if (tempValue != null) {
            totalCashOnAccount = totalCashOnAccount.add(tempValue);
          }
        }
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    //end try
    return totalCashOnAccount;
  }


  /**
   * @modelguid {C941672F-EED7-4209-A4CC-07C17FB1733A}
   */
  public void ejbActivate() { }


  /**
   * @modelguid {F0FBA8CF-DC03-41F5-8395-9C590A986022}
   */
  public void ejbPassivate() { }


  /**
   * @modelguid {1538D2C6-A9C5-4376-9C75-E143D70914A8}
   */
  public void ejbRemove() { }


  /**
   * @modelguid {10B8AA26-E98D-487E-BD5C-637ED2B3B25C}
   */
  public void ejbCreate() {
    try {
      invoicePrefixHome = (InvoicePrefixHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.INVOICE_PREFIX, InvoicePrefixHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      cashBookSetupHome = (CashBookSetupHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.CASH_BOOK_SETUP, CashBookSetupHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      cashManagerHome = (CashManagerHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.CASH_MANAGER, CashManagerHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      cashTransferorHome = (CashTransferorHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.CASH_TRANSFEROR, CashTransferorHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorAgeingPeriodHome = (DebtorAgeingPeriodHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_AGEING_PERIOD, DebtorAgeingPeriodHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorAccountGroupHome = (DebtorAccountGroupHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_ACCOUNT_GROUP, DebtorAccountGroupHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorNumberRangeHome = (DebtorNumberRangeHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_NUMBER_RANGE, DebtorNumberRangeHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorReconAccountHome = (DebtorReconAccountHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_RECON_ACCOUNT, DebtorReconAccountHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      bankGuaranteeHome = (BankGuaranteeHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.BANK_GUARANTEE, BankGuaranteeHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      depositToBankHome = (DepositToBankHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEPOSIT_TO_BANK, DepositToBankHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      depositToBankReceiptHome = (DepositToBankReceiptHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEPOSIT_TO_BANK_RECEIPT, DepositToBankReceiptHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      depositToBankItemHome = (DepositToBankItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEPOSIT_TO_BANK_ITEM, DepositToBankItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      notesReceivableHome = (NotesReceivableHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.NOTES_RECEIVABLE, NotesReceivableHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      notesReceivableInvoiceItemHome = (NotesReceivableInvoiceItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.NOTES_RECEIVABLE_INVOICE_ITEM, NotesReceivableInvoiceItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      notesReceivableItemHome = (NotesReceivableItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.NOTES_RECEIVABLE_ITEM, NotesReceivableItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorDebitCreditMemoHome = (DebtorDebitCreditMemoHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_DEBIT_CREDIT_MEMO, DebtorDebitCreditMemoHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorDebitCreditMemoItemHome = (DebtorDebitCreditMemoItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_DEBIT_CREDIT_MEMO_ITEM, DebtorDebitCreditMemoItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorAccountHome = (DebtorAccountHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_ACCOUNT, DebtorAccountHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorPaymentHome = (DebtorPaymentHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_PAYMENT, DebtorPaymentHome.class);
    }
    catch (javax.naming.NamingException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorPaymentItemHome = (DebtorPaymentItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_PAYMENT_ITEM, DebtorPaymentItemHome.class);
    }
    catch (javax.naming.NamingException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      gLAccountItemHome = (GLAccountItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.GL_ACCOUNT_ITEM, GLAccountItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      generalLedgerManagerHome = (GeneralLedgerManagerHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.GENERAL_LEDGER_MANAGER, GeneralLedgerManagerHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      generalLedgerSetupHome = (GeneralLedgerSetupHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.GENERAL_LEDGER_SETUP, GeneralLedgerSetupHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      commonFunctionHome = (CommonFunctionHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.COMMON_FUNCTION, CommonFunctionHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      accountPayableHome = (AccountPayableManagerHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.ACCOUNT_PAYABLE_MANAGER, AccountPayableManagerHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      staffAdvanceHome = (StaffAdvanceHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.STAFF_ADVANCE, StaffAdvanceHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      staffAdvanceBudgetItemHome = (StaffAdvanceBudgetItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.STAFF_ADVANCE_BUDGET_ITEM, StaffAdvanceBudgetItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      staffAdvanceLiquidateHome = (StaffAdvanceLiquidationHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.STAFF_ADVANCE_LIQUIDATE, StaffAdvanceLiquidationHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      staffAdvanceLiquidateItemHome = (StaffAdvanceLiquidationItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.STAFF_ADVANCE_LIQUIDATE_ITEM, StaffAdvanceLiquidationItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      staffAdvanceLiquidatePaidItemHome = (StaffAdvanceLiquidationPaidItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.STAFF_ADVANCE_LIQUIDATE_PAID_ITEM, StaffAdvanceLiquidationPaidItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      staffAdvanceTypeHome = (StaffAdvanceTypeHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.STAFF_ADVANCE_TYPE, StaffAdvanceTypeHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      invoiceHome = (InvoiceHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.INVOICE, InvoiceHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      invoiceItemHome = (InvoiceItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.INVOICE_ITEM, InvoiceItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      clearingTransactionHome = (ClearingTransactionHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.CLEARING_TRANSACTION, ClearingTransactionHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      clearingTransactionItemHome = (ClearingTransactionItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.CLEARING_TRANSACTION_ITEM, ClearingTransactionItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      companyAccountHome = (CompanyAccountHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.COMPANY_ACCOUNT, CompanyAccountHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      arAccountBalanceHome = (ARAccountBalanceHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.AR_ACCOUNT_BALANCE, ARAccountBalanceHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      interOfficeCollectionHome = (InterOfficeCollectionHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.INTEROFFICE_COLLECTION, InterOfficeCollectionHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      surchargeTypeHome = (SurchargeTypeHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.SURCHARGE_TYPE, SurchargeTypeHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      surchargeTypeRateHome = (SurchargeTypeRateHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.SURCHARGE_TYPE_RATE, SurchargeTypeRateHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      surchargeInvoiceHome = (SurchargeInvoiceHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.SURCHARGE_INVOICE, SurchargeInvoiceHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      surchargeInvoiceItemHome = (SurchargeInvoiceItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.SURCHARGE_INVOICE_ITEM, SurchargeInvoiceItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      accountReceivableManagerHome = (AccountReceivableManagerHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.ACCOUNT_RECEIVABLE_MANAGER, AccountReceivableManagerHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      accountReceivableSetupHome = (AccountReceivableSetupHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.ACCOUNT_RECEIVABLE_SETUP, AccountReceivableSetupHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorCashDepositHome = (DebtorCashDepositHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_CASH_DEPOSIT, DebtorCashDepositHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      protestInvoiceHome = (ProtestInvoiceHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.PROTEST_INVOICE, ProtestInvoiceHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorCashDepositToCOAHome = (DebtorCashDepositToCOAHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_CASH_DEPOSIT_TO_COA, DebtorCashDepositToCOAHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      debtorCashDepositRefundHome = (DebtorCashDepositRefundHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.DEBTOR_CASH_DEPOSIT_REFUND, DebtorCashDepositRefundHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      overridingApprovalHome = (OverridingApprovalHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.OVERRIDING_APPROVAL, OverridingApprovalHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }

    try {
      chequeClearingHome = (ChequeClearingHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.CHEQUE_CLEARING, ChequeClearingHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    try {
      nonDebtorPaymentHome = (NonDebtorPaymentHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.NON_DEBTOR_PAYMENT, NonDebtorPaymentHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    try {
      nonDebtorPaymentItemHome = (NonDebtorPaymentItemHome) EJBHomeLocator.getInstance().lookup(HomeJndiName.NON_DEBTOR_PAYMENT_ITEM, NonDebtorPaymentItemHome.class);
    }
    catch (Throwable ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
  }


  /**
   * @param invoiceId Description of the Parameter
   * @param block Description of the Parameter
   * @param reason Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {DAD43A1E-50DB-4FD8-A2DE-65134A8A50EC}
   */
  public void blockInvoicePayment(String invoiceId, Boolean block, String reason) throws AFMSException {

    return;
    //void type
  }


  /**
   * Description of the Method
   *
   * @param surcharge Description of the Parameter
   * @param invoiceDate Description of the Parameter
   * @param invoiceDueDate Description of the Parameter
   * @param overDueAmount Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {81B51567-52C1-4BC0-88EA-C3DCE47E48E5}
   */
  public java.math.BigDecimal retrieveGenericSurchargeTypeInterest(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.sql.Date invoiceDueDate, java.math.BigDecimal overDueAmount, IUser user) throws AFMSException {
    //Untested
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    BigDecimal aRate = new BigDecimal(0);
    java.sql.Date aOverDueDate = invoiceDueDate;

    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_OFFICECODE, "=", surcharge.getOfficeCode()),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", surcharge.getCode())
          };
      java.util.List items = DAOProxy.list("surchargeTypeRate", user, filter);
      if (items.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
      }
      //Collection items = surchargeTypeRateHome.findBySurchargeType(surcharge.getOfficeCode(), surcharge.getCode());
      Iterator iterator = items.iterator();
      BigDecimal result = new BigDecimal(0);
      while (iterator.hasNext()) {
        ISurchargeTypeRate item = (ISurchargeTypeRate) iterator.next();
        ISurchargeTypeRate surchargeTypeRate = new SurchargeTypeRateValue();

        surchargeTypeRate.setInterestEffectiveDate(item.getInterestEffectiveDate());
        if (surchargeTypeRate.getInterestEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          surchargeTypeRate.setInterestRate(item.getInterestRate());
        }
        if (items.size() == 1) {
          java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
          BigDecimal calculate = new BigDecimal(0);
          BigDecimal percentage = new BigDecimal(100);
          Long numDay = new Long(0);
          calculate = surchargeTypeRate.getInterestRate().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
          calculate = calculate.multiply(overDueAmount);
          numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
          BigDecimal days = new BigDecimal(numDay.toString());

          result = calculate.multiply(days);
          return result;
        }
        else if (items.size() > 1) {
          if (invoiceDate.compareTo(surchargeTypeRate.getInterestEffectiveDate()) >= 0 && surchargeTypeRate.getInterestEffectiveDate().after(aOverDueDate)) {
            aRate = surchargeTypeRate.getInterestRate();

            java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
            BigDecimal calculate = new BigDecimal(0);
            BigDecimal percentage = new BigDecimal(100);
            Long numDay = new Long(0);
            calculate = aRate.divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
            calculate = calculate.multiply(overDueAmount);
            numDay = (new Long((calendarDate.getTime().getTime() - aOverDueDate.getTime()) / 86400000));
            BigDecimal days = new BigDecimal(numDay.toString());

            result = result.add(calculate.multiply(days));
            aOverDueDate = surchargeTypeRate.getInterestEffectiveDate();

          }
          else {
            aRate = surchargeTypeRate.getInterestRate();

            java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
            BigDecimal calculate = new BigDecimal(0);
            BigDecimal percentage = new BigDecimal(100);
            Long numDay = new Long(0);
            calculate = aRate.divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
            calculate = calculate.multiply(overDueAmount);
            numDay = (new Long((calendarDate.getTime().getTime() - aOverDueDate.getTime()) / 86400000));
            BigDecimal days = new BigDecimal(numDay.toString());

            result = result.add(calculate.multiply(days));
          }
        }
        else {
          return null;
        }
      }
      return result;
    }
    catch (java.sql.SQLException fx) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(fx.getErrorCode()).equals("-244") || String.valueOf(fx.getErrorCode()).equals("-271")) {
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param surcharge Description of the Parameter
   * @param invoiceDate Description of the Parameter
   * @param invoiceDueDate Description of the Parameter
   * @param overDueAmount Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {639138A6-BF4A-48CC-8791-31744ACDC32C}
   */
  public java.math.BigDecimal retrieveGenericSurchargeTypePenalty(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.sql.Date invoiceDueDate, java.math.BigDecimal overDueAmount, IUser user) throws AFMSException {
    //Untested
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    BigDecimal aRate = new BigDecimal(0);
    java.sql.Date aOverDueDate = invoiceDueDate;

    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_OFFICECODE, "=", surcharge.getOfficeCode()),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", surcharge.getCode())
          };
      java.util.List items = DAOProxy.list("surchargeTypeRate", user, filter);
      if (items.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
      }
      Iterator iterator = items.iterator();
      BigDecimal result = new BigDecimal(0);
      while (iterator.hasNext()) {
        ISurchargeTypeRate item = (ISurchargeTypeRate) iterator.next();
        ISurchargeTypeRate surchargeTypeRate = new SurchargeTypeRateValue();

        surchargeTypeRate.setPenaltyEffectiveDate(item.getPenaltyEffectiveDate());
        if (surchargeTypeRate.getPenaltyEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          surchargeTypeRate.setPenaltyRate(item.getPenaltyRate());
        }
        if (items.size() == 1) {
          java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
          BigDecimal calculate = new BigDecimal(0);
          BigDecimal percentage = new BigDecimal(100);
          Long numDay = new Long(0);
          calculate = surchargeTypeRate.getPenaltyRate().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
          calculate = calculate.multiply(overDueAmount);
          numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
          BigDecimal days = new BigDecimal(numDay.toString());

          result = calculate.multiply(days);
          return result;
        }
        else if (items.size() > 1) {
          if (invoiceDate.compareTo(surchargeTypeRate.getPenaltyEffectiveDate()) >= 0 && surchargeTypeRate.getPenaltyEffectiveDate().after(aOverDueDate)) {
            aRate = surchargeTypeRate.getPenaltyRate();

            java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
            BigDecimal calculate = new BigDecimal(0);
            BigDecimal percentage = new BigDecimal(100);
            Long numDay = new Long(0);
            calculate = aRate.divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
            calculate = calculate.multiply(overDueAmount);
            numDay = (new Long((calendarDate.getTime().getTime() - aOverDueDate.getTime()) / 86400000));
            BigDecimal days = new BigDecimal(numDay.toString());

            result = result.add(calculate.multiply(days));
            aOverDueDate = surchargeTypeRate.getPenaltyEffectiveDate();

          }
          else {
            aRate = surchargeTypeRate.getPenaltyRate();

            java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
            BigDecimal calculate = new BigDecimal(0);
            BigDecimal percentage = new BigDecimal(100);
            Long numDay = new Long(0);
            calculate = aRate.divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
            calculate = calculate.multiply(overDueAmount);
            numDay = (new Long((calendarDate.getTime().getTime() - aOverDueDate.getTime()) / 86400000));
            BigDecimal days = new BigDecimal(numDay.toString());

            result = result.add(calculate.multiply(days));
          }
        }
        else {
          return null;
        }
      }
      return result;
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param surcharge Description of the Parameter
   * @param invoiceDueDate Description of the Parameter
   * @param asOfDueDate Description of the Parameter
   * @param overDueAmount Description of the Parameter
   * @param daysDue Description of the Parameter
   * @param surchargeCount Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {602DD83D-7DFC-456F-B103-F36CB251BBDB}
   */
  //tml 19 June 2006, BugId: 17213
  public java.math.BigDecimal retrieveSurchargeTypeInterest(ISurchargeType surcharge, java.sql.Date invoiceDueDate, java.sql.Date asOfDueDate, java.math.BigDecimal overDueAmount, BigDecimal daysDue, Integer surchargeCount, IUser user) throws AFMSException {

    BigDecimal calculate = new BigDecimal(0);
    BigDecimal percentage = new BigDecimal(100);
    BigDecimal interestRate = new BigDecimal(0);
    BigDecimal calculationBasedDays = new BigDecimal(360.00);
    BigDecimal result = new BigDecimal(0.00);
    BigDecimal interestRate1 = new BigDecimal(0);
    BigDecimal interestRate2 = new BigDecimal(0);
    BigDecimal interestDays1 = new BigDecimal(0.00);
    BigDecimal interestDays2 = new BigDecimal(0.00);
    BigDecimal interest1 = new BigDecimal(0.00);
    BigDecimal interest2 = new BigDecimal(0.00);
    Integer numberOfSurcharge = new Integer(0);

    java.sql.Date surchargeStartDate = new java.sql.Date(86400000 + invoiceDueDate.getTime());
    Logger.getInstance().logDebug("surchargeStartDate = " + surchargeStartDate);
    Logger.getInstance().logDebug("invoiceDueDate = " + invoiceDueDate);
    Logger.getInstance().logDebug("surcharge.getSurchargeIndicator() = " + surcharge.getSurchargeIndicator());
    Logger.getInstance().logDebug("surcharge.getItems().size() = " + surcharge.getItems().size());

    //limited surcharge
    if (surcharge.getSurchargeIndicator().equals(Boolean.TRUE)) {
      numberOfSurcharge = new Integer(surchargeCount.intValue() + 1);
    }
    else {
      if (surchargeCount.intValue() < surcharge.getItems().size()) {
        numberOfSurcharge = new Integer(surchargeCount.intValue() + 1);
      }
      else {
        numberOfSurcharge = new Integer(surcharge.getItems().size());
      }

    }
    Logger.getInstance().logDebug("numberOfSurcharge = " + numberOfSurcharge);
    try {
      //if limited surcharge

      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", surcharge.getCode()),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_ITEMNUMBER, "=", numberOfSurcharge),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_INTERESTEFFECTIVEDATE, "<=", surchargeStartDate)
          };

      java.util.List items = DAOProxy.list("surchargeTypeRate", user, filter);
      if (items.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
      }

      ISurchargeTypeRate item = (ISurchargeTypeRate) items.get(0);

      if (surcharge.getCalculationBasedDays() != null && surcharge.getCalculationBasedDays().intValue() > 0) {
        calculationBasedDays = new BigDecimal(surcharge.getCalculationBasedDays().intValue()).setScale(2);
      }

      if (item.getInterestEffectiveDate2() == null) {
        interestRate = item.getInterestRate();
      }
      else {
        if (item.getInterestEffectiveDate2().compareTo(surchargeStartDate) <= 0) {
          interestRate = item.getInterestRate2();
        }
        else {
          interestRate = item.getInterestRate();
        }
      }
      calculate = interestRate.divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
      Logger.getInstance().logDebug("calculationBasedDays = " + calculationBasedDays);

      if (surcharge.getSurchargeCalculationType().equals(IConstants.SurchargeCalculationType.BALANCE_DUE)) {
        result = calculate.multiply(overDueAmount);
      }
      else {
        if (item.getInterestEffectiveDate2() != null && item.getInterestEffectiveDate2().compareTo(asOfDueDate) <= 0) {
          interestRate1 = item.getInterestRate().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
          interestRate2 = item.getInterestRate2().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
          interestDays1 = new BigDecimal((item.getInterestEffectiveDate2().getTime() - surchargeStartDate.getTime()) / 86400000);
          interestDays1 = interestDays1.divide(calculationBasedDays, BigDecimal.ROUND_HALF_EVEN);
          interestDays2 = new BigDecimal((asOfDueDate.getTime() - item.getInterestEffectiveDate2().getTime()) / 86400000);
          interestDays2 = interestDays2.divide(calculationBasedDays, BigDecimal.ROUND_HALF_EVEN);
          interest1 = interestDays1.multiply(interestRate1).multiply(overDueAmount);
          interest2 = interestDays2.multiply(interestRate2).multiply(overDueAmount);
          result = interest1.add(interest2);
        }
        else {
          daysDue = daysDue.setScale(4);
          Logger.getInstance().logDebug("daysDue = " + daysDue);
          Logger.getInstance().logDebug("calculate.multiply(overDueAmount) = " + calculate.multiply(overDueAmount));
          Logger.getInstance().logDebug("daysDue.divide(calculationBasedDays, BigDecimal.ROUND_HALF_EVEN) = " + daysDue.divide(calculationBasedDays, BigDecimal.ROUND_HALF_EVEN));
          result = calculate.multiply(overDueAmount).multiply(daysDue.divide(calculationBasedDays, BigDecimal.ROUND_HALF_EVEN));
        }
      }
      Logger.getInstance().logDebug("result = " + result);

      return result.setScale(2, BigDecimal.ROUND_HALF_EVEN);
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @modelguid {0A377EBA-0CC5-4734-9383-27EFAC9045F4}
   */
  /*
  public java.math.BigDecimal retrieveSurchargeTypePenalty(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.math.BigDecimal overDueAmount, IUser user) throws AFMSException {
    //Untested
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    BigDecimal aRate = new BigDecimal(0);
    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_OFFICECODE, "=", surcharge.getOfficeCode()),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", surcharge.getCode())
          };
      java.util.List items = DAOProxy.list("surchargeTypeRate", user, filter);
      if (items.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
      }
      Iterator iterator = items.iterator();
      BigDecimal result = new BigDecimal(0);
      while (iterator.hasNext()) {
        ISurchargeTypeRate item = (ISurchargeTypeRate) iterator.next();
        ISurchargeTypeRate surchargeTypeRate = new SurchargeTypeRateValue();
        surchargeTypeRate.setPenaltyEffectiveDate(item.getPenaltyEffectiveDate());
        if (surchargeTypeRate.getPenaltyEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          surchargeTypeRate.setPenaltyRate(item.getPenaltyRate());
        }
        if (items.size() == 1) {
          java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
          BigDecimal calculate = new BigDecimal(0);
          BigDecimal percentage = new BigDecimal(100);
          Long numDay = new Long(0);
          calculate = surchargeTypeRate.getPenaltyRate().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
          calculate = calculate.multiply(overDueAmount);
          numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
          BigDecimal days = new BigDecimal(numDay.toString());
          result = calculate.multiply(days);
          return result;
        }
        else if (items.size() > 1) {
          if (invoiceDate.before(surchargeTypeRate.getPenaltyEffectiveDate())) {
            aRate = surchargeTypeRate.getPenaltyRate();
            java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
            BigDecimal calculate = new BigDecimal(0);
            BigDecimal percentage = new BigDecimal(100);
            Long numDay = new Long(0);
            calculate = aRate.divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
            calculate = calculate.multiply(overDueAmount);
            numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
            BigDecimal days = new BigDecimal(numDay.toString());
            result = calculate.multiply(days);
            break;
          }
          else {
            aRate = surchargeTypeRate.getPenaltyRate();
            return result;
          }
        }
        else {
          return null;
        }
      }
      return result;
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.SURCHARGE_TYPE_CODE});
    }
  }
*/
  /**
   * Description of the Method
   *
   * @param surcharge Description of the Parameter
   * @param invoiceDate Description of the Parameter
   * @param invoiceDueDate Description of the Parameter
   * @param overDueAmount Description of the Parameter
   * @param surchargeCount Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {BDEAED0D-C333-438F-9443-331CA4FDEDF3}
   */
  public java.math.BigDecimal retrieveSurchargeTypeRateByCount(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.sql.Date invoiceDueDate, java.math.BigDecimal overDueAmount, Integer surchargeCount, IUser user) throws AFMSException {
    //Untested
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    BigDecimal rate = new BigDecimal(0);
    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_OFFICECODE, "=", ICMSConnector.IGNORE),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", surcharge.getCode()),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_ITEMNUMBER, "=", new Integer(1))
          };
      java.util.List results = DAOProxy.list("surchargeTypeRate", user, filter);
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.OFFICECODE_AND_CODE_AND_ITEM});
      }
      ISurchargeTypeRate surchargeTypeRate = (ISurchargeTypeRate) results.get(0);
      //SurchargeTypeRate surchargeTypeRate = surchargeTypeRateHome.findByPrimaryKey(new SurchargeTypeRatePK(ICMSConnector.IGNORE, surcharge.getCode(), new Integer(1)));

      if (surchargeCount.compareTo(new Integer(1)) < 0) {
        bo.setInterestEffectiveDate(surchargeTypeRate.getInterestEffectiveDate());
        if (bo.getInterestEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          bo.setInterestRate(surchargeTypeRate.getInterestRate());
          rate = surchargeTypeRate.getInterestRate();
        }
        else {
          bo.setInterestRate(rate);
        }
      }
      else {
        bo.setPenaltyEffectiveDate(surchargeTypeRate.getPenaltyEffectiveDate());
        if (bo.getPenaltyEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          bo.setPenaltyRate(surchargeTypeRate.getPenaltyRate());
          rate = surchargeTypeRate.getPenaltyRate();
        }
        else {
          bo.setPenaltyRate(rate);
        }
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.OFFICECODE_AND_CODE_AND_ITEM});
			}
    }
    return rate;
  }


  /**
   * Description of the Method
   *
   * @param surcharge Description of the Parameter
   * @param invoiceDate Description of the Parameter
   * @param invoiceDueDate Description of the Parameter
   * @param overDueAmount Description of the Parameter
   * @param surchargeCount Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {79A382AA-B527-4ABA-AC3E-02660E3E0340}
   */
  public java.math.BigDecimal retrieveSurchargeTypeAmountByCount(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.sql.Date invoiceDueDate, java.math.BigDecimal overDueAmount, Integer surchargeCount, IUser user) throws AFMSException {
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    BigDecimal rate = new BigDecimal(0);
    BigDecimal result = new BigDecimal(0);
    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      //Chee Seng 22nd July 2005, bugId: 10822
      java.util.List results = new ArrayList();
      if (surcharge.getItems() != null && surcharge.getItems().size() > 0) {
        results = surcharge.getItems();
      }
      else {
        //Chee Seng 13th Aug 2004, bugId: 6948
        AbstractCriteria[] filter = {
            new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_OFFICECODE, "=", ICMSConnector.IGNORE),
            new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", surcharge.getCode()),
            new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_ITEMNUMBER, "=", new Integer(1))
            };
        results = DAOProxy.list("surchargeTypeRate", user, filter);
      }

      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeRateLabelId.OFFICECODE_AND_CODE_AND_ITEM});
      }
      ISurchargeTypeRate surchargeTypeRate = (ISurchargeTypeRate) results.get(0);
      //SurchargeTypeRate surchargeTypeRate = surchargeTypeRateHome.findByPrimaryKey(new SurchargeTypeRatePK(ICMSConnector.IGNORE, surcharge.getCode(), new Integer(1)));
      Logger.getInstance().logDebug("surchargeCount = " + surchargeCount);
      Logger.getInstance().logDebug("Condition for surcharge Count Comparison = " + (surchargeCount.compareTo(new Integer(2)) < 0));
      Logger.getInstance().logDebug("Condition for surcharge Count Comparison = " + (surchargeCount.compareTo(new Integer(1)) < 0));
      if (surchargeCount.compareTo(new Integer(1)) < 0) {
        bo.setInterestEffectiveDate(surchargeTypeRate.getInterestEffectiveDate());
        Logger.getInstance().logDebug("condition for effective date  comparison = " + (bo.getInterestEffectiveDate().before(AFMSUtilities.getCurrentDate())));
        if (bo.getInterestEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          bo.setInterestRate(surchargeTypeRate.getInterestRate());
          rate = surchargeTypeRate.getInterestRate();
          Logger.getInstance().logDebug("rate 1 = " + rate);
        }
        else {
          bo.setInterestRate(rate);
          Logger.getInstance().logDebug("rate 2 = " + rate);
        }

        java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
        BigDecimal calculate = new BigDecimal(0);
        BigDecimal percentage = new BigDecimal(100);
        Long numDay = new Long(0);

        calculate = surchargeTypeRate.getInterestRate().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
        result = calculate.multiply(overDueAmount);
        //Bug Id: 5664 Joseph Lim 17 May 2004 - Removal of calculation multiplication by num of days overdue
        //numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
        //BigDecimal days = new BigDecimal(numDay.toString());
        //result = calculate.multiply(days);

        return result.setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION);
      }
      else {
        bo.setPenaltyEffectiveDate(surchargeTypeRate.getPenaltyEffectiveDate());
        Logger.getInstance().logDebug("condition penalty efective date = " + (bo.getPenaltyEffectiveDate().before(AFMSUtilities.getCurrentDate())));
        if (bo.getPenaltyEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          bo.setPenaltyRate(surchargeTypeRate.getPenaltyRate());
          rate = surchargeTypeRate.getPenaltyRate();
          Logger.getInstance().logDebug("rate 3 = " + rate);
        }
        else {
          bo.setPenaltyRate(rate);
          Logger.getInstance().logDebug("rate 4 = " + rate);
        }

        java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
        BigDecimal calculate = new BigDecimal(0);
        BigDecimal percentage = new BigDecimal(100);
        Long numDay = new Long(0);

        calculate = surchargeTypeRate.getPenaltyRate().divide(percentage, IConstants.ROUNDING_MODE.DIVISION);
        result = calculate.multiply(overDueAmount);
        //Bug Id: 5664 Joseph Lim 17 May 2004 - Removal of calculation multiplication by num of days overdue
        //numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
        //BigDecimal days = new BigDecimal(numDay.toString());

        //result = calculate.multiply(days);

        return result.setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION);
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeTypeRateLabelId.OFFICECODE_AND_CODE_AND_ITEM});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param surchargeTypeCode Description of the Parameter
   * @param invoiceDueDate Description of the Parameter
   * @param asOfDueDate Description of the Parameter
   * @param overDueAmount Description of the Parameter
   * @param surchargeCount Description of the Parameter
   * @param daysDue Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {19F8AF17-92B2-4C22-A122-1FBCD2A4340D}
   */
  /*
  public java.math.BigDecimal calculateSurchargeAmount(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.sql.Date invoiceDueDate, java.math.BigDecimal overDueAmount, Integer surchargeCount, IUser user) throws AFMSException {
    BigDecimal interest = new BigDecimal(0);
    BigDecimal penalty = new BigDecimal(0);
    BigDecimal amount = new BigDecimal(0);
    if ((com.portrade.ipms.icms.SystemProfile.get(com.portrade.ipms.icms.SystemProfile.SURCHARGE_TYPE_INDICATOR)).equals("1")) {
      interest = retrieveSurchargeTypeInterest(surcharge, invoiceDate, overDueAmount, user);
      penalty = retrieveSurchargeTypePenalty(surcharge, invoiceDate, overDueAmount, user);
      return interest.add(penalty);
    }
    else if ((com.portrade.ipms.icms.SystemProfile.get(com.portrade.ipms.icms.SystemProfile.SURCHARGE_TYPE_INDICATOR)).equals("2")) {
      Logger.getInstance().logDebug("retrieveSurchargeTypeAmountByCount");
      amount = retrieveSurchargeTypeAmountByCount(surcharge, invoiceDate, invoiceDueDate, overDueAmount, surchargeCount, user);
      return amount;
    }
    else {
      interest = retrieveGenericSurchargeTypeInterest(surcharge, invoiceDate, invoiceDueDate, overDueAmount, user);
      penalty = retrieveGenericSurchargeTypePenalty(surcharge, invoiceDueDate, invoiceDueDate, overDueAmount, user);
      return interest.add(penalty);
    }
  }
	 * @modelguid {FF899BDC-2712-4E0C-B1F9-213CD162BD4E}
	 */
  public java.math.BigDecimal calculateSurchargeAmount(String surchargeTypeCode, java.sql.Date invoiceDueDate, java.sql.Date asOfDueDate, java.math.BigDecimal overDueAmount, Integer surchargeCount, BigDecimal daysDue, IUser user) throws AFMSException {

    BigDecimal interest = new BigDecimal(0);

    ISurchargeType surcharge = retrieveSurchargeType(ICMSConnector.IGNORE, surchargeTypeCode, user);

    interest = retrieveSurchargeTypeInterest(surcharge, invoiceDueDate, asOfDueDate, overDueAmount, daysDue, surchargeCount, user);
    Logger.getInstance().logDebug("interest = " + interest);
    return interest;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param code Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {83E6B6C5-F3DD-4B15-9AD7-C9BEEC1A1364}
   */
  public com.portrade.ipms.afms.ISurchargeType retrieveSurchargeType(String officeCode, String code, IUser user) throws AFMSException {
    com.portrade.ipms.afms.ISurchargeType bo = new com.portrade.ipms.afms.bo.SurchargeTypeValue();
    com.portrade.ipms.afms.ISurchargeTypeRate boItem = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();

    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeDAO.FILTER_CODE, "=", code)
          };

      java.util.List results = DAOProxy.list("surchargeType", user, filter);
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.SurchargeTypeLabelId.OFFICECODE_AND_CODE});
      }
      else {
        bo = (ISurchargeType) results.get(0);
      }
      /*
      SurchargeType surchargeType = surchargeTypeHome.findByPrimaryKey(new SurchargeTypePK(officeCode, code));
      bo.setOfficeCode(surchargeType.getOfficeCode());
      bo.setCode(surchargeType.getCode());
      bo.setDescription(surchargeType.getDescription());
      bo.setRemark(surchargeType.getRemark());
      bo.setCid(surchargeType.getCid());
      bo.setCreatedBy(surchargeType.getCreatedBy());
      bo.setCreatedOn(surchargeType.getCreatedOn());
      bo.setLastUpdateBy(surchargeType.getLastUpdateBy());
      bo.setLastUpdateOn(surchargeType.getLastUpdateOn());
      */
      AbstractCriteria[] filter1 = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeTypeRateDAO.FILTER_SURCHARGETYPECODE, "=", code)
          };
      java.util.List items = DAOProxy.list("surchargeTypeRate", user, filter1);
      //Collection items = surchargeTypeRateHome.findBySurchargeType(officeCode, code);
      Iterator iterator = items.iterator();
      while (iterator.hasNext()) {
        ISurchargeTypeRate surchargeTypeRate = (ISurchargeTypeRate) iterator.next();
        //SurchargeTypeRate item = (SurchargeTypeRate) iterator.next();
        //ISurchargeTypeRate surchargeTypeRate = new SurchargeTypeRateValue();
        /*
        surchargeTypeRate.setCid(item.getCid());
        surchargeTypeRate.setCreatedBy(item.getCreatedBy());
        surchargeTypeRate.setCreatedOn(item.getCreatedOn());
        surchargeTypeRate.setInterestEffectiveDate(item.getInterestEffectiveDate());
        surchargeTypeRate.setInterestRate(item.getInterestRate());
        surchargeTypeRate.setItemNumber(item.getItemNumber());
        surchargeTypeRate.setOfficeCode(item.getOfficeCode());
        surchargeTypeRate.setPenaltyEffectiveDate(item.getPenaltyEffectiveDate());
        surchargeTypeRate.setPenaltyRate(item.getPenaltyRate());
        surchargeTypeRate.setLastUpdateOn(item.getLastUpdateOn());
        surchargeTypeRate.setLastUpdateBy(item.getLastUpdateBy());
        */
        bo.addItem(surchargeTypeRate);
      }
    }
    catch (java.sql.SQLException fx) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(fx.getErrorCode()).equals("-244") || String.valueOf(fx.getErrorCode()).equals("-271")) {
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{LoanRevaluationLabelId.OFFICECODE_AND_LOANNUMBER_AND_DOCUMENTNUMBER});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param surchargeInvoiceList Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {BD798CC6-8994-48CD-AD68-03655F583442}
   */
  public ArrayList confirmCreateSurchargeInvoice(java.util.ArrayList surchargeInvoiceList, com.portrade.ipms.icms.IUser user) throws AFMSException {

    CommonFunction commonFunction = null;
    GeneralLedgerSetup glSetup = null;
    //tml 04 July 2006, BugId: 17433
    AccountReceivableSetup arSetup = null;
    Long aDocumentNumber = null;
    IOffice officeCode = null;
    IAutomaticAccountAssignment glAccount = null;
    String postingType = null;
    Invoice invoice = null;
    SurchargeInvoice surchargeInvoice = null;
    ISurchargeInvoice bo = new SurchargeInvoiceValue();
    Integer fiscalYear = null;
    Integer period = null;
    String debitCreditType = null;
    DebtorDebitCreditMemo debtorDebitCreditMemo = null;

    boolean surchargeOnSurchargeFlag = false;
    //tml 16 June 2006, BugId: 17213
    boolean skipDateFlag = false;
    boolean excludeProtestDurationFlag = false;
    boolean totalDueSurchargeFlag = false;
    boolean multipleReconAccountFlag = false;

    if (SystemProfile.get(SystemProfile.SKIP_DATE_FLAG) != null && SystemProfile.get(SystemProfile.SKIP_DATE_FLAG).equals("true")) {
      skipDateFlag = true;
    }
    if (SystemProfile.get(SystemProfile.EXCLUDE_PROTEST_DURATION_FLAG) != null && SystemProfile.get(SystemProfile.EXCLUDE_PROTEST_DURATION_FLAG).equals("true")) {
      excludeProtestDurationFlag = true;
    }

    if (SystemProfile.get(SystemProfile.TOTAL_DUE_SURCHARGE_FLAG) != null && SystemProfile.get(SystemProfile.TOTAL_DUE_SURCHARGE_FLAG).equals("true")) {
      totalDueSurchargeFlag = true;
    }

    if (SystemProfile.get(SystemProfile.MULTIPLE_RECON_ACCOUNT_FLAG) != null && SystemProfile.get(SystemProfile.MULTIPLE_RECON_ACCOUNT_FLAG).equals("true")) {
      multipleReconAccountFlag = true;
    }

    if (SystemProfile.get(SystemProfile.SURCHARGE_ON_SURCHARGE_FLAG) != null && SystemProfile.get(SystemProfile.SURCHARGE_ON_SURCHARGE_FLAG).equals("true")) {
      surchargeOnSurchargeFlag = true;
    }

    try {
      commonFunction = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
      arSetup = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Chee Seng 09th Dec 2004, bugId: 8866
    if (surchargeInvoiceList.size() > 0) {
      Logger.getInstance().logDebug("***surchargeInvoiceList.size() > 0");
      bo = new SurchargeInvoiceValue();
      bo = (ISurchargeInvoice) surchargeInvoiceList.get(0);
      try {
        fiscalYear = commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user);
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      try {
        period = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user);
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      try {
        officeCode = glSetup.retrieveOffice(bo.getOfficeCode(), user);
      }
      catch (RecordNotFoundException x) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.CODE});
      }
      catch (java.rmi.RemoteException x) {
        throw new javax.ejb.EJBException(x.toString());
      }
      /*
      try {
        IPostingKey aPostingKey = glSetup.retrievePostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT, user);
        debitCreditType = aPostingKey.getDebitCredit();
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{PostingKeyLabelId.POSTING_KEY});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }*/
    }

    Logger.getInstance().logDebug("***BEFORE FOR LOOP surchargeInvoiceList.size() ");

    for (int i = 0; i < surchargeInvoiceList.size(); i++) {
      bo = new SurchargeInvoiceValue();
      bo = (ISurchargeInvoice) surchargeInvoiceList.get(i);

      //Chee Seng 09th Dec 2004, bugId: 8866
      bo.setFiscalYear(fiscalYear);
      bo.setPostingPeriod(period);
      Logger.getInstance().logDebug("bo.getDocumentDate() = " + bo.getDocumentDate());
      Logger.getInstance().logDebug("bo.getPostingDate() = " + bo.getPostingDate());
      Logger.getInstance().logDebug("\n\n***COUNT surchargeInvoiceList IN LOOP  [" + i + "]");
      if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) {
        try {
          aDocumentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), IConstants.TransactionDocumentType.SURCHARGE_INVOICE, user);
          bo.setDocumentNumber(aDocumentNumber);
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
      }

      bo.setAccountType(IConstants.PostingAccountType.DEBTOR);
      bo.setDocumentType(IConstants.TransactionDocumentType.SURCHARGE_INVOICE);
      //bo.setDocumentDate(bo.getAsOfDueDate());

      bo.setPostingKey(IConstants.TransactionPostingKey.SURCHARGE);
      bo.setProcessStatus(ProcessStatus.PARK);
      bo.setHeaderIndicator(Boolean.TRUE);

      List glAccountItemList = new ArrayList();
      BigDecimal accumulatedAmount = new BigDecimal("0");
      BigDecimal accumulatedAmountInLocalCurrency = new BigDecimal("0");
      String debtorCode = null;
      Logger.getInstance().logDebug("  >>>> BEFORE FOR LOOP IN ITEM LIST ");
      //tml 19 June 2006, BugId: 17213
      long protestDuration = 0;
      long daysDue = 0;
      java.sql.Date documentDueDate = null;

      if (bo.isConversionIndicator() != null && bo.isConversionIndicator().booleanValue()) {
        try {
          IDebtorReconAccountType debtorReconAccountType = glSetup.retrieveDebtorReconAccountType(bo.getOfficeCode(), bo.getReconAccountType(), user);
          bo.setPaymentTerm(debtorReconAccountType.getPaymentTerm());
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }

        Logger.getInstance().logDebug("paymentTerm during conversion : " + bo.getPaymentTerm());
      }
      if (bo.getInvoicePrefix() != null && !bo.getInvoicePrefix().equals("")) {
        try {
          IInvoicePrefix invoicePrefix = arSetup.retrieveInvoicePrefix(bo.getInvoicePrefix(), user);
          bo.setReconAccountType(invoicePrefix.getInvoiceType());
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
        Logger.getInstance().logDebug("bo.getReconAccountType() : " + bo.getReconAccountType());
      }

      try {
        if (bo.getPaymentTerm() != null) {
          documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), AFMSUtilities.getCurrentDate(), bo.getDocumentDate(), bo.getPostingDate(), user);
          //Chee Seng 09th Dec 2004, bugId: 8866
          bo.setDocumentDueDate(documentDueDate);
        }
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      for (int j = 0; j < bo.getItems().size(); j++) {
        ISurchargeInvoiceItem boItem = (ISurchargeInvoiceItem) bo.getItems().get(j);

//		bo.setDocumentDate(boItem.getDocumentDate());
//		bo.setPostingDate(boItem.getPostingDate());

        debtorCode = boItem.getDebtorCode();

        Logger.getInstance().logDebug("  >>>>ITEM LIST  COUNT [" + j + "]");
        //if (boItem.getSurchargeCount().compareTo(new Integer(1)) < 0) {
        postingType = IConstants.AutomaticAccountDetermination.INTEREST_EARNED;
//        }
//        else {
//          postingType = IConstants.AutomaticAccountDetermination.PENALTY;
//        }

        try {
          Logger.getInstance().logDebug("officeCode.getCOA() = " + officeCode.getCOA());
          Logger.getInstance().logDebug("boItem.getOfficeCode() = " + boItem.getOfficeCode());
          Logger.getInstance().logDebug("postingType = " + postingType);
		  		Logger.getInstance().logDebug("bo.getOfficeCode() = " + bo.getOfficeCode());
		  		//Hui Mian 26/03/2008, bugid: 25086 to cater for inv from other office code
          //glAccount = glSetup.retrieveAutomaticAccountAssignment(officeCode.getCOA(), boItem.getOfficeCode(), postingType, IConstants.TransactionPostingKey.JOURNAL_CREDIT, user);
		  		glAccount = glSetup.retrieveAutomaticAccountAssignment(officeCode.getCOA(), bo.getOfficeCode(), postingType, IConstants.TransactionPostingKey.JOURNAL_CREDIT, user);
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
		Logger.getInstance().logDebug("glaccount - " + glAccount.getGlAccount());
		Logger.getInstance().logDebug("glaccount - " + glAccount.getDescription());
        accumulatedAmount = accumulatedAmount.add(boItem.getAmount());
        accumulatedAmountInLocalCurrency = accumulatedAmountInLocalCurrency.add(boItem.getAmountInLocalCurrency());
        Logger.getInstance().logDebug("  >>>> Update Invoice ");
        Logger.getInstance().logDebug("  >>>> PK Invoice IConstants.CustomerType.DEBTOR =[" + IConstants.CustomerType.DEBTOR + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getOfficeCode() =[" + boItem.getOfficeCode() + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedRefFiscalYear() =[" + boItem.getClearedRefFiscalYear() + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedRefDocumentNumber() =[" + boItem.getClearedRefDocumentNumber() + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getDocumentNumber() =[" + boItem.getDocumentNumber() + "]");

        if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.DEBTOR_INVOICE.equals(boItem.getInvoiceDocumentType())) {
//				Update Invoice
          setClearRefDocumentNumberAndFiscalYear(boItem, user);

          try {
            //FIXME: no customer type in Surcharge invoice. Just pass in DB
            //invoice = invoiceHome.findByPrimaryKey(new InvoicePK(IConstants.CustomerType.DEBTOR, boItem.getOfficeCode(),
            //    boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber()));
						invoice = invoiceHome.findByFiscalYearDocumentNumber(boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber());
            invoice.setSurchargeCount(new Integer(boItem.getSurchargeCount().intValue() + 1));
            invoice.setLastSurchargeDate(bo.getDocumentDate());
            invoice.setLastSurchargeDueDate(bo.getDocumentDueDate());
            invoice.setLastUpdateBy(user.getId());
            invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
            //Chee Seng 6th July 2005, bugId: 11719
            ACRAuditTrail.updateLogAuditTrail(invoice, user);
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.INVOICE_NUMBER});
          }
          catch (AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw ex;
          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
        else if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.SURCHARGE_INVOICE.equals(boItem.getInvoiceDocumentType())) {
          if (surchargeOnSurchargeFlag) {
            setClearRefDocumentNumberAndFiscalYear(boItem, user);
            try {
              Logger.getInstance().logDebug("  >>>> Update Surcharge Invoice ");
              Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedDocumentNumber() =[" + boItem.getClearedRefDocumentNumber() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedRefFiscalYear() =[" + boItem.getClearedRefFiscalYear() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice bo.getIdentification() =[" + boItem.getIdentification() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getOfficeCode() =[" + boItem.getOfficeCode() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice bo.getRunDate() =[" + boItem.getRunDate() + "]");
              surchargeInvoice = surchargeInvoiceHome.findByDocumentNumber(boItem.getOfficeCode(), boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber());
              surchargeInvoice.setSurchargeCount(new Integer(boItem.getSurchargeCount().intValue() + 1));
              surchargeInvoice.setLastSurchargeDate(bo.getDocumentDate());
              surchargeInvoice.setLastSurchargeDueDate(bo.getDocumentDueDate());
              surchargeInvoice.setLastUpdateBy(user.getId());
              surchargeInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
              //Chee Seng 6th July 2005, bugId: 11719
              ACRAuditTrail.updateLogAuditTrail(surchargeInvoice, user);
            }
            catch (AFMSException ex) {
              sessionContext.setRollbackOnly();
              throw ex;
            }
            catch (javax.ejb.FinderException ex) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.SURCHARGE_INVOICE});
            }
            catch (java.rmi.RemoteException ex) {
              sessionContext.setRollbackOnly();
              throw new javax.ejb.EJBException(ex.toString());
            }

          }
        }
        //Hui Mian 11/10/2006 bugId:18522
        else if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.DEBTOR_DEBIT_NOTES.equals(boItem.getInvoiceDocumentType())) {
          //Hui Mian 08/11/2006, bugId:18891
//					Update DebitCreditMemo
          setClearRefDocumentNumberAndFiscalYear(boItem, user);
          try {
            //debtorDebitCreditMemo = debtorDebitCreditMemoHome.findByPrimaryKey(new DebtorDebitCreditMemoPK(boItem.getOfficeCode(), boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber()));
						debtorDebitCreditMemo = debtorDebitCreditMemoHome.findByFiscalYearDocumentNumber(boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber());
            debtorDebitCreditMemo.setSurchargeCount(new Integer(boItem.getSurchargeCount().intValue() + 1));
            debtorDebitCreditMemo.setLastSurchargeDate(bo.getDocumentDate());
            debtorDebitCreditMemo.setLastSurchargeDueDate(bo.getDocumentDueDate());
            debtorDebitCreditMemo.setLastUpdateBy(user.getId());
            debtorDebitCreditMemo.setLastUpdateOn(AFMSUtilities.getCurrentTime());
            ACRAuditTrail.updateLogAuditTrail(debtorDebitCreditMemo, user);
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.DEBTOR_DEBIT_NOTE});
          }
          catch (AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw ex;
          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }

        boItem.setGLAccount(glAccount.getGlAccount());
        boItem.setOfficeCode(bo.getOfficeCode());
        //boItem.setClearedRefDocumentNumber( boItem.getDocumentNumber()); // original document number
        boItem.setDocumentNumber(bo.getDocumentNumber());
        // new document number
        boItem.setFiscalYear(bo.getFiscalYear());
        boItem.setAccountType(bo.getAccountType());
        boItem.setDocumentType(bo.getDocumentType());
        //boItem.setDocumentDate(bo.getDocumentDate());
        Logger.getInstance().logDebug("boItem.getLastSurchargeDate() = " + boItem.getLastSurchargeDate());
        Logger.getInstance().logDebug("boItem.getLastSurchargeDueDate() = " + boItem.getLastSurchargeDueDate());
        Logger.getInstance().logDebug("boItem.getPostingDate() = " + boItem.getPostingDate());
        Logger.getInstance().logDebug("boItem.getDocumentDate() = " + boItem.getDocumentDate());
        boItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
        boItem.setDebitCreditType(IConstants.DebitCreditType.CREDIT);

        //bo.setDocumentDueDate(boItem.getLastSurchargeDueDate());
        //boItem.setPostingDate(bo.getPostingDate());
        boItem.setPostingPeriod(bo.getPostingPeriod());
        boItem.setProcessStatus(ProcessStatus.PARK);
        boItem.setCurrency(bo.getCurrency());
        boItem.setExchangeRate(bo.getExchangeRate());
        boItem.setHeaderIndicator(Boolean.FALSE);
        glAccountItemList.add(boItem);

      }
      //end for loop
      Logger.getInstance().logDebug("  >>>> END Sub LOOP");

      //Debtor Acc start
      ICustomer debtorDetail = new DebtorAccountValue();
      Logger.getInstance().logDebug("Querying Debtor Account ");
      try {
        debtorDetail = retrieveDebtorAccount(bo.getOfficeCode(), debtorCode, user);
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }

      bo.setSubledgerAccount(debtorDetail.getAccountNumber());
      bo.setSubledgerName(debtorDetail.getDebtorName());
      bo.setTin(debtorDetail.getTaxIdentificationNumber());
      //tml 15 May 2006, BugId: 16902
      bo.setSubledgerOfficeCode(debtorDetail.getOfficeCode());

      //Debtor Acc End

      //Recon Start
      List glAccountFromDebtorAccount = new ArrayList();
      //com.portrade.ipms.afms.IDebtorReconAccount boGlAccount = new DebtorReconAccountValue();
      Logger.getInstance().logDebug("Querying Recon Header ");
      Logger.getInstance().logDebug("bo.getReconAccountType() = " + bo.getReconAccountType());
      Logger.getInstance().logDebug("debtorCode = " + debtorCode);
      Logger.getInstance().logDebug("bo.getSubledgerOfficeCode() = " + bo.getSubledgerOfficeCode());
      try {
        //tml 19 June 2006, BugId: 17213
        if (multipleReconAccountFlag) {
          com.portrade.ipms.afms.IDebtorReconAccount boGlAccount = new DebtorReconAccountValue();
          //tml 04 July 2006, BugId: 17433
          boGlAccount = arSetup.retrieveDebtorReconAccountByAccountType(bo.getSubledgerOfficeCode(), debtorCode, bo.getReconAccountType(), user);
          bo.setGLAccount(boGlAccount.getReconciliationGLAccount());
          /*
			AbstractCriteria[] filterGlAccount = {
					new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_ACCOUNT_TYPE, "=", bo.getReconAccountType()),
					new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_ACCOUNT_NUMBER, "=", debtorCode),
					new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_OFFICE_CODE, "=", bo.getOfficeCode())
					};
			glAccountFromDebtorAccount = DAOProxy.list("DebtorReconAccount", user, filterGlAccount);
			if (glAccountFromDebtorAccount.size() > 0) {
				boGlAccount = (IDebtorReconAccount) glAccountFromDebtorAccount.get(0);
				bo.setGLAccount(boGlAccount.getReconciliationGLAccount());
			}
			else {
				sessionContext.setRollbackOnly();
				throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.GL_ACCOUNT});
			}
			*/
        }
        else {
          com.portrade.ipms.afms.ICustomer boGlAccount = new DebtorAccountValue();

          AbstractCriteria[] filterGlAccount = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_ACCOUNTNUMBER, "=", debtorCode),
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode())
              };
          glAccountFromDebtorAccount = DAOProxy.list("DebtorAccount", user, filterGlAccount);
          if (glAccountFromDebtorAccount.size() > 0) {
            boGlAccount = (ICustomer) glAccountFromDebtorAccount.get(0);
            bo.setGLAccount(boGlAccount.getReconAccountId());
          }
          else {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.GL_ACCOUNT});
          }
        }
      }
      catch (java.sql.SQLException ex) {
        sessionContext.setRollbackOnly();
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.GL_ACCOUNT});
				}
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      //Recon end

      bo.setAmount(accumulatedAmount);
      bo.setAmountInLocalCurrency(accumulatedAmountInLocalCurrency);
      bo.setCreatedOn(AFMSUtilities.getCurrentTime());
      glAccountItemList.add(0, bo);

      Logger.getInstance().logDebug("Run commonFunction.postDocument ");
      try {
        commonFunction.postDocument(glAccountItemList, user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
    }

    try {
      Logger.getInstance().logDebug(" Start to createSurchargeInvoice && createSurchargeInvoiceItem ");

      for (int i = 0; i < surchargeInvoiceList.size(); i++) {
        bo = (ISurchargeInvoice) surchargeInvoiceList.get(i);
        createSurchargeInvoice(bo, user);
        createSurchargeInvoiceItem(bo.getItems(), bo.getDocumentNumber(), bo.getIdentification(),
            bo.getRunDate(), user);

      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    return surchargeInvoiceList;
  }



  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {8F23EE80-30C8-423A-AF6A-0FCD28DE7BB7}
   */
  public void createSurchargeInvoice(com.portrade.ipms.afms.ISurchargeInvoice bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    SurchargeInvoice surchargeInvoice = null;
    java.util.Calendar calendar = com.portrade.ipms.afms.util.AFMSUtilities.getCalendar();
    java.util.ArrayList invoiceList = new java.util.ArrayList();
    Invoice invoice = null;
    String invoiceNumber = null;
    String documentType = null;
    String invoicePrefix = null;
    ResourceBundle rb = null;
    String invoiceType = null;

    setSurchargeInvoiceValue(bo, user);

    validateCreateSurchargeInvoice(bo, user);
    validateSurchargeInvoice(bo, user);
    Logger.getInstance().logDebug("" + bo.getDocumentNumber());
    Logger.getInstance().logDebug("" + bo.getFiscalYear());
    Logger.getInstance().logDebug("" + bo.getIdentification());
    Logger.getInstance().logDebug("" + bo.getOfficeCode());
    Logger.getInstance().logDebug("" + bo.getRunDate());
    Logger.getInstance().logDebug("" + bo.getDocumentDueDate());
    Logger.getInstance().logDebug("" + user.getId());
    Logger.getInstance().logDebug("" + bo.getAsOfDueDate());
    Logger.getInstance().logDebug("" + bo.getInvoiceNumber());
    Logger.getInstance().logDebug("" + bo.getInvoiceType());
    Logger.getInstance().logDebug("" + bo.getPaymentTerm());
    Logger.getInstance().logDebug("" + bo.getSurchargeCount());
    Logger.getInstance().logDebug("" + bo.getLastSurchargeDate());
    Logger.getInstance().logDebug("" + bo.getLastSurchargeDueDate());
    Logger.getInstance().logDebug("" + bo.getProtestStatus());
		Logger.getInstance().logDebug("" + bo.getDocumentDate());

		Calendar surchargeCalendar = Calendar.getInstance();
	
		// set Date portion to November 15, 2009
		surchargeCalendar.set(Calendar.YEAR, 2009);
		surchargeCalendar.set(Calendar.MONTH, Calendar.NOVEMBER);
		surchargeCalendar.set(Calendar.DATE, 15);
	
		// normalize the object
		surchargeCalendar.set(Calendar.HOUR_OF_DAY, 0);
		surchargeCalendar.set(Calendar.MINUTE, 0);
		surchargeCalendar.set(Calendar.SECOND, 0);
		surchargeCalendar.set(Calendar.MILLISECOND, 0);
	
		java.sql.Date surchargeCutDate = new java.sql.Date(surchargeCalendar.getTime().getTime());
	      
		Logger.getInstance().logDebug("surchargeCutDate == " + surchargeCutDate);
				
    try {
      surchargeInvoice = surchargeInvoiceHome.create(
          new SurchargeInvoicePK(bo.getDocumentNumber(), bo.getFiscalYear(),
          bo.getOfficeCode(), bo.getRunDate()), user.getCurrentSiteCode(),
          user.getId(), AFMSUtilities.getCurrentTime(), bo.getDocumentDueDate(),
          bo.getAsOfDueDate(), bo.getInvoiceNumber(), bo.getInvoiceType(), bo.getPaymentTerm(),
          bo.getSurchargeCount(), bo.getLastSurchargeDate(),
          bo.getLastSurchargeDueDate(), bo.getProtestStatus(), bo.getIdentification());
      //Chee Seng 6th July 2005, bugId: 11719
      //ACRAuditTrail.insertLogAuditTrail(surchargeInvoice, user);
      
      //Hui Mian 13/08/2009, bugId: 27813 Auto suspend NON-LNG debtor if have surcharge
		  DebtorAccount debtor = debtorAccountHome.findByPrimaryKey(new DebtorAccountPK(bo.getSubledgerAccount(), bo.getSubledgerOfficeCode()));
			if (debtor.getAgeingCode().equals("2") && bo.getDocumentDate().after(surchargeCutDate)) {
				debtor.setAccountStatus(IConstants.AccStatus.SUSPENDED);
				debtor.setLastUpdateBy(user.getId());
				debtor.setLastUpdateOn(AFMSUtilities.getCurrentTime());
			}
      
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{SurchargeInvoiceLabelId.SURCHARGE_INVOICE});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{SurchargeInvoiceLabelId.SURCHARGE_INVOICE});
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
		catch (javax.ejb.FinderException ex) {
		  throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
		}
  }


  /**
   * Description of the Method
   *
   * @param glItemList Description of the Parameter
   * @param aDocumentNumber Description of the Parameter
   * @param anIdentification Description of the Parameter
   * @param rundate Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {F4A30CE3-895A-4AA2-82ED-78F2171C3335}
   */
  public void createSurchargeInvoiceItem(java.util.List glItemList, Long aDocumentNumber, String anIdentification,
      java.sql.Date rundate, com.portrade.ipms.icms.IUser user) throws AFMSException {
    SurchargeInvoiceItem surchargeInvoiceItem = null;
    BigDecimal clearedAmount = null;
    //Integer surchargeCount = null;

    Iterator boItemList = glItemList.iterator();
    int i = 1;
    while (boItemList.hasNext()) {

      ISurchargeInvoiceItem boItem = (ISurchargeInvoiceItem) boItemList.next();

      if (boItem.getInvoiceClearedAmount() != null && !boItem.getInvoiceClearedAmount().equals("")) {
        clearedAmount = boItem.getInvoiceClearedAmount().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION);
      }
      else {
        clearedAmount = null;
      }

      //surchargeCount = new Integer(boItem.getSurchargeCount().intValue() + 1);

      validateCreateSurchargeInvoiceItem(boItem, user);
      validateSurchargeInvoiceItem(boItem, user);

      Logger.getInstance().logDebug("*********************");
      Logger.getInstance().logDebug("" + boItem.getPreviousSurchargeDate());

      Logger.getInstance().logDebug("*********************");
      Logger.getInstance().logDebug("");
      Logger.getInstance().logDebug("*********************");

      Logger.getInstance().logDebug("" + boItem.getPreviousSurchargeDueDate());
      Logger.getInstance().logDebug("*********************");

      Logger.getInstance().logDebug("*********************");
      Logger.getInstance().logDebug("" + boItem.getLastSurchargeDate());

      Logger.getInstance().logDebug("*********************");
      Logger.getInstance().logDebug("");
      Logger.getInstance().logDebug("*********************");

      Logger.getInstance().logDebug("" + boItem.getLastSurchargeDueDate());
      Logger.getInstance().logDebug("*********************");

      try {
        surchargeInvoiceItem = surchargeInvoiceItemHome.create(new SurchargeInvoiceItemPK(aDocumentNumber,
            boItem.getFiscalYear(), new Integer(i), boItem.getOfficeCode(),
            rundate), user.getCurrentSiteCode(),
            user.getId(), AFMSUtilities.getCurrentTime(), boItem.getPercentage(),
            boItem.getInvoiceNumber(), boItem.getPreviousSurchargeDate(),
            boItem.getPreviousSurchargeDueDate(), boItem.getLastSurchargeDate(),
            boItem.getLastSurchargeDueDate(), boItem.getSurchargeCount(), boItem.getNoOfDaysOverDue(),
            boItem.getInvoiceDocumentDueDate(),
            boItem.getInvoiceAmount().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION),
            clearedAmount, boItem.getSurchargeCode(), boItem.getDebtorCode(), anIdentification);
        //Chee Seng 6th July 2005, bugId: 11719
        ACRAuditTrail.insertLogAuditTrail(surchargeInvoiceItem, user);
      }
      catch (javax.ejb.DuplicateKeyException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{SurchargeInvoiceItemLabelId.SURCHARGE_INVOICE_ITEM});
      }
      catch (javax.ejb.CreateException ex) {
        sessionContext.setRollbackOnly();
        throw new CannotCreateRecordException(new Object[]{SurchargeInvoiceItemLabelId.SURCHARGE_INVOICE_ITEM});
      }
      catch (java.rmi.RemoteException ex) {
        throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
      }
      i++;
    }
  }


  /**
   * Description of the Method
   *
   * @param documentNumber Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param itemNumber Description of the Parameter
   * @param officeCode Description of the Parameter
   * @param identification Description of the Parameter
   * @param runDate Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {A47D7473-545A-4672-BD2F-D1C7E382DF44}
   */
  public com.portrade.ipms.afms.ISurchargeInvoice retrieveSurchargeInvoice(Long documentNumber, Integer fiscalYear, Integer itemNumber, String officeCode, String identification, java.sql.Date runDate, com.portrade.ipms.icms.IUser user) throws AFMSException {
    com.portrade.ipms.afms.ISurchargeInvoice bo = new SurchargeInvoiceValue();

    try {
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_IDENTIFICATION, "=", identification),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_RUNDATE, "=", runDate)
          };
      java.util.List results = DAOProxy.list("surchargeInvoice", user, filter);

      Logger.getInstance().logDebug(" Querying Surcharge Invoice - After Triggered");
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
      }
      bo = (ISurchargeInvoice) results.get(0);
    }
    catch (SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
			}
    }

    try {
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceItemDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceItemDAO.FILTER_IDENTIFICATION, "=", identification),
          new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceItemDAO.FILTER_RUNDATE, "=", runDate)
          };
      OrderBy[] orderBy = {new OrderBy(SurchargeInvoiceItemDAO.FILTER_ITEMNUMBER)};
      java.util.List items = DAOProxy.list("surchargeInvoiceItem", officeCode, user, filter, orderBy);

      Logger.getInstance().logDebug(" Querying surchargeInvoiceItem - After Triggered");
      if (items.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
      }
      Iterator iterator = items.iterator();
      while (iterator.hasNext()) {
        ISurchargeInvoiceItem surchargeInvoiceItem = (ISurchargeInvoiceItem) iterator.next();
        bo.addItem(surchargeInvoiceItem);
      }
    }
    catch (SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
			}
    }
    return bo;
  }


  /*
  public java.math.BigDecimal retrieveSurchargeTypeInterest(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.math.BigDecimal overDueAmount, IUser user) throws AFMSException {
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      Collection items = surchargeTypeRateHome.findBySurchargeType(surcharge.getOfficeCode(), surcharge.getCode());
      Iterator iterator = items.iterator();
      BigDecimal result = new BigDecimal(0);
      while (iterator.hasNext()) {
        SurchargeTypeRate item = (SurchargeTypeRate) iterator.next();
        ISurchargeTypeRate surchargeTypeRate = new SurchargeTypeRateValue();
        surchargeTypeRate.setInterestEffectiveDate(item.getInterestEffectiveDate());
        if (surchargeTypeRate.getInterestEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          surchargeTypeRate.setInterestRate(item.getInterestRate());
        }
        if (items.size() == 1) {
          java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
          BigDecimal calculate = new BigDecimal(0);
          BigDecimal percentage = new BigDecimal(100);
          Long numDay = new Long(0);
          calculate = surchargeTypeRate.getInterestRate().divide(percentage, BigDecimal.ROUND_UP);
          calculate = calculate.multiply(overDueAmount);
          numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
          BigDecimal days = new BigDecimal(numDay.toString());
          result = calculate.multiply(days);
          return result;
        }
        else if (items.size() > 1) {
          if (invoiceDate.after(surchargeTypeRate.getInterestEffectiveDate())) {
            BigDecimal aRate = new BigDecimal(0);
            aRate = surchargeTypeRate.getInterestRate();
          }
          else {
            break;
          }
        }
        else {
          return null;
        }
      }
      return result;
    }
    catch (javax.ejb.FinderException fx) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{LoanRevaluationLabelId.OFFICECODE_AND_LOANNUMBER_AND_DOCUMENTNUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }
  */
  /** Description of the Method  */
  /*
  public java.math.BigDecimal retrieveSurchargeTypePenalty(com.portrade.ipms.afms.ISurchargeType surcharge, java.sql.Date invoiceDate, java.math.BigDecimal overDueAmount, IUser user) throws AFMSException {
    com.portrade.ipms.afms.ISurchargeTypeRate bo = new com.portrade.ipms.afms.bo.SurchargeTypeRateValue();
    if (AFMSUtilities.getCurrentDate().before(invoiceDate)) {
      return null;
    }
    try {
      Collection items = surchargeTypeRateHome.findBySurchargeType(surcharge.getOfficeCode(), surcharge.getCode());
      Iterator iterator = items.iterator();
      BigDecimal result = new BigDecimal(0);
      while (iterator.hasNext()) {
        SurchargeTypeRate item = (SurchargeTypeRate) iterator.next();
        ISurchargeTypeRate surchargeTypeRate = new SurchargeTypeRateValue();
        surchargeTypeRate.setPenaltyEffectiveDate(item.getPenaltyEffectiveDate());
        if (surchargeTypeRate.getPenaltyEffectiveDate().before(AFMSUtilities.getCurrentDate())) {
          surchargeTypeRate.setPenaltyRate(item.getPenaltyRate());
        }
        if (items.size() == 1) {
          java.util.Calendar calendarDate = AFMSUtilities.getCalendar(AFMSUtilities.getCurrentDate());
          BigDecimal calculate = new BigDecimal(0);
          BigDecimal percentage = new BigDecimal(100);
          Long numDay = new Long(0);
          calculate = surchargeTypeRate.getPenaltyRate().divide(percentage, BigDecimal.ROUND_UP);
          calculate = calculate.multiply(overDueAmount);
          numDay = (new Long((calendarDate.getTime().getTime() - invoiceDate.getTime()) / 86400000));
          BigDecimal days = new BigDecimal(numDay.toString());
          result = calculate.multiply(days);
          return result;
        }
        else if (items.size() > 1) {
          if (invoiceDate.after(surchargeTypeRate.getPenaltyEffectiveDate())) {
            BigDecimal aRate = new BigDecimal(0);
            aRate = surchargeTypeRate.getPenaltyRate();
          }
          else {
            break;
          }
        }
        else {
          return null;
        }
      }
      return result;
    }
    catch (javax.ejb.FinderException fx) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{LoanRevaluationLabelId.OFFICECODE_AND_LOANNUMBER_AND_DOCUMENTNUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }
*/
  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {24C336B6-B261-40CD-AF84-0BA1B08291B4}
   */
  public com.portrade.ipms.afms.ICustomer createDebtorAccount(com.portrade.ipms.afms.ICustomer bo, IUser user) throws AFMSException {
    DebtorAccount debtorAccount = null;
    AccountReceivableSetup ars = null;
    try {

      ars = accountReceivableSetupHome.create();

      validateCreateDebtorAccount(bo, user);
      validateDebtorAccount(bo, user);

      Long nextAccountNumber = null;
      Boolean accountNumberAllocation = null;
      String accGroup = null;
      String accountType = IConstants.PostingAccountType.DEBTOR;

      if (Boolean.TRUE.equals(bo.getAccountNumberAllocation())) {
        //Chee Seng 12th Aug 2004, bugId: 6948
        /*
        DebtorAccountGroup debtorGroup = null;
        try {
          debtorGroup = debtorAccountGroupHome.findByPrimaryKey(new DebtorAccountGroupPK(ICMSConnector.IGNORE, String.valueOf(bo.getAccountGroup())));
        }
        catch (javax.ejb.FinderException ex) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountGroupLabelId.CODE});
        }
        catch (java.rmi.RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }
        */
        IDebtorAccountGroup debtorGroup = ars.retrieveDebtorAccountGroup(ICMSConnector.IGNORE, bo.getAccountGroup(), user);

        try {
          DebtorNumberRange debtorNumberRange = debtorNumberRangeHome.findByPrimaryKey(new DebtorNumberRangePK(ICMSConnector.IGNORE, debtorGroup.getDebtorNumberRangeCode(), accountType));
          nextAccountNumber = debtorNumberRange.getNextValue();
          debtorNumberRange.setLastUpdateBy(user.getId());
          debtorNumberRange.setLastUpdateOn(AFMSUtilities.getCurrentTime());

          accGroup = nextAccountNumber.toString();
        }
        catch (javax.ejb.FinderException ex) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorNumberRangeLabelId.CODE});
        }
        catch (java.rmi.RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }
        //bo.setAccountNumber(new Integer(nextAccountNumber.intValue()));
        //bugId:11494 karen 16 June 2005
        if (bo.getDebtorCodePrefix() != null && bo.getDebtorCodePrefix().booleanValue()) {
          String firstChar = String.valueOf(bo.getDebtorName().charAt(0)).toUpperCase();
          Logger.getInstance().logDebug("firstChar=" + firstChar);

          bo.setAccountNumber(firstChar.concat(accGroup));
        }
        else {
          bo.setAccountNumber(accGroup);
        }

      }

	  //Create Debtor Account
	  debtorAccount = debtorAccountHome.create(new DebtorAccountPK(bo.getAccountNumber(), bo.getOfficeCode()), GenUUIDUtil.generateUUID(),
		  bo.getDebtorCategory(), bo.getCompanyRegistrationNumber(), bo.getTaxIdentificationNumber(), bo.getGSTRegistrationNo(), bo.getGSTVerifiedDate(), bo.getEmployeeNumber(),
		  bo.getDebtorName(), bo.getAccountGroup(), bo.getDebtorType(), bo.getShortName(), bo.getAccountCategory(),
		  bo.getSurchargeCode(), bo.getPaymentTermType(), bo.getAccountRegistrationDate(), bo.getLastSuspendDate(),
		  bo.getAccountStatus(), bo.isPortUserGuarantee(), bo.getRemarks(), bo.getReconAccountId(), bo.getFirstGuaranteeExpiryDate(),
		  bo.getGuaranteeTotalAmount(), bo.getBillingAddressLine1(), bo.getBillingAddressLine2(), bo.getBillingAddressCity(),
		  bo.getBillingAddressPostCode(), bo.getBillingAddressState(), bo.getBillingAddressCountry(), bo.getShippingAddressLine1(),
		  bo.getShippingAddressLine2(), bo.getShippingAddressCity(), bo.getShippingAddressPostCode(), bo.getShippingAddressState(),
		  bo.getShippingAddressCountry(), bo.getContactName(), bo.getContactPosition(), bo.getCostCenterId(), bo.getContactTelephone1(), bo.getContactTelephone2(), bo.getContactFax(),
		  bo.getContactEmail(), bo.isElectronicBillPresentment(), bo.getTaxCode(), bo.getCurrencyType(),
		  user.getCurrentSiteCode(), new Boolean(false), bo.getForiegnCurrencyInvoiceIndicator(), bo.getDiscountAllow(), bo.getDiscountRate(), bo.getDaysForSuspension(), bo.getAgeingCode(), user.getId(), AFMSUtilities.getCurrentTime());

			ACRAuditTrail.insertLogAuditTrail(debtorAccount, user);

      if (bo.isElectronicBillPresentment().booleanValue()) {
        ICMSConnector.sendXMLMsgToSoap(user.getIcmsSession(), bo, "insert");
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{DebtorAccountLabelId.DEBTOR_ACCOUNT});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }



  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {648EEFE8-431E-4B67-BF7A-4CBCA585D3BC}
   */
  public IDebtorPayment createDebtorPaymentForPOMS(com.portrade.ipms.afms.IDebtorPayment bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    GeneralLedgerManager generalLedgerManager = null;
    DebtorPayment debtorPayment = null;
    List gLAccountItemList = new ArrayList();
    IAbstractGLAccountItem dGLAccountItem = null;

    try {
      commonFunction = commonFunctionHome.create();
      setDebtorPaymentValue(bo, user);
      validateCreateDebtorPayment(bo, user);
      validateDebtorPayment(bo, user);

      debtorPayment = debtorPaymentHome.create(new DebtorPaymentPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getOrNumber(), user.getCurrentSiteCode(), bo.getPaymentType(), bo.getChequeDate(), bo.getChequePlace(), user.getId(), AFMSUtilities.getCurrentTime());

      IDebtorPaymentGLAccountItem gLAccountItemHeader = new DebtorPaymentGLAccountItemValue();

      gLAccountItemHeader.setOfficeCode(bo.getOfficeCode());
      gLAccountItemHeader.setFiscalYear(bo.getFiscalYear());
      gLAccountItemHeader.setDocumentNumber(bo.getDocumentNumber());
      gLAccountItemHeader.setDocumentType(bo.getDocumentType());
      gLAccountItemHeader.setDocumentDate(bo.getDocumentDate());
      gLAccountItemHeader.setPostingKey(bo.getPostingKey());
      gLAccountItemHeader.setPostingPeriod(bo.getPostingPeriod());
      gLAccountItemHeader.setPostingDate(bo.getPostingDate());
      gLAccountItemHeader.setReference(bo.getReference());
      gLAccountItemHeader.setReferenceType(bo.getReferenceType());
      gLAccountItemHeader.setProcessStatus(bo.getProcessStatus());
      gLAccountItemHeader.setCurrency(bo.getCurrency());
      gLAccountItemHeader.setExchangeRate(bo.getExchangeRate());
      gLAccountItemHeader.setHeaderIndicator(new Boolean(true));
      gLAccountItemHeader.setCostCenterId(bo.getCostCenterId());
      gLAccountItemHeader.setGLAccount(bo.getCollectionAccount());
      gLAccountItemHeader.setDebitCreditType(bo.getDebitCreditType());
      gLAccountItemHeader.setAmount(bo.getAmount());
      gLAccountItemHeader.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
      gLAccountItemHeader.setAssignment(bo.getAssignment());
      gLAccountItemHeader.setRemark(bo.getRemark());
      gLAccountItemHeader.setReversedRefDocumentNumber(bo.getReversedRefDocumentNumber());
      gLAccountItemHeader.setReversalDocumentIndicator(bo.isReversalDocumentIndicator());
      gLAccountItemHeader.setSpecialGLIndicator(bo.getSpecialGLIndicator());
      gLAccountItemHeader.setChequeNumber(bo.getChequeNumber());
      gLAccountItemHeader.setExternalSystemType(bo.getExternalSystemType());
      gLAccountItemHeader.setCid(bo.getCid());

      if (bo.getVat() != null && !bo.getVat().equals("") && bo.getVat().equals(IConstants.Prefix.RV)) {
        gLAccountItemHeader.setTaxIndicator(new Boolean(true));
      }

      gLAccountItemList.add(gLAccountItemHeader);

      for (int i = 0; i < bo.getItems().size(); i++) {
        IDebtorPaymentItem item = (IDebtorPaymentItem) bo.getItems().get(i);
        IAbstractGLAccountItem cGLAccountItem = null;

        if (item.getApplyIndicator() != null && !item.getApplyIndicator().equals("") && item.getApplyIndicator().booleanValue() == true) {
          try {
            List cGLAccountItemList = commonFunction.retrieveGLAccountItemByItemNumber(item.getTransactionOfficeCode(), item.getTransactionFiscalYear(), item.getTransactionDocumentNumber(), new Integer(0), user);

            if (cGLAccountItemList.size() > 0) {
              cGLAccountItem = (IAbstractGLAccountItem) cGLAccountItemList.get(0);
            }
          }
          catch (RecordNotFoundException x) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.CODE});
          }
          catch (RemoteException x) {
            throw new javax.ejb.EJBException(x.toString());
          }
        }

        try {
          DebtorPaymentItem debtorPaymentItem = debtorPaymentItemHome.create(new DebtorPaymentItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), item.getItemNo()), item.getTransactionOfficeCode(), item.getTransactionFiscalYear(), item.getTransactionDocumentNumber(), item.getTransactionNumber(), item.getTransactionItemNo(), item.getTransactionGLAccount(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        }
        catch (javax.ejb.DuplicateKeyException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorPaymentItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
        }
        catch (javax.ejb.CreateException ex) {
          sessionContext.setRollbackOnly();
          throw new CannotCreateRecordException(new Object[]{DebtorPaymentItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
        }
        catch (java.rmi.RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }

        IDebtorPaymentGLAccountItem gLAccountItem = new DebtorPaymentGLAccountItemValue();

        gLAccountItem = new DebtorPaymentGLAccountItemValue();
        gLAccountItem.setOfficeCode(bo.getOfficeCode());
        gLAccountItem.setFiscalYear(bo.getFiscalYear());
        gLAccountItem.setDocumentNumber(bo.getDocumentNumber());
        gLAccountItem.setItemNo(item.getItemNo());
        gLAccountItem.setAccountType(item.getAccountType());
        gLAccountItem.setDocumentType(bo.getDocumentType());
        gLAccountItem.setDocumentDate(bo.getDocumentDate());
        gLAccountItem.setPostingKey(item.getPostingKey());
        gLAccountItem.setPostingPeriod(bo.getPostingPeriod());
        gLAccountItem.setPostingDate(bo.getPostingDate());
        gLAccountItem.setReference(bo.getReference());
        gLAccountItem.setReferenceType(bo.getReferenceType());
        gLAccountItem.setProcessStatus(bo.getProcessStatus());
        gLAccountItem.setCurrency(bo.getCurrency());
        gLAccountItem.setExchangeRate(bo.getExchangeRate());
        gLAccountItem.setHeaderIndicator(new Boolean(false));
        gLAccountItem.setCostCenterId(item.getCostCenterId());
        gLAccountItem.setSubledgerAccount(item.getSubledgerAccount());
        gLAccountItem.setGLAccount(item.getGLAccount());
        gLAccountItem.setDebitCreditType(item.getDebitCreditType());
        gLAccountItem.setAmount(item.getAmount());
        gLAccountItem.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
        gLAccountItem.setAssignment(item.getAssignment());
        gLAccountItem.setRemark(item.getRemark());

        if (item.getApplyIndicator() != null && !item.getApplyIndicator().equals("") && item.getApplyIndicator().booleanValue() == true) {
          gLAccountItem.setClearedAmount(item.getAmount());
          gLAccountItem.setClearedRefDocumentNumber(item.getTransactionDocumentNumber());
          gLAccountItem.setClearingDocumentIndicator(new Boolean(true));
          gLAccountItem.setClearedRefFiscalYear(item.getTransactionFiscalYear());

          try {
            GLAccountItem aGLAccountItem = gLAccountItemHome.findByPrimaryKey(cGLAccountItem.getId());

            if (aGLAccountItem.getClearedAmount() == null || aGLAccountItem.getClearedAmount().equals("")) {
              aGLAccountItem.setClearedAmount(item.getAmount());
            }
            else {
              aGLAccountItem.setClearedAmount(aGLAccountItem.getClearedAmount().add(item.getAmount()));
            }

            if (aGLAccountItem.getClearedAmount() != null && !aGLAccountItem.getClearedAmount().equals("")) {
              if (aGLAccountItem.getAmount().compareTo(aGLAccountItem.getClearedAmount()) == 0) {
                aGLAccountItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
                aGLAccountItem.setClearedRefFiscalYear(item.getFiscalYear());
              }
            }

            aGLAccountItem.setLastUpdateBy(user.getId());
            aGLAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
          }
          catch (java.rmi.RemoteException ex) {
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
        else {
          //Jason 08th Sept 2003 - Set ClearedAmount to zero when the item is for revolving fund.
          gLAccountItem.setClearedAmount(new BigDecimal(0));
        }

        gLAccountItem.setSpecialGLIndicator(item.getSpecialGLIndicator());
        gLAccountItem.setSubledgerName(item.getSubledgerName());
        gLAccountItem.setTin(item.getTin());
        //tml 15 May 2006, BugId: 16902
        gLAccountItem.setSubledgerOfficeCode(item.getSubledgerOfficeCode());
        gLAccountItem.setExternalSystemType(bo.getExternalSystemType());
        gLAccountItem.setCid(item.getCid());
        gLAccountItem.setChequeNumber(bo.getChequeNumber());

        gLAccountItemList.add(gLAccountItem);
      }

      try {
        commonFunction.postDocument(gLAccountItemList, bo.getBudgetActionType(), user);
      }
      catch (AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {468EF50A-6762-48AA-93AC-75007256D2FD}
   */
  public IDebtorPayment createDebtorPayment(com.portrade.ipms.afms.IDebtorPayment bo, com.portrade.ipms.icms.IUser user) throws AFMSException {

    CashManager cashManager = null;
    CommonFunction commonFunction = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    DebtorPayment debtorPayment = null;
    DebtorPaymentItem debtorPaymentItem = null;
    List gLAccountItemList = new ArrayList();
    List resultGLAccountItemList = new ArrayList();
    IOffice office = null;
    //Integer itemNumber = new Integer(bo.getItems().size());
    int itemNumber = bo.getItems().size();
    IDebtorPaymentItem debtorPaymentItemBO = null;
    String reconAccountType = null;
    boolean createJournalFlag = false;
    BigDecimal bankChargesAmount = new BigDecimal(0);
    boolean surchargeIndicator = false;
	BigDecimal provAmount = new BigDecimal(0.00);

    
    try {
      cashManager = cashManagerHome.create();
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
		//Hui Mian 09/11/2012 BPSB-2501 Include 
		List revenueList = new ArrayList();
		revenueList.addAll(bo.getItems());
		try{
			if (bo.getFiscalYear() == null) {
				bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
			}
			if (bo.getPostingPeriod() == null) {
				bo.setPostingPeriod(commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user));
			}
			Logger.getInstance().logDebug("bo.getFiscalYear === " + bo.getFiscalYear());
			Logger.getInstance().logDebug("bo.getPostingPeriod === " + bo.getPostingPeriod());
		  commonFunction.insertToRevenueTbl(bo.getDocumentType(), bo.getFiscalYear(),
		  bo.getPostingPeriod(), null,revenueList, user); 
	  	Logger.getInstance().logDebug("after insertToRevenueTbl");
		}
		catch (java.rmi.RemoteException ex) {
		  throw new javax.ejb.EJBException(ex.toString());
		}    
	

    //Get and validate the recon account type for credit line item
    for (int i = 0; i < bo.getItems().size(); i++) {
      debtorPaymentItemBO = (IDebtorPaymentItem) bo.getItems().get(i);
      Logger.getInstance().logDebug("debtorPaymentItemBO.getDebitCreditType() " + debtorPaymentItemBO.getDebitCreditType());
      Logger.getInstance().logDebug("debtorPaymentItemBO.getDocumentType() " + debtorPaymentItemBO.getDocumentType());
      Logger.getInstance().logDebug("debtorPaymentItemBO.getSpecialGLIndicator() " + debtorPaymentItemBO.getSpecialGLIndicator());

      //Hui Mian, 17/05/2007
      reconAccountType = null;

      if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue()) {
        if (debtorPaymentItemBO.getDocumentType() != null && TransactionDocumentType.DEBTOR_PAYMENT.equals(debtorPaymentItemBO.getDocumentType())
            && debtorPaymentItemBO.getSpecialGLIndicator() != null && (debtorPaymentItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.MISCELLANEOUS) || debtorPaymentItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.REVOLVING_FUND)
            || debtorPaymentItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.SUFFERENCE) || debtorPaymentItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.VESSEL_ACCOUNT))) {
          //if (DebitCreditType.CREDIT.equals(debtorPaymentItemBO.getDebitCreditType())) {
          if (reconAccountType == null) {
            if (debtorPaymentItemBO.getReconAccountType() != null && !debtorPaymentItemBO.getReconAccountType().equals("")) {
              reconAccountType = debtorPaymentItemBO.getReconAccountType();
            }
          }
          else {
            if (debtorPaymentItemBO.getReconAccountType() != null && !debtorPaymentItemBO.getReconAccountType().equals(reconAccountType)) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.DoNotMatchException(new Object[]{DebtorReconAccountTypeLabelId.ACCOUNT_TYPE});
            }
          }
        }
      }

    }

    try {
      setDebtorPaymentValue(bo, user);
      bo = commonFunction.calculateGainAndLoss(bo, user);
      validateCreateDebtorPayment(bo, user);
      validateDebtorPayment(bo, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    Logger.getInstance().logDebug("bo.isConversionIndicator() : " + bo.isConversionIndicator());

    IDebtorPaymentGLAccountItem gLAccountItemHeader = new DebtorPaymentGLAccountItemValue();
    gLAccountItemHeader.setOfficeCode(bo.getOfficeCode());
    gLAccountItemHeader.setFiscalYear(bo.getFiscalYear());
    gLAccountItemHeader.setDocumentNumber(bo.getDocumentNumber());
    gLAccountItemHeader.setDocumentType(bo.getDocumentType());
    gLAccountItemHeader.setDocumentDate(bo.getDocumentDate());
    gLAccountItemHeader.setPostingKey(bo.getPostingKey());
    gLAccountItemHeader.setPostingPeriod(bo.getPostingPeriod());
    gLAccountItemHeader.setPostingDate(bo.getPostingDate());
    gLAccountItemHeader.setReference(bo.getReference());
    gLAccountItemHeader.setReferenceType(bo.getReferenceType());
    gLAccountItemHeader.setProcessStatus(bo.getProcessStatus());
    gLAccountItemHeader.setCurrency(bo.getCurrency());
    gLAccountItemHeader.setExchangeRate(bo.getExchangeRate());
    gLAccountItemHeader.setHeaderIndicator(new Boolean(true));
    gLAccountItemHeader.setCostCenterId(bo.getCostCenterId());
    //gLAccountItemHeader.setSubledgerAccount(bo.getCustomerId());
    gLAccountItemHeader.setGLAccount(bo.getCollectionAccount());
    gLAccountItemHeader.setDebitCreditType(bo.getDebitCreditType());
    gLAccountItemHeader.setAmount(bo.getAmount());
    gLAccountItemHeader.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
    gLAccountItemHeader.setAssignment(bo.getAssignment());
    gLAccountItemHeader.setRemark(bo.getRemark());
    //gLAccountItemHeader.setClearedAmount(bo.getAmount());
    //gLAccountItemHeader.setClearedRefDocumentNumber(bo.getClearedRefDocumentNumber());
    //gLAccountItemHeader.setClearingDocumentIndicator(bo.getClearingDocumentIndicator());
    gLAccountItemHeader.setReversedRefDocumentNumber(bo.getReversedRefDocumentNumber());
    gLAccountItemHeader.setReversalDocumentIndicator(bo.isReversalDocumentIndicator());
    gLAccountItemHeader.setSpecialGLIndicator(bo.getSpecialGLIndicator());
    //gLAccountItemHeader.setSubledgerAccountType(PostingAccountType.DEBTOR);
    //gLAccountItemHeader.setSubledgerName(bo.getDebtorName());
    //gLAccountItemHeader.setTin(bo.getTin());
    gLAccountItemHeader.setChequeNumber(bo.getChequeNumber());
    gLAccountItemHeader.setExternalSystemType(bo.getExternalSystemType());
    gLAccountItemHeader.setCid(bo.getCid());

    //Chee Seng 27th Aug 2004, bugId: 7178
    gLAccountItemHeader.setTaxIndicator(bo.isTaxIndicator());
    /*
    if (bo.getVat() != null && !bo.getVat().equals("") && bo.getVat().equals(IConstants.Prefix.RV)) {
      gLAccountItemHeader.setTaxIndicator(new Boolean(true));
    }
    */
    //Chee Seng 10th Nov 2005, bugId: 14544
    gLAccountItemHeader.setChequeType(bo.getChequeType());
    //gerald 3 Oct 2006, bugId: 18003
    gLAccountItemHeader.setConversionIndicator(bo.isConversionIndicator());
    //karen 14 Nov 2006, BugId:18370
    gLAccountItemHeader.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());
    gLAccountItemList.add(gLAccountItemHeader);

    int i = 0;	
	
    try {
      while (i < bo.getItems().size()) {
      	Logger.getInstance().logDebug("in Item loop");
		
      	//for (int i = 0; i < bo.getItems().size(); i++) {
        IDebtorPaymentItem item = (IDebtorPaymentItem) bo.getItems().get(i);
        IDebtorPaymentGLAccountItem gLAccountItem = new DebtorPaymentGLAccountItemValue();
        

        gLAccountItem = new DebtorPaymentGLAccountItemValue();
        gLAccountItem.setOfficeCode(bo.getOfficeCode());
        gLAccountItem.setFiscalYear(bo.getFiscalYear());
        gLAccountItem.setDocumentNumber(bo.getDocumentNumber());
        gLAccountItem.setItemNo(new Integer(i + 1));
        gLAccountItem.setAccountType(item.getAccountType());
        gLAccountItem.setDocumentType(bo.getDocumentType());
        gLAccountItem.setDocumentDate(bo.getDocumentDate());
        gLAccountItem.setPostingKey(item.getPostingKey());
        gLAccountItem.setPostingPeriod(bo.getPostingPeriod());
        gLAccountItem.setPostingDate(bo.getPostingDate());
        gLAccountItem.setReference(bo.getReference());
        gLAccountItem.setReferenceType(bo.getReferenceType());
        gLAccountItem.setProcessStatus(bo.getProcessStatus());
        gLAccountItem.setCurrency(bo.getCurrency());
        gLAccountItem.setExchangeRate(bo.getExchangeRate());
        gLAccountItem.setHeaderIndicator(new Boolean(false));
        gLAccountItem.setCostCenterId(item.getCostCenterId());
        gLAccountItem.setSubledgerAccount(item.getSubledgerAccount());
		gLAccountItem.setGLAccount(item.getGLAccount());
		gLAccountItem.setDebitCreditType(item.getDebitCreditType());
		gLAccountItem.setAmount(item.getAmount());
		gLAccountItem.setAmountInLocalCurrency(item.getAmountInLocalCurrency());        
        gLAccountItem.setAssignment(item.getAssignment());
        gLAccountItem.setRemark(item.getRemark());
        gLAccountItem.setReconAccountType(item.getReconAccountType());
        gLAccountItem.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());
        Logger.getInstance().logDebug("bo.isInterOfficePostingIndicator() - " + bo.isInterOfficePostingIndicator());
        Logger.getInstance().logDebug("item.getDocumentType() - " + item.getDocumentType());
        if(item.getDocumentType() != null && item.getDocumentType().equals(TransactionDocumentType.SURCHARGE_INVOICE)){
			surchargeIndicator = true;
			provAmount = provAmount.add(item.getAmount());
        }
        

        if (item.getApplyIndicator() != null && !item.getApplyIndicator().equals("") && item.getApplyIndicator().booleanValue() == true) {
          gLAccountItem.setClearedAmount(item.getAmount());
          gLAccountItem.setClearedRefDocumentNumber(item.getTransactionDocumentNumber());
          gLAccountItem.setClearingDocumentIndicator(new Boolean(true));
          gLAccountItem.setClearedRefFiscalYear(item.getTransactionFiscalYear());

          GLAccountItem aGLAccountItem = gLAccountItemHome.findByPrimaryKey(item.getId());

          ICalculateExchangeRateAmount aCalculateExchangeRateAmount = null;
          ICalculateExchangeRateAmount bCalculateExchangeRateAmount = null;
          IOffice aOffice = null;
          IExchangeRate aExchangeRate = null;

          BigDecimal exchgRate = null;
          BigDecimal bExchgRate = null;
          BigDecimal bClearedAmount = new BigDecimal(0);
          BigDecimal clearedAmount = new BigDecimal(0);
          BigDecimal paidAmount = new BigDecimal(0);

          if (aGLAccountItem.getClearedAmount() != null && !aGLAccountItem.getClearedAmount().equals("")) {
            clearedAmount = aGLAccountItem.getClearedAmount();
          }

          if (aGLAccountItem.getAmount() != null && !aGLAccountItem.getAmount().equals("")) {
            BigDecimal differentPaidAmount = aGLAccountItem.getAmount().subtract(clearedAmount);
            aOffice = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);

            //Jason 30th July 2003 - Validation of PaidAmount
            if (aGLAccountItem.getClearedAmount() == null) {
              bClearedAmount = new BigDecimal(0);
            }
            else {
              bClearedAmount = aGLAccountItem.getClearedAmount();
            }

            if (bo.getCurrency().equals(aOffice.getCurrency()) && !aGLAccountItem.getCurrency().equals(aOffice.getCurrency())) {
              Logger.getInstance().logDebug("marker 1.1.1");
              bCalculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(new BigDecimal(1), null, null, aGLAccountItem.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
              exchgRate = bCalculateExchangeRateAmount.getExchangeRate();
              if (item.getAmount().divide(exchgRate, IConstants.ROUNDING_MODE.DIVISION).add(bClearedAmount).compareTo(aGLAccountItem.getAmount()) > 0) {
                Logger.getInstance().logDebug("marker 1.1.2");
                throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorPaymentItemLabelId.PAID_AMOUNT_AND_CLEARED_AMOUNT, DebtorPaymentItemLabelId.AMOUNT});
              }
            }
            else if (!bo.getCurrency().equals(aOffice.getCurrency()) && aGLAccountItem.getCurrency().equals(aOffice.getCurrency())) {
              Logger.getInstance().logDebug("marker 1.1.3");
              if (item.getAmount().multiply(bo.getExchangeRate()).add(bClearedAmount).compareTo(aGLAccountItem.getAmount()) > 0) {
                Logger.getInstance().logDebug("marker 1.1.4");
                throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorPaymentItemLabelId.PAID_AMOUNT_AND_CLEARED_AMOUNT, DebtorPaymentItemLabelId.AMOUNT});
              }
            }
            else {
              Logger.getInstance().logDebug("item.getAmount() : " + String.valueOf(item.getAmount()));
              Logger.getInstance().logDebug("bClearedAmount : " + String.valueOf(bClearedAmount));
              Logger.getInstance().logDebug("aGLAccountItem.getAmount() : " + String.valueOf(aGLAccountItem.getAmount()));
              if (item.getAmount().add(bClearedAmount).compareTo(aGLAccountItem.getAmount()) > 0) {
                Logger.getInstance().logDebug("marker 1.1.6");
                throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorPaymentItemLabelId.PAID_AMOUNT_AND_CLEARED_AMOUNT, DebtorPaymentItemLabelId.AMOUNT});
              }
            }
            if (bo.getCurrency().equals(aGLAccountItem.getCurrency())) {
              //item.setDefaultPaidAmount(differentPaidAmount);
              paidAmount = item.getAmount();
            }
            else {
              /*
               * Jason 22th Sept 2003
               * if (bo.getCurrency().equals(aOffice.getCurrency())) {
               * aCalculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(differentPaidAmount, null, null, aGLAccountItem.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
               * item.setDefaultPaidAmount(aCalculateExchangeRateAmount.getAmountLocalCurrency());
               * }
               * else {
               * aCalculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(null, differentPaidAmount, bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
               * item.setDefaultPaidAmount(aCalculateExchangeRateAmount.getAmount());
               * }
               */
              aExchangeRate = commonFunction.retrieveEffectiveExchangeRate(bo.getCurrency(), aGLAccountItem.getCurrency(), bo.getDocumentDate());
              bExchgRate = aExchangeRate.getValue();
              paidAmount = item.getAmount().multiply(bExchgRate).setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION);
              // Jason 22th Spet 2003 paidAmount = (item.getAmount().divide(item.getDefaultPaidAmount(), BigDecimal.ROUND_UP)).multiply(aGLAccountItem.getAmount().subtract(clearedAmount));
              //paidAmount = new BigDecimal((item.getAmount().floatValue() / item.getDefaultPaidAmount().floatValue()) * (aGLAccountItem.getAmount().floatValue() - clearedAmount.floatValue()));
            }
          }

          if (aGLAccountItem.getClearedAmount() == null || aGLAccountItem.getClearedAmount().equals("")) {
            //aGLAccountItem.setClearedAmount(item.getAmount());
            aGLAccountItem.setClearedAmount(paidAmount);
          }
          else {
            //aGLAccountItem.setClearedAmount(aGLAccountItem.getClearedAmount().add(item.getAmount()));
            aGLAccountItem.setClearedAmount(aGLAccountItem.getClearedAmount().add(paidAmount));
          }

          if (aGLAccountItem.getClearedAmount() != null && !aGLAccountItem.getClearedAmount().equals("")) {
            if (aGLAccountItem.getAmount().compareTo(aGLAccountItem.getClearedAmount()) == 0) {
              aGLAccountItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
              //Jason 17th Feb 2005, BugId: 9894
              aGLAccountItem.setClearedRefFiscalYear(bo.getFiscalYear());
            }
            else if (aGLAccountItem.getAmount().compareTo(aGLAccountItem.getClearedAmount()) < 0) {
              //Chee Seng 07th July 2004, bugId: 6444
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{IConstants.DebtorPaymentLabelId.INVOICE_CLEARED_AMOUNT, IConstants.DebtorPaymentLabelId.INVOICE_AMOUNT});
            }
          }

          aGLAccountItem.setLastUpdateBy(user.getId());
          aGLAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        }
        else {
          gLAccountItem.setClearedAmount(new BigDecimal(0));
        }
        gLAccountItem.setSpecialGLIndicator(item.getSpecialGLIndicator());
        //gLAccountItem.setSubledgerAccountType(PostingAccountType.GL);
        gLAccountItem.setSubledgerName(item.getSubledgerName());
        gLAccountItem.setTin(item.getTin());
        //tml 15 May 2006, BugId: 16902
        gLAccountItem.setSubledgerOfficeCode(item.getSubledgerOfficeCode());
        gLAccountItem.setExternalSystemType(bo.getExternalSystemType());
        gLAccountItem.setCid(item.getCid());
        gLAccountItem.setChequeNumber(bo.getChequeNumber());
        gLAccountItem.setConversionIndicator(bo.isConversionIndicator());
        
        gLAccountItemList.add(gLAccountItem);
        
		//itemNumber = itemNumber + 1;	
		
        /* Hui Mian 05/08/2008 bugid:25917 Error:Recon Account Type In Special GL Indicator cannot be found.
        if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue()) {
          Logger.getInstance().logDebug("gLAccountItem.getDebitCreditType() === " + gLAccountItem.getDebitCreditType());
          Logger.getInstance().logDebug("reconAccountType === " + reconAccountType);
          Logger.getInstance().logDebug("gLAccountItem.getReconAccountType() === " + gLAccountItem.getReconAccountType());
          if (gLAccountItem.getDebitCreditType().equals(DebitCreditType.CREDIT) && reconAccountType != null && gLAccountItem.getReconAccountType() != null && !gLAccountItem.getReconAccountType().equals(reconAccountType)) {
            Logger.getInstance().logDebug("createAdditionalGLAccountItem");
            List additionalGLAccountItemList = createAdditionalGLAccountItem(gLAccountItem, user);
            for (int j = 0; j < additionalGLAccountItemList.size(); j++) {
              IDebtorPaymentItem additionalDebtorPaymentItem = new DebtorPaymentItemValue();
              additionalDebtorPaymentItem.copyPropertiesFrom((IAbstractGLAccountItem) additionalGLAccountItemList.get(j));
              bo.getItems().add(i + 1, additionalDebtorPaymentItem);
              gLAccountItemList.add(additionalDebtorPaymentItem);
              i = i + 1;
            }
          }
        }*/
        i = i + 1;
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    
    
    if (bo.getGainAndLossAmount().compareTo(new BigDecimal(0)) != 0) {
      IDebtorPaymentGLAccountItem gLAccountItemGainAndLoss = new DebtorPaymentGLAccountItemValue();

      gLAccountItemGainAndLoss.setOfficeCode(bo.getOfficeCode());
      gLAccountItemGainAndLoss.setDocumentNumber(bo.getDocumentNumber());
      gLAccountItemGainAndLoss.setFiscalYear(bo.getFiscalYear());
      gLAccountItemGainAndLoss.setCurrency(bo.getCurrency());
      gLAccountItemGainAndLoss.setDocumentDate(bo.getDocumentDate());
      gLAccountItemGainAndLoss.setPostingDate(bo.getPostingDate());
      gLAccountItemGainAndLoss.setDocumentType(bo.getDocumentType());
      gLAccountItemGainAndLoss.setAmount(new BigDecimal(0));
      gLAccountItemGainAndLoss.setPostingPeriod(bo.getPostingPeriod());
      gLAccountItemGainAndLoss.setReference(bo.getReference());
      gLAccountItemGainAndLoss.setReferenceType(bo.getReferenceType());
      gLAccountItemGainAndLoss.setProcessStatus(bo.getProcessStatus());

      if (bo.getGainAndLossAmount().compareTo(new BigDecimal(0)) > 0) {
        gLAccountItemGainAndLoss.setPostingKey(IConstants.TransactionPostingKey.LOAN_DEBIT);
        gLAccountItemGainAndLoss.setAmountInLocalCurrency(bo.getGainAndLossAmount());
      }
      else if (bo.getGainAndLossAmount().compareTo(new BigDecimal(0)) < 0) {
        gLAccountItemGainAndLoss.setPostingKey(IConstants.TransactionPostingKey.LOAN_CREDIT);
        gLAccountItemGainAndLoss.setAmountInLocalCurrency(new BigDecimal(0).subtract(bo.getGainAndLossAmount()));
      }

      gLAccountItemGainAndLoss.setExchangeRate(new BigDecimal(0));
      gLAccountItemGainAndLoss.setClearedAmount(new BigDecimal(0));
      gLAccountItemGainAndLoss.setHeaderIndicator(new Boolean(false));
      //gLAccountItemGainAndLoss.setItemNo(new Integer(bo.getItems().size() + 1));
	  gLAccountItemGainAndLoss.setItemNo(new Integer(itemNumber + 1));
      gLAccountItemGainAndLoss.setCostCenterId(bo.getCostCenterId());
      gLAccountItemGainAndLoss.setAssignment(bo.getAssignment());
      gLAccountItemGainAndLoss.setRemark(bo.getRemark());
      gLAccountItemGainAndLoss.setReversedRefDocumentNumber(bo.getReversedRefDocumentNumber());
      gLAccountItemGainAndLoss.setReversalDocumentIndicator(bo.isReversalDocumentIndicator());
      gLAccountItemGainAndLoss.setChequeNumber(bo.getChequeNumber());
      Logger.getInstance().logDebug("marker 3");
      gLAccountItemGainAndLoss.setConversionIndicator(bo.isConversionIndicator());
			gLAccountItemGainAndLoss.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());

      try {
        office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.CODE});
      }
      catch (RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      try {
        Logger.getInstance().logDebug("office.getCOA() " + office.getCOA());
        Logger.getInstance().logDebug("bo.getOfficeCode() " + bo.getOfficeCode());
        Logger.getInstance().logDebug("gLAccountItemGainAndLoss.getPostingKey() " + gLAccountItemGainAndLoss.getPostingKey());
        IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), IConstants.AutomaticAccountDetermination.EXCHANGE_GAIN_LOSS, gLAccountItemGainAndLoss.getPostingKey(), user);
        gLAccountItemGainAndLoss.setGLAccount(automaticAccountAssignment.getGlAccount());
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
      }
      catch (RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      try {
        IPostingKey postingKey = generalLedgerSetup.retrievePostingKey(gLAccountItemGainAndLoss.getPostingKey(), user);
        gLAccountItemGainAndLoss.setDebitCreditType(postingKey.getDebitCredit());
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DocTypePostingKeyTransLabelId.OFFICECODE_AND_TRANSACTIONCODE});
      }
      catch (RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      Logger.getInstance().logDebug("gLAccountItemGainAndLoss.getDebitCreditType() " + gLAccountItemGainAndLoss.getDebitCreditType());
      Logger.getInstance().logDebug("gLAccountItemGainAndLoss.getAmount() " + gLAccountItemGainAndLoss.getAmount());
      Logger.getInstance().logDebug("gLAccountItemGainAndLoss.getAmountInLocalCurrency() " + gLAccountItemGainAndLoss.getAmountInLocalCurrency());
      gLAccountItemGainAndLoss.setCid(bo.getCid());
      gLAccountItemList.add(gLAccountItemGainAndLoss);

	  
      //Chee Seng 08th Dec 2004, bugId: 8866
      debtorPaymentItemBO = new DebtorPaymentItemValue();
      debtorPaymentItemBO.copyPropertiesFrom(gLAccountItemGainAndLoss);
      bo.addItem(debtorPaymentItemBO);
      
	  itemNumber = itemNumber + 1;
      /*
      //Jason 17th Spet 2003 - Create gainAndLoss record into debtorPaymentItem table.
      try {
        debtorPaymentItem = debtorPaymentItemHome.create(new DebtorPaymentItemPK(gLAccountItemGainAndLoss.getOfficeCode(), gLAccountItemGainAndLoss.getFiscalYear(), gLAccountItemGainAndLoss.getDocumentNumber(), gLAccountItemGainAndLoss.getItemNo()), null, null, null, null, null, user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      }
      catch (javax.ejb.DuplicateKeyException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorPaymentItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
      }
      catch (javax.ejb.CreateException ex) {
        sessionContext.setRollbackOnly();
        throw new CannotCreateRecordException(new Object[]{DebtorPaymentItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      */
    }

    //karen BugId:18568 13 Oct 2006
    if (bo.getDiscountAmount() != null && !bo.getDiscountAmount().equals("")) {
      IDebtorPaymentGLAccountItem bankChargesGLAccountItem = new DebtorPaymentGLAccountItemValue();
      bankChargesGLAccountItem.setOfficeCode(bo.getOfficeCode());
      bankChargesGLAccountItem.setFiscalYear(bo.getFiscalYear());
      bankChargesGLAccountItem.setDocumentNumber(bo.getDocumentNumber());
      bankChargesGLAccountItem.setGLAccount(bo.getDiscountGlAccount());
      bankChargesGLAccountItem.setAmount(bo.getDiscountAmount());
      bankChargesGLAccountItem.setHeaderIndicator(new Boolean(false));
      //bankChargesGLAccountItem.setItemNo(new Integer(bo.getItems().size() + 1));
	  bankChargesGLAccountItem.setItemNo(new Integer(itemNumber + 1));
	  
      bankChargesGLAccountItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
      bankChargesGLAccountItem.setDocumentType(bo.getDocumentType());
      bankChargesGLAccountItem.setDocumentDate(bo.getDocumentDate());
      bankChargesGLAccountItem.setPostingPeriod(bo.getPostingPeriod());
      bankChargesGLAccountItem.setPostingDate(bo.getPostingDate());
      bankChargesGLAccountItem.setReference(bo.getReference());
      bankChargesGLAccountItem.setReferenceType(bo.getReferenceType());
      bankChargesGLAccountItem.setProcessStatus(bo.getProcessStatus());
      bankChargesGLAccountItem.setCurrency(bo.getCurrency());
      bankChargesGLAccountItem.setExchangeRate(bo.getExchangeRate());
      bankChargesGLAccountItem.setCostCenterId(bo.getCostCenterId());
      bankChargesGLAccountItem.setAssignment(bo.getAssignment());
      bankChargesGLAccountItem.setRemark(bo.getRemark());
			//bankChargesGLAccountItem.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());
			bankChargesAmount = bo.getDiscountAmount();

			bankChargesGLAccountItem.setInterOfficePostingIndicator(new Boolean(true));
			try {
				ICostCenter rc = generalLedgerSetup.retrieveResponsibleCenter("1402520", user);
				
				office = generalLedgerSetup.retrieveOffice(rc.getOfficeCode(), user);
				Logger.getInstance().logDebug("office.getCode = " + office.getCode());
				
				String postingKey = null;
				postingKey = bankChargesGLAccountItem.getPostingKey();
				
				Logger.getInstance().logDebug("postingKey :" + postingKey);

				IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), office.getCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, postingKey, user);

				bankChargesGLAccountItem.setGLAccount(automaticAccountAssignment.getGlAccount());
			}
			catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
				sessionContext.setRollbackOnly();
				throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
			}
			catch (java.rmi.RemoteException ex) {
				sessionContext.setRollbackOnly();
				throw new javax.ejb.EJBException(ex.toString());
			}

      //Hui Mian bugId: 19131, set item number
      //bankChargesGLAccountItem.setItemNo(new Integer(bo.getItems().size() + 1));
      gLAccountItemList.add(1,bankChargesGLAccountItem);
	  itemNumber = itemNumber + 1;
    }
    
//	13/07/2010 erma  bugId: 27792 - for surcharge invoice only
	if(surchargeIndicator == true){
		
		Logger.getInstance().logDebug("Surcharge Indicator = True; add DR");
		
				IDebtorPaymentGLAccountItem gLAccountItem = new DebtorPaymentGLAccountItemValue();
				gLAccountItem.setOfficeCode(bo.getOfficeCode());
				gLAccountItem.setFiscalYear(bo.getFiscalYear());
				gLAccountItem.setDocumentNumber(bo.getDocumentNumber());
				gLAccountItem.setItemNo(new Integer(itemNumber + 1));
				gLAccountItem.setDocumentType(bo.getDocumentType());
				gLAccountItem.setDocumentDate(bo.getDocumentDate());
				gLAccountItem.setPostingKey(IConstants.TransactionPostingKey.SI_DEBIT);
				gLAccountItem.setPostingPeriod(bo.getPostingPeriod());
				gLAccountItem.setPostingDate(bo.getPostingDate());
				gLAccountItem.setReference(bo.getReference());
				gLAccountItem.setReferenceType(bo.getReferenceType());
				gLAccountItem.setProcessStatus(bo.getProcessStatus());
				gLAccountItem.setCurrency(bo.getCurrency());
				gLAccountItem.setExchangeRate(bo.getExchangeRate());
				gLAccountItem.setHeaderIndicator(new Boolean(false));
				gLAccountItem.setChequeNumber(bo.getChequeNumber());
				
				try{
					office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
					IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), 
																			IConstants.AutomaticAccountDetermination.PROVISION_FOR_SURCHARGE, gLAccountItem.getPostingKey(), user);
					gLAccountItem.setGLAccount(automaticAccountAssignment.getGlAccount());							
				}
				catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
					sessionContext.setRollbackOnly();
					throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
				}
				catch (java.rmi.RemoteException ex) {
					sessionContext.setRollbackOnly();
					throw new javax.ejb.EJBException(ex.toString());
				}		
				gLAccountItem.setDebitCreditType(IConstants.DebitCreditType.DEBIT);
				gLAccountItem.setAmount(provAmount);
				gLAccountItem.setAmountInLocalCurrency(provAmount);        
				gLAccountItem.setAssignment("SI");
				gLAccountItem.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());	
			
				gLAccountItemList.add(gLAccountItem);
				itemNumber = itemNumber + 1;
	}
		if(surchargeIndicator == true){
		Logger.getInstance().logDebug("Surcharge Indicator = True; add CR");
		IDebtorPaymentGLAccountItem gLAccountItemCR = new DebtorPaymentGLAccountItemValue();
		gLAccountItemCR.setOfficeCode(bo.getOfficeCode());
		gLAccountItemCR.setFiscalYear(bo.getFiscalYear());
		gLAccountItemCR.setDocumentNumber(bo.getDocumentNumber());
		gLAccountItemCR.setItemNo(new Integer(itemNumber + 1));
		gLAccountItemCR.setDocumentType(bo.getDocumentType());
		gLAccountItemCR.setDocumentDate(bo.getDocumentDate());
		gLAccountItemCR.setPostingPeriod(bo.getPostingPeriod());
		gLAccountItemCR.setPostingDate(bo.getPostingDate());
		gLAccountItemCR.setReference(bo.getReference());
		gLAccountItemCR.setReferenceType(bo.getReferenceType());
		gLAccountItemCR.setProcessStatus(bo.getProcessStatus());
		gLAccountItemCR.setCurrency(bo.getCurrency());
		gLAccountItemCR.setExchangeRate(bo.getExchangeRate());
		gLAccountItemCR.setHeaderIndicator(new Boolean(false));
		gLAccountItemCR.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());	
		gLAccountItemCR.setPostingKey(IConstants.TransactionPostingKey.SI_CREDIT);
		try{
			office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
			IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), 
			IConstants.AutomaticAccountDetermination.SURCHARGE_INVOICE, gLAccountItemCR.getPostingKey(), user);
			Logger.getInstance().logDebug("automaticAccountAssignment.getGlAccount() - " + automaticAccountAssignment.getGlAccount());
			gLAccountItemCR.setGLAccount(automaticAccountAssignment.getGlAccount());
		}catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
		sessionContext.setRollbackOnly();
		throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
		}
		catch (java.rmi.RemoteException ex) {
			sessionContext.setRollbackOnly();
			throw new javax.ejb.EJBException(ex.toString());
		}		

		gLAccountItemCR.setDebitCreditType(IConstants.DebitCreditType.CREDIT);
		gLAccountItemCR.setAmount(provAmount);
		gLAccountItemCR.setAmountInLocalCurrency(provAmount); 
		gLAccountItemCR.setAssignment("SI");
		gLAccountItemList.add(gLAccountItemCR);
		itemNumber = itemNumber + 1;
	}
        
    
    try {
      resultGLAccountItemList = commonFunction.postDocument(gLAccountItemList, bo.getBudgetActionType(), user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Chee Seng 05th July 2004, bugId: 6444
    try {
      for (int k = 0; k < bo.getItems().size(); k++) {
        IDebtorPaymentItem gLAccountItemResult = (IDebtorPaymentItem) bo.getItems().get(k);
        if (gLAccountItemResult.getDocumentType() != null && gLAccountItemResult.getDocumentType().equals(IConstants.TransactionDocumentType.CASH_BOOK)) {
          ICashBookTransaction cashBookTransaction = cashManager.retrieveCashBookTransaction(gLAccountItemResult.getTransactionOfficeCode(), gLAccountItemResult.getTransactionFiscalYear(), gLAccountItemResult.getTransactionDocumentNumber(), user);
          CashBookSetup cashBookSetup = cashBookSetupHome.findByPrimaryKey(new CashBookSetupPK(cashBookTransaction.getOfficeCode(), cashBookTransaction.getCashBookCode()));
          BigDecimal openingBalance = new BigDecimal(0);
          openingBalance = cashBookSetup.getOpeningBalance().subtract(gLAccountItemResult.getAmountInLocalCurrency());
          if (openingBalance.compareTo(new BigDecimal(0)) < 0) {
            throw new NegativeNumberException(new Object[]{CashBookSetupLabelId.OPENING_BALANCE});
          }
          else {
            cashBookSetup.setOpeningBalance(openingBalance);
            //Jason 13th May 2004, BugId: 5633
            cashBookSetup.setLastUpdateBy(user.getId());
            cashBookSetup.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          }
        }
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{CashBookSetupLabelId.CODE});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Chee Seng 30th June 2004, bugId: 6339
    IDebtorClearingTransaction debtorClearingTransactionBO = null;
    java.util.List debtorClearingTransactionList = new java.util.ArrayList();

    IDebtorClearingTransaction headerItem = new DebtorClearingTransactionValue();
    headerItem.setOfficeCode(bo.getOfficeCode());
    headerItem.setFiscalYear(bo.getFiscalYear());
    headerItem.setDocumentNumber(bo.getDocumentNumber());
    headerItem.setItemNumber(new Integer(0));
    headerItem.setDebitCreditType(bo.getDebitCreditType());
    headerItem.setTransactionDebitCreditType(bo.getDebitCreditType());
    headerItem.setDocumentDate(bo.getDocumentDate());
    headerItem.setClearedAmountInLocalCurrency(bo.getAmountInLocalCurrency().add(bankChargesAmount));
    for (int j = 0; j < bo.getItems().size(); j++) {
      debtorPaymentItemBO = new DebtorPaymentItemValue();
      debtorPaymentItemBO = (IDebtorPaymentItem) bo.getItems().get(j);
      Logger.getInstance().logDebug("debtorPaymentItemBO.getAmountInLocalCurrency() = " + debtorPaymentItemBO.getAmountInLocalCurrency());
      
      if (debtorPaymentItemBO.getTransactionDocumentNumber() != null && debtorPaymentItemBO.getTransactionFiscalYear() != null) {
      	Logger.getInstance().logDebug("j = " + j);
        debtorClearingTransactionBO = new DebtorClearingTransactionValue();
        debtorClearingTransactionBO.setOfficeCode(bo.getOfficeCode());
        debtorClearingTransactionBO.setFiscalYear(debtorPaymentItemBO.getTransactionFiscalYear());
        debtorClearingTransactionBO.setDocumentNumber(debtorPaymentItemBO.getTransactionDocumentNumber());
        debtorClearingTransactionBO.setItemNumber(debtorPaymentItemBO.getTransactionItemNo());
        debtorClearingTransactionBO.setDocumentDate(debtorPaymentItemBO.getTransactionDocumentDate());
        debtorClearingTransactionBO.setDebitCreditType(debtorPaymentItemBO.getDebitCreditType());
        debtorClearingTransactionBO.setTransactionDebitCreditType(debtorPaymentItemBO.getTransactionDebitCreditType());
        debtorClearingTransactionBO.setClearedAmountInLocalCurrency(debtorPaymentItemBO.getAmountInLocalCurrency());
        debtorClearingTransactionList.add(debtorClearingTransactionBO);
      }
      else if (debtorPaymentItemBO.getSpecialGLIndicator() != null && !debtorPaymentItemBO.getSpecialGLIndicator().equals("")) {
        if (debtorPaymentItemBO.getDebitCreditType().equals(IConstants.DebitCreditType.CREDIT)) {
          headerItem.setClearedAmountInLocalCurrency(headerItem.getClearedAmountInLocalCurrency().subtract(debtorPaymentItemBO.getAmountInLocalCurrency()));
        }
        else {
          headerItem.setClearedAmountInLocalCurrency(headerItem.getClearedAmountInLocalCurrency().add(debtorPaymentItemBO.getAmountInLocalCurrency()));
        }
      }
      else
          if (debtorPaymentItemBO.getTransactionDocumentNumber() == null && debtorPaymentItemBO.getTransactionFiscalYear() == null) {
        if (debtorPaymentItemBO.getDebitCreditType().equals(IConstants.DebitCreditType.CREDIT)) {
          headerItem.setClearedAmountInLocalCurrency(headerItem.getClearedAmountInLocalCurrency().subtract(debtorPaymentItemBO.getAmountInLocalCurrency()));
        }
        else {
          headerItem.setClearedAmountInLocalCurrency(headerItem.getClearedAmountInLocalCurrency().add(debtorPaymentItemBO.getAmountInLocalCurrency()));
        }
      }

    }
    debtorClearingTransactionList.add(headerItem);
    IAbstractGLAccountItem abstractGLAccountItemBO = new AbstractGLAccountItemValue();
    abstractGLAccountItemBO.setOfficeCode(bo.getOfficeCode());
    abstractGLAccountItemBO.setFiscalYear(bo.getFiscalYear());
    abstractGLAccountItemBO.setDocumentNumber(bo.getDocumentNumber());
    abstractGLAccountItemBO.setExchangeRate(bo.getExchangeRate());
    abstractGLAccountItemBO.setCurrency(bo.getCurrency());
    abstractGLAccountItemBO.setDocumentDate(bo.getDocumentDate());
    try {
      createDebtorClearingTransaction(debtorClearingTransactionList, abstractGLAccountItemBO, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }

    //Chee Seng 08th Dec 2004, bugId: 8866
    try {
      //Hui Mian 19/12/2006, bugId: 19608 Check cannot have duplicate receipt number
      if (bo.isConversionIndicator() != null && bo.isConversionIndicator().booleanValue()) {
        if (bo.getOrNumber() != null && !bo.getOrNumber().equals("")) {
          DebtorPaymentDAO dao = (DebtorPaymentDAO) DAOProxy.getDAO("debtorPayment", user);
          java.util.List results = dao.findByOfficeCodeORNumber(bo.getOfficeCode(), bo.getOrNumber());

          if (results.size() > 0) {
            throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{DebtorPaymentLabelId.OR_NUMBER});
          }
        }
      }
      if (bo.getOrNumber() == null || bo.getOrNumber().equals("")) {
        String nextDocumentNumber = null;
        //nextDocumentNumber = ICMSConnector.getNextDocumentControlNumber(user.getIcmsSession(), IConstants.Prefix.RA, bo.getOfficeCode(), null, null, null);
        //karen BugId:19203 16 Nov 2006
        nextDocumentNumber = ICMSConnector.getNextDocumentControlNumber(user.getIcmsSession(), IConstants.Prefix.RT, bo.getOfficeCode(), null, null, null);
        Logger.getInstance().logDebug("nextDocumentNumber " + nextDocumentNumber);
        if (nextDocumentNumber == null || nextDocumentNumber.length() == 0) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorPaymentLabelId.OR_NUMBER});
        }
        bo.setOrNumber(nextDocumentNumber);
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
			}
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorPaymentLabelId.OR_NUMBER});
    }

    try {
      debtorPayment = debtorPaymentHome.create(new DebtorPaymentPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getOrNumber(), user.getCurrentSiteCode(), bo.getPaymentType(), bo.getChequeDate(), bo.getChequePlace(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 4th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(debtorPayment, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      for (int j = 0; j < bo.getItems().size(); j++) {
        IDebtorPaymentItem item = (IDebtorPaymentItem) bo.getItems().get(j);
        debtorPaymentItem = debtorPaymentItemHome.create(new DebtorPaymentItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), new Integer(j + 1)), item.getTransactionOfficeCode(), item.getTransactionFiscalYear(), item.getTransactionDocumentNumber(), item.getTransactionNumber(), item.getTransactionItemNo(), item.getTransactionGLAccount(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        //Chee Seng 4th July 2005, bugId: 11719
        ACRAuditTrail.insertLogAuditTrail(debtorPaymentItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorPaymentItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{DebtorPaymentItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    Logger.getInstance().logDebug("---bo.isInterOfficePostingIndicator()----" + bo.isInterOfficePostingIndicator());

		if (bo.getDiscountAmount() != null && !bo.getDiscountAmount().equals("")) {
			if (resultGLAccountItemList.size() > 0) {
				IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) resultGLAccountItemList.get(0);
				bo.setCrossOfficeNumber(glItem.getCrossOfficeNumber());
			}
			createJournalForDebtorPaymentBankCharges(bo, IConstants.RECORD_INDICATOR.INSERT, user);
		}
			
    try {
      //karen 29 September 2006 BugId:18370
      if (bo.isInterOfficePostingIndicator() != null && bo.isInterOfficePostingIndicator().equals(Boolean.TRUE)) {
        if (resultGLAccountItemList.size() > 0) {
          IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) resultGLAccountItemList.get(0);
          bo.copyPropertiesFrom(glItem);
        }
        createJournalForDebtorPayment(bo, user);
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
	try {
		List GLitemListforBadDebtsRecover = new ArrayList();
		  
			if (resultGLAccountItemList.size() > 0) 
			for (int ctr=0;ctr<resultGLAccountItemList.size();ctr++){
			  IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) resultGLAccountItemList.get(ctr);
			  if((glItem.getOfficeCode()!=null && glItem.getOfficeCode().length()>0) &&
			  (glItem.getClearedRefFiscalYear()!=null ) &&
			   (glItem.getClearedRefDocumentNumber() !=null)){
				List invoiceHeaderList = commonFunction.retrieveGLAccountItemByItemNumber(glItem.getOfficeCode(), glItem.getClearedRefFiscalYear(), glItem.getClearedRefDocumentNumber(), new Integer(0), user);
					if (invoiceHeaderList != null && invoiceHeaderList.size() > 0) {
						 IAbstractGLAccountItem invoiceHeader = (IAbstractGLAccountItem)invoiceHeaderList.get(0);
						
						Session icmsSession=(Session)user.getIcmsSession().clone();
						  Connection conn = null;		
						  conn = com.portrade.ipms.afms.dao.ConnectionPool.getConnection();
						  icmsSession.setInCMT(true);
						  icmsSession.setConnection(conn);
						  BadDebtsRelief BadDbt = 
						  new BadDebtsRelief(icmsSession).findBadDebtsReliefByReliefGLid(invoiceHeader.getId(),Boolean.FALSE);
							
							if(BadDbt!=null){	
								GLitemListforBadDebtsRecover.add(glItem);	  
							}
							
					}
				 }
			  
			  
			}
		try{
			commonFunction.createJounalforDbtrecover(GLitemListforBadDebtsRecover,user);
		  }
		  catch (Exception ex) {
			sessionContext.setRollbackOnly();
		  }
			
		}
		catch (AFMSException ex) {
		  sessionContext.setRollbackOnly();
		  throw ex;
		}
		catch (RemoteException ex) {
		  sessionContext.setRollbackOnly();
		  //throw ex;
		}
		catch (Exception ex) {
		  sessionContext.setRollbackOnly(); 
		}
    Logger.getInstance().logDebug("method ended correctly");

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param aOfficeCode Description of the Parameter
   * @param aFiscalYear Description of the Parameter
   * @param aDocumentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {D3442216-260B-458F-B4DD-2BED1C429ED5}
   */
  public com.portrade.ipms.afms.IDebtorPayment retrieveDebtorPayment(String aOfficeCode, Integer aFiscalYear, Long aDocumentNumber, IUser user) throws AFMSException {
    DebtorPayment aDebtorPayment = null;
    GLAccountItem aGLAccountItem = null;
    String documentNumber$ = aDocumentNumber.toString();
    IDebtorPayment bo = new DebtorPaymentValue();
    CommonFunction commonFunction = null;

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    try {

      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_OFFICE_CODE, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_FISCALYEAR, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_OFFICE_CODE, "=", aOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_FISCALYEAR, "=", aFiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", aDocumentNumber)
          };
      java.util.List results = DAOProxy.list("debtorPayment", user, filter);
      DebtorPaymentDAO dao = (DebtorPaymentDAO) DAOProxy.getDAO("debtorPayment", user);

      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      bo = (IDebtorPayment) results.get(0);

      List bankChargesItemList = dao.findByBankChargesItem(aOfficeCode, aFiscalYear, aDocumentNumber);
      if (bankChargesItemList.size() > 0) {
        IDebtorPayment bankChargesItem = (IDebtorPayment) bankChargesItemList.get(0);
        bo.setDiscountAmount(bankChargesItem.getAmount());
        bo.setDiscountGlAccount(bankChargesItem.getGLAccount());
      }
      /*
      aDebtorPayment = debtorPaymentHome.findByPrimaryKey(new DebtorPaymentPK(aOfficeCode, aFiscalYear, aDocumentNumber));
      bo.setOfficeCode(aDebtorPayment.getOfficeCode());
      bo.setFiscalYear(aDebtorPayment.getFiscalYear());
      bo.setDocumentNumber(aDebtorPayment.getDocumentNumber());
      bo.setCid(aDebtorPayment.getCid());
      bo.setOrNumber(aDebtorPayment.getOrNumber());
      bo.setChequeDate(aDebtorPayment.getChequeDate());
      bo.setPaymentType(aDebtorPayment.getPaymentType());
      bo.setCreatedBy(aDebtorPayment.getCreatedBy());
      bo.setCreatedOn(aDebtorPayment.getCreatedOn());
      bo.setLastUpdateBy(aDebtorPayment.getLastUpdateBy());
      bo.setLastUpdateOn(aDebtorPayment.getLastUpdateOn());
      Collection aGLAccountItems = gLAccountItemHome.findByDocumentNumber(aOfficeCode, aFiscalYear, new Integer(documentNumber$));
      Iterator aIterator = aGLAccountItems.iterator();
      while (aIterator.hasNext()) {
        GLAccountItem glaccitem = (GLAccountItem) aIterator.next();
        if (Boolean.TRUE.equals(glaccitem.isHeaderIndicator())) {
          //bo.setCustomerId(glaccitem.getSubledgerAccount());
          //bo.setDebtorName(glaccitem.getSubledgerName());
          //bo.setTin(glaccitem.getTin());
          bo.setGlIndicator(glaccitem.getSpecialGLIndicator());
          bo.setDocumentDate(glaccitem.getDocumentDate());
          bo.setDocumentType(glaccitem.getDocumentType());
          bo.setPostingDate(glaccitem.getPostingDate());
          bo.setPostingPeriod(glaccitem.getPostingPeriod());
          bo.setPostingKey(glaccitem.getPostingKey());
          bo.setReference(glaccitem.getReference());
          bo.setReferenceType(glaccitem.getReferenceType());
          bo.setHeaderText(glaccitem.getRemark());
          //bo.setAccountId(glaccitem.getAccountId());
          bo.setCustomerId(glaccitem.getSubledgerAccount());
          bo.setCollectionAccount(glaccitem.getGLAccount());
          bo.setChequeNo(glaccitem.getChequeNumber());
          bo.setAmount(glaccitem.getAmount());
          bo.setAmountInLocalCurrency(glaccitem.getAmountInLocalCurrency());
          bo.setCurrency(glaccitem.getCurrency());
          bo.setExchangeRate(glaccitem.getExchangeRate());
          bo.setCostCenterId(glaccitem.getCostCenterId());
          //bo.setClearedAmount(glaccitem.getClearedAmount());
          //bo.setClearedRefDocumentNumber(glaccitem.getClearedRefDocumentNumber());
          //bo.setReversedRefDocumentNumber(glaccitem.getReversedRefDocumentNumber());
          //bo.setProcessStatus(glaccitem.getProcessStatus());
          bo.setAssignment(glaccitem.getAssignment());
        }
        if (Boolean.FALSE.equals(glaccitem.isHeaderIndicator()) && glaccitem.getItemNumber().equals(new Integer(1))) {
          bo.setCustomerId(glaccitem.getSubledgerAccount());
          bo.setDebtorName(glaccitem.getSubledgerName());
          bo.setTin(glaccitem.getTin());
        }
      }
      */
      AbstractCriteria[] filter1 = {
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_OFFICECODE, "=", DebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_FISCALYEAR, "=", DebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_DOCUMENTNUMBER, "=", DebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_ITEMNO, "=", DebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_ITEMNO),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false)),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_OFFICECODE, "=", aOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_FISCALYEAR, "=", aFiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_DOCUMENTNUMBER, "=", aDocumentNumber)
          };
      OrderBy orderBy[] = {new OrderBy(com.portrade.ipms.afms.dao.DebtorPaymentItemDAO.FILTER_ITEMNO)};
      java.util.List items = DAOProxy.list("debtorPaymentItem", user, filter1, orderBy);
      /*
      Collection items = debtorPaymentItemHome.findByDocumentNumber(aOfficeCode, aFiscalYear, new Integer(documentNumber$));
      */
      //22 Feb 06 THC Added for BPSB
      if (items.size() > 0) {
        IDebtorPaymentItem boItem = new DebtorPaymentItemValue();
        boItem = (IDebtorPaymentItem) items.get(0);
        if (boItem.getSpecialGLIndicator() == null || boItem.getSpecialGLIndicator().equals("")) {

          if (boItem.getClearedRefDocumentNumber() == null || boItem.getClearedRefDocumentNumber().equals(new Integer(0))) {
            bo.setDiscountAmount(boItem.getAmount());
            bo.setDiscountGlAccount(boItem.getGLAccount());
            items.remove(0);
          }
        }
      }

      Iterator iterator = items.iterator();
      while (iterator.hasNext()) {
        IDebtorPaymentItem debtorPaymentItem = (IDebtorPaymentItem) iterator.next();
        /*
        DebtorPaymentItem item = (DebtorPaymentItem) iterator.next();
        IDebtorPaymentItem debtorPaymentItem = new DebtorPaymentItemValue();
        //if (item.getTransactionDocumentNumber() != null) {
        debtorPaymentItem.setOfficeCode(item.getOfficeCode());
        debtorPaymentItem.setFiscalYear(item.getFiscalYear());
        debtorPaymentItem.setDocumentNumber(item.getDocumentNumber());
        debtorPaymentItem.setItemNo(item.getItemNo());
        debtorPaymentItem.setTransactionOfficeCode(item.getTransactionOfficeCode());
        debtorPaymentItem.setTransactionDocumentNumber(item.getTransactionDocumentNumber());
        debtorPaymentItem.setTransactionNumber(item.getTransactionNumber());
        debtorPaymentItem.setTransactionFiscalYear(item.getTransactionFiscalYear());
        debtorPaymentItem.setCreatedBy(item.getCreatedBy());
        debtorPaymentItem.setCreatedOn(item.getCreatedOn());
        debtorPaymentItem.setLastUpdateBy(item.getLastUpdateBy());
        debtorPaymentItem.setLastUpdateOn(item.getLastUpdateOn());
        Collection bGLAccountItems = gLAccountItemHome.findByDocumentNumber(aOfficeCode, aFiscalYear, new Integer(documentNumber$));
        Iterator iterators = bGLAccountItems.iterator();
        while (iterators.hasNext()) {
          GLAccountItem bGlaccitem = (GLAccountItem) iterators.next();
          if (Boolean.FALSE.equals(bGlaccitem.isHeaderIndicator()) && debtorPaymentItem.getItemNo().equals(bGlaccitem.getItemNumber())) {
            debtorPaymentItem.setSubledgerName(bGlaccitem.getSubledgerName());
            debtorPaymentItem.setTin(bGlaccitem.getTin());
            debtorPaymentItem.setAccountType(bGlaccitem.getAccountType());
            debtorPaymentItem.setCid(bGlaccitem.getCid());
            debtorPaymentItem.setSubledgerAccount(bGlaccitem.getSubledgerAccount());
            debtorPaymentItem.setSpecialGLIndicator(bGlaccitem.getSpecialGLIndicator());
            debtorPaymentItem.setDebitCreditType(bGlaccitem.getDebitCreditType());
            debtorPaymentItem.setGLAccount(bGlaccitem.getGLAccount());
            debtorPaymentItem.setPostingKey(bGlaccitem.getPostingKey());
            debtorPaymentItem.setAmount(bGlaccitem.getAmount());
            debtorPaymentItem.setAmountInLocalCurrency(bGlaccitem.getAmountInLocalCurrency());
            debtorPaymentItem.setCostCenterId(bGlaccitem.getCostCenterId());
            debtorPaymentItem.setAssignment(bGlaccitem.getAssignment());
            debtorPaymentItem.setRemark(bGlaccitem.getRemark());
            debtorPaymentItem.setReconAccountType(bGlaccitem.getReconAccountType());
            break;
          }
        }
        */
        bo.setSubledgerAccount(debtorPaymentItem.getSubledgerAccount());
        bo.setSubledgerName(debtorPaymentItem.getSubledgerName());
        bo.setTin(debtorPaymentItem.getTin());
        //tml 15 May 2006, BugId: 16902
        bo.setSubledgerOfficeCode(debtorPaymentItem.getSubledgerOfficeCode());
        //Hui Mian 21/11/2006, bugId: 18372
        Logger.getInstance().logDebug("debtorPaymentItem.getTransactionOfficeCode() = " + debtorPaymentItem.getTransactionOfficeCode());
        Logger.getInstance().logDebug("debtorPaymentItem.getTransactionGLAccount() = " + debtorPaymentItem.getTransactionGLAccount());
        Logger.getInstance().logDebug("debtorPaymentItem.getTransactionFiscalYear() = " + debtorPaymentItem.getTransactionFiscalYear());
        Logger.getInstance().logDebug("debtorPaymentItem.getTransactionDocumentNumber() = " + debtorPaymentItem.getTransactionDocumentNumber());

        if (debtorPaymentItem.getTransactionOfficeCode() != null && !debtorPaymentItem.getTransactionOfficeCode().equals("")) {
          bo.setOfficeCode(debtorPaymentItem.getOfficeCode());
        }
        if (debtorPaymentItem.getTransactionGLAccount() != null && !debtorPaymentItem.getTransactionGLAccount().equals("")) {
          bo.setGLAccount(debtorPaymentItem.getTransactionGLAccount());
        }
        bo.addItem(debtorPaymentItem);
        //}
        com.portrade.ipms.afms.dao.GLAccountItemDAO glItemDAO = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
        List glList = new ArrayList();
        //karen 21 Dec 2006 BugId:19695
        if (debtorPaymentItem.getTransactionOfficeCode() != null && debtorPaymentItem.getTransactionDocumentNumber().intValue() != 0) {
          glList = commonFunction.retrieveGLAccountItemByItemNumber(debtorPaymentItem.getTransactionOfficeCode(), debtorPaymentItem.getTransactionFiscalYear(), debtorPaymentItem.getTransactionDocumentNumber(), new Integer(1), user);

        }
        else {
          glList = commonFunction.retrieveGLAccountItemByItemNumber(aOfficeCode, aFiscalYear, aDocumentNumber, new Integer(1), user);

        }
        if (glList != null && glList.size() > 0) {
          IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glList.get(0);
          debtorPaymentItem.setDocumentType(glItem.getDocumentType());
        }
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
			}
    }
    /*
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
    }*/
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    return bo;
  }


  /**
   * @modelguid {00DA090C-1DFB-4FBB-9AED-0541D39B63BF}
   */
  /*
   * public void createDownPayment(com.portrade.ipms.afms.IPayment payment, com.portrade.ipms.afms.ext.icms.IUser user) throws AFMSException
   * {
   * / Check if all the mandatory fields are entered
   * if (payment.getId() == null) {
   * throw new MandatoryFieldException(new Object[] { DebtorNumberRangeLabelId.CODE });
   * }
   * if (payment.getCode() == null || payment.getCode().equals("")) {
   * throw new MandatoryFieldException(new Object[] { DebtorNumberRangeLabelId.CODE });
   * }
   * / Get the remote interface
   * DownPayment downPaymentRemote = null;
   * try {
   * downPaymentRemote = downPaymentHome.create(payment.getId().toString(), payment.getCode(), user.getId(), AFMSUtilities.getCurrentTime());
   * downPaymentRemote.setDocumentType(payment.getDocumentType());
   * downPaymentRemote.setCompanyCode(payment.getCompanyCode());
   * downPaymentRemote.setPostingDate(payment.getPostingDate());
   * downPaymentRemote.setPostingPeriod(payment.getPostingPeriod());
   * downPaymentRemote.setReference(payment.getReference());
   * downPaymentRemote.setHeaderText(payment.getHeaderText());
   * downPaymentRemote.setAccountId(payment.getAccountId().toString());
   * downPaymentRemote.setGLIndicator(payment.getGLIndicator());
   * downPaymentRemote.setCustomerId(payment.getCustomerId());
   * downPaymentRemote.setAmmount(payment.getAmmount());
   * downPaymentRemote.setAmmountInLocalCurrency(payment.getAmmountInLocalCurrency());
   * downPaymentRemote.setAssignment(payment.getAssignment());
   * downPaymentRemote.setDescription(payment.getDescription());
   * downPaymentRemote.setBlockStatus(payment.getBlockStatus().toString());
   * downPaymentRemote.setCustomerType(payment.getCustomerType());
   * downPaymentRemote.setLastUpdateOn(payment.getLastUpdateOn());
   * downPaymentRemote.setLastUpdateBy(payment.getLastUpdateBy());
   * downPaymentRemote.setDeleted(payment.isDeleted());
   * }
   * catch (javax.ejb.DuplicateKeyException ex) {
   * throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[] { DebtorNumberRangeLabelId.CODE });
   * }
   * catch (javax.ejb.CreateException ex) {
   * throw new CannotCreateRecordException(new Object[] { DebtorNumberRangeLabelId.CODE });
   * }
   * catch (java.rmi.RemoteException ex) {
   * throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[] { ex });
   * }
   * }
   */
  /**
   * @param invoiceId Description of the Parameter
   * @param payment Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {993BFE8B-A651-444E-AF99-0E2831537ECC}
   */
  public void createInvoicePayment(String invoiceId, com.portrade.ipms.afms.IPayment payment, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * @param po Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {6FD9BAA7-84C0-41B9-BBC5-4DC41B479556}
   */
  public void createPurchaseOrder(com.portrade.ipms.afms.IPurchaseOrder po) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param doc Description of the Parameter
   * @param type Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {D5A6C052-5B07-4D07-8467-4CC0A2375BBD}
   */
  public void createTransactionDocument(com.portrade.ipms.afms.IAPDocument doc, String type) throws AFMSException { }


  /**
   * @param memo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {C1249F7B-CAAC-4466-83B8-92EFE3FAAB5B}
   */
  public void creditMemo(com.portrade.ipms.afms.IAPDocument memo) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param memo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {C4B73766-2732-4FCA-83FD-540491389724}
   */
  public void debitMemo(com.portrade.ipms.afms.IAPDocument memo) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param officeCode Description of the Parameter
   * @param accountNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A83303F4-FF7E-46F4-B8D0-2B039037ECE9}
   */
  public void deleteDebtorAccount(String officeCode, String accountNumber, IUser user) throws AFMSException {
    AccountReceivableSetup arSetup = null;

    try {
      arSetup = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    try {
      validateDeleteDebtorAccount(accountNumber, user);
      //eCommunity
      ICustomer debtorAccount = this.retrieveDebtorAccount(officeCode, accountNumber, user);

      AbstractCriteria[] filter = {new Criteria(DebtorAccountDAO.FILTER_OFFICECODE, "=", officeCode), new Criteria(DebtorAccountDAO.FILTER_ACCOUNTNUMBER, "=", accountNumber)};
      DAOProxy.setAuditUserInformation("afmsDebtorAccount", "DebtorAccount", filter, user);

      //BugId: 17778 karen 31 July 2006
      arSetup.deleteDebtorReconAccount(officeCode, accountNumber, null, user);

      //BugId: 20703 karen 26 February 2007
      //debtorAccountHome.remove(new DebtorAccountPK(accountNumber, officeCode));
      DebtorAccount debtor = debtorAccountHome.findByPrimaryKey(new DebtorAccountPK(accountNumber, officeCode));
      debtor.setAccountStatus(IConstants.AccStatus.DELETED);
      debtor.setLastUpdateBy(user.getId());
      debtor.setLastUpdateOn(AFMSUtilities.getCurrentTime());

		  ACRAuditTrail.deleteLogAuditTrail(debtorAccount, user);

      if (debtorAccount.isElectronicBillPresentment().booleanValue()) {
        ICMSConnector.sendXMLMsgToSoap(user.getIcmsSession(), debtorAccount, "delete");
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
      	throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
			}
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
    }
  }


  /**
   * @param paymentId Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {0F1C9409-86FD-4E15-BBC9-447615C348FD}
   */
  public void deleteInvoicePayment(Integer paymentId) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param poNo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {7C70A6EA-E413-4AB8-8261-C0D5E594F2F6}
   */
  public void deletePurchaseOrder(String poNo) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param doc Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {BB1A6D4F-2AD4-4B07-A254-0CAEEC8DAC88}
   */
  public void postTransaction(com.portrade.ipms.afms.IAPDocument doc) throws AFMSException {

    return;
    //void type
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {DA9C5C24-CFAE-4E06-9BD2-C38BF43A1C50}
   */
  public void updateDebtorAccount(com.portrade.ipms.afms.ICustomer bo, IUser user) throws AFMSException {
    DebtorAccount debtorAccount = null;
    try {
      validateUpdateDebtorAccount();
      validateDebtorAccount(bo, user);

      debtorAccount = debtorAccountHome.findByPrimaryKey(new DebtorAccountPK(bo.getAccountNumber(), bo.getOfficeCode()));

      //eCommunity - get previous IsElectronicBillPresentment flag.
      boolean prevIsElectronicBillPresentment = debtorAccount.getElectronicBillPresentment().booleanValue();

	  debtorAccount.setAccountCategory(bo.getAccountCategory());
	  debtorAccount.setAccountGroup(bo.getAccountGroup());
	  debtorAccount.setAccountRegistrationDate(bo.getAccountRegistrationDate());
	  debtorAccount.setAccountStatus(bo.getAccountStatus());
	  debtorAccount.setAlternativePayee(bo.getAlternativePayee());
	  debtorAccount.setBillingAddressCity(bo.getBillingAddressCity());
	  debtorAccount.setBillingAddressCountry(bo.getBillingAddressCountry());
	  debtorAccount.setBillingAddressLine1(bo.getBillingAddressLine1());
	  debtorAccount.setBillingAddressLine2(bo.getBillingAddressLine2());
	  debtorAccount.setBillingAddressPostCode(bo.getBillingAddressPostCode());
	  debtorAccount.setBillingAddressState(bo.getBillingAddressState());
	  debtorAccount.setCheckDoubleInvoice(bo.getCheckDoubleInvoice());
	  debtorAccount.setCompanyRegistrationNumber(bo.getCompanyRegistrationNumber());
	  debtorAccount.setContactEmail(bo.getContactEmail());
	  debtorAccount.setContactFax(bo.getContactFax());
	  debtorAccount.setContactName(bo.getContactName());
	  debtorAccount.setContactPosition(bo.getContactPosition());
	  debtorAccount.setCostCenterId(bo.getCostCenterId());
	  debtorAccount.setContactTelephone1(bo.getContactTelephone1());
	  debtorAccount.setContactTelephone2(bo.getContactTelephone2());
	  debtorAccount.setCurrencyType(bo.getCurrencyType());
	  debtorAccount.setDebtorCategory(bo.getDebtorCategory());
	  debtorAccount.setDebtorName(bo.getDebtorName());
	  debtorAccount.setDebtorType(bo.getDebtorType());
	  debtorAccount.setElectronicBillPresentment(bo.isElectronicBillPresentment());
	  debtorAccount.setEmployeeNumber(bo.getEmployeeNumber());
	  debtorAccount.setFirstGuaranteeExpiryDate(bo.getFirstGuaranteeExpiryDate());
	  debtorAccount.setGuaranteeTotalAmount(bo.getGuaranteeTotalAmount());
	  debtorAccount.setLastSuspendDate(bo.getLastSuspendDate());
	  debtorAccount.setPaymentTerm(bo.getPaymentTerm());
	  debtorAccount.setPaymentTermType(bo.getPaymentTermType());
	  debtorAccount.setPaymentBlockStatus(bo.getPaymentBlockStatus());
	  debtorAccount.setPortUserGuarantee(bo.isPortUserGuarantee());
	  debtorAccount.setReconAccountId(bo.getReconAccountId());
	  debtorAccount.setRemarks(bo.getRemarks());
	  debtorAccount.setSearchTerm(bo.getSearchTerm());
	  debtorAccount.setShippingAddressCity(bo.getShippingAddressCity());
	  debtorAccount.setShippingAddressCountry(bo.getShippingAddressCountry());
	  debtorAccount.setShippingAddressLine1(bo.getShippingAddressLine1());
	  debtorAccount.setShippingAddressLine2(bo.getShippingAddressLine2());
	  debtorAccount.setShippingAddressPostCode(bo.getShippingAddressPostCode());
	  debtorAccount.setShippingAddressState(bo.getShippingAddressState());
	  debtorAccount.setShortName(bo.getShortName());
	  debtorAccount.setSurchargeCode(bo.getSurchargeCode());
	  debtorAccount.setTaxCode(bo.getTaxCode());
	  debtorAccount.setTaxIdentificationNumber(bo.getTaxIdentificationNumber());
	  debtorAccount.setGSTRegistrationNo(bo.getGSTRegistrationNo());
	  debtorAccount.setGSTVerifiedDate(bo.getGSTVerifiedDate());
	  debtorAccount.setDeleted(bo.isDeleted());
	  debtorAccount.setDiscountAllow(bo.getDiscountAllow());
	  debtorAccount.setForeignCurrencyInvoiceIndicator(bo.getForiegnCurrencyInvoiceIndicator());
	  debtorAccount.setDiscountRate(bo.getDiscountRate());
	  debtorAccount.setDaysForSuspension(bo.getDaysForSuspension());
	  debtorAccount.setAgeingCode(bo.getAgeingCode());
	  debtorAccount.setLastUpdateBy(user.getId());
	  debtorAccount.setLastUpdateOn(AFMSUtilities.getCurrentTime());

		  ACRAuditTrail.updateLogAuditTrail(debtorAccount, user);

      if (prevIsElectronicBillPresentment && bo.isElectronicBillPresentment().booleanValue()) {
        ICMSConnector.sendXMLMsgToSoap(user.getIcmsSession(), bo, "update");
      }
      else if (prevIsElectronicBillPresentment && !bo.isElectronicBillPresentment().booleanValue()) {
        ICMSConnector.sendXMLMsgToSoap(user.getIcmsSession(), bo, "delete");
      }
      else if (!prevIsElectronicBillPresentment && bo.isElectronicBillPresentment().booleanValue()) {
        ICMSConnector.sendXMLMsgToSoap(user.getIcmsSession(), bo, "insert");
      }
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    return;
    //void type
  }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {3B7CE964-9A47-4558-A215-27ACF5E3B591}
   */
  public void updateDownPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {30159120-034C-4BC3-9244-01E4159D1E90}
   */
  public void updateInvoicePayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param po Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {FA21BE28-8A97-4515-9DF2-28BADBB913D2}
   */
  public void updatePurchaseOrder(com.portrade.ipms.afms.IPurchaseOrder po) throws AFMSException {

    return;
    //void type
  }


  /**
   * @param doc Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {AD7A1041-D094-42F7-8DBC-DACDD5028A88}
   */
  public void createTransactionDocument(com.portrade.ipms.afms.IARDocument doc) throws AFMSException { }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A61256CE-F32B-4FA8-8835-94757BC19249}
   */
  public void createDebtorDownPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {36C800EC-5555-4048-AE0D-E7D4658B59C9}
   */
  public void createDebtorInvoicePayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @param code Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {68C87C25-92E4-43DD-A38C-7AB99606889B}
   */
  public void deleteDocument(String code) throws AFMSException { }


  /**
   * @param payment Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {E8DD57BE-88A7-4F05-9562-09C0DA22E34F}
   */
  public Boolean simulateDebtorInvoicePayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E4790107-6F32-4A3F-A89D-0DAADABAD8C4}
   */
  public void createDebtorCompanyPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {B49E922C-D363-454B-8364-FEECA6E4EACC}
   */
  public java.util.ArrayList searchDCMemos() throws AFMSException {
    return null;
  }


  /**
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {07FDDCB6-04C3-47EA-9F25-53F5489A06A6}
   */
  public java.util.ArrayList searchDebtorInvoices() throws AFMSException {
    return null;
  }


  /**
   * @param type Description of the Parameter
   * @param doc Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {022E4B90-6628-439A-ABA0-1E4ACD40A57C}
   */
  public void updateDocument(String type, com.portrade.ipms.afms.IARDocument doc) throws AFMSException { }


  /**
   * @param staffAdvance Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {7887043D-B649-4A21-918B-37E210B238EB}
   */
  public void calculatedLiquidStaffAdvance(com.portrade.ipms.afms.IStaffAdvance staffAdvance) throws AFMSException { }


  /**
   * @param notes Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {99DDB88C-4EFA-455E-BA1B-733BC77B08A3}
   */
  public void calculatedNotesReceivable(com.portrade.ipms.afms.IARDocument notes) throws AFMSException { }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {8AF7D29D-A189-4644-B309-833E29EA292D}
   */
  public void calculateInterCompanyPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @param StaffAdvanceTransaction Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {5C435C05-37BE-4592-B61A-00BBB4EA4BBB}
   */
  public Boolean checkStaffAdvanceTransaction(com.portrade.ipms.afms.IStaffAdvance StaffAdvanceTransaction) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {9DB14E8B-FB5E-4D2B-A583-8A7EE95B0781}
   */
  public void createCompanyDebtorPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @param memo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {4B032FE3-2F85-414D-AC12-101CFE32F726}
   */
  public void createDebitCreditMemo(com.portrade.ipms.afms.IARDocument memo) throws AFMSException { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {EBDB43B7-362E-43BF-91D0-6736E88911D0}
   */
  public IBankGuarantee createDebtorBankGuarantee(com.portrade.ipms.afms.IBankGuarantee bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    BankGuarantee bankGuarantee = null;

    validateCreateDebtorBankGuarantee(bo, user);

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      bo.setReferenceNumber(commonFunction.getNextCustomDocumentNumber(SpecialDocumentNumberId.DEBTOR_GUARANTEE, AFMSUtilities.getCurrentDate(), user));

      bankGuarantee = bankGuaranteeHome.create(new BankGuaranteePK(bo.getOfficeCode(), bo.getReferenceNumber()),
          bo.getAccountNumber(), bo.getBankCode(), bo.getGuaranteeReference(), bo.getAmount(), bo.getStartDate(), bo.getEndDate(),
          bo.getRemark(), bo.getDebtorGuarantee(), IConstants.ActiveStatus.ACTIVE, bo.getCancellationDate(), user.getCurrentSiteCode(), new Boolean(false), bo.getGuaranteeType(), user.getId(), AFMSUtilities.getCurrentTime());
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{BankGuaranteeLabelId.BANKGUARANTEE});
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
    return bo;
  }


  /**
   * @param invoice Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E84E27D1-1CF0-4943-A2C2-BA893848ADBE}
   */
  public void createDebtorInvoice(int invoice) throws AFMSException { }


  /**
   * @param doc Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {79949FA5-77C2-416F-876F-035C907340FB}
   */
  public void createDebtorInvoiceTransaction(com.portrade.ipms.afms.IAPDocument doc) throws AFMSException { }



  /**
   * @param groupWideDebtorAccountValue Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {033873FE-339F-4D36-B68F-A1384D5DFFC8}
   */
  public void createGroupWideDebtor(com.portrade.ipms.afms.IGroupWideDebtorAccount groupWideDebtorAccountValue, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {842B5052-0005-4866-8530-0DCAD1D14701}
   */
  public void createInterCompanyPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @param notes Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {64E30311-5EC7-426B-96C4-2EF0522578C5}
   */
  public void createNotesReceivable(com.portrade.ipms.afms.IDocument notes) throws AFMSException { }


  /**
   * @param code Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {418B19FE-F246-44CF-8008-47BEFE5530D3}
   */
  public void deleteCompanyDebtorPayment(String code) throws AFMSException { }


  /**
   * @param officeCode Description of the Parameter
   * @param referenceNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E4BFA47A-04B3-43AC-B870-8FC68959863D}
   */
  public void deleteDebtorBankGuarantee(String officeCode, String referenceNumber, IUser user) throws AFMSException {
    BankGuarantee bankGuarantee = null;

    try {
      bankGuarantee = bankGuaranteeHome.findByPrimaryKey(new BankGuaranteePK(officeCode, referenceNumber));

      validateDeleteDebtorBankGuarantee();

      AbstractCriteria[] filter = {new Criteria(BankGuaranteeDAO.FILTER_REFERENCENUMBER, "=", referenceNumber)};
      DAOProxy.setAuditUserInformation("afmsBankGuarantee", "BankGuarantee", officeCode, filter, user);

      bankGuarantee.remove();

      //      bankGuarantee.setDeleted(new Boolean(true));
      //     bankGuarantee.setLastUpdateBy(user.getId());
      //    bankGuarantee.setLastUpdateOn(AFMSUtilities.getCurrentTime());
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
			}
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
  }


  /**
   * @param id Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {2B6A2544-CCE1-4B6E-95CE-CE1B2FAA130C}
   */
  public void deleteGroupWideDebtor(Integer id, com.portrade.ipms.icms.IUser user) throws AFMSException {
    Logger.getInstance().logDebug("delete");
    // Get the remote interface
  }


  /**
   * @param startDate Description of the Parameter
   * @param endDate Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {A683069A-FA32-4360-8D85-B3B1D8CF7068}
   */
  public com.portrade.ipms.afms.bo.AgingReport generateAgingReport(java.util.Date startDate, java.util.Date endDate) throws AFMSException {
    return null;
  }


  /**
   * @param date Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {B3188789-6A28-4A6D-B904-648D075A48F1}
   */
  public java.util.ArrayList generateDuningLetters(java.util.Date date) throws AFMSException {
    return null;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param accountNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {D50136D4-8600-4A89-BA30-010D9CFD4B5D}
   */
  public com.portrade.ipms.afms.ICustomer retrieveDebtorAccount(String officeCode, String accountNumber, IUser user) throws AFMSException {
    com.portrade.ipms.afms.ICustomer bo = new com.portrade.ipms.afms.bo.DebtorAccountValue();

    GeneralLedgerSetup glSetup = null;

    try {
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    String subsidiaryOfficeCode = null;

    try {
      IOffice office = glSetup.retrieveOffice(officeCode, user);
      if (Boolean.TRUE.equals(office.getSubsidiaryLedgerIndicator())) {
        subsidiaryOfficeCode = office.getCode();
      }
      else {
        OfficeDAO dao = (OfficeDAO) DAOProxy.getDAO("Office", user);
        office = dao.retrieveSubsidiaryLedgerParentOffice(officeCode, user);
        if (office != null) {
          subsidiaryOfficeCode = office.getCode();
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.OFFICE_CODE});
        }
      }
    }
    catch (RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.OFFICE_CODE});
    }
    catch (Exception ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      DebtorAccountDAO dao = (DebtorAccountDAO) DAOProxy.getDAO("DebtorAccount", user);
      if (dao != null) {
        //  bo = dao.retrieveDebtorAccount(officeCode, accountNumber);
        // 11/05/2006 THC Change to pass in subsidiaryOfficeCode for BPSB.
        bo = dao.retrieveDebtorAccount(subsidiaryOfficeCode, accountNumber);
        //Jason 15th Dec 2003
        if (bo.getAccountNumber() == null || bo.getAccountNumber().equals("")) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
        }

        if (bo.getDebtorCategory().equals(IConstants.DebCategory.NORMAL) ||
            bo.getDebtorCategory().equals(IConstants.DebCategory.NON_TRADE_NON_STAFF)) {
          try {
            AbstractCriteria[] filter = {
                new Criteria(com.portrade.ipms.afms.dao.BankGuaranteeDAO.FILTER_OFFICE_CODE, "=", bo.getOfficeCode()),
                new Criteria(com.portrade.ipms.afms.dao.BankGuaranteeDAO.FILTER_ACCOUNTNUMBER, "=", bo.getAccountNumber()),
                new Criteria(com.portrade.ipms.afms.dao.BankGuaranteeDAO.FILTER_STARTDATE, "<=", com.portrade.ipms.icms.Date.newInstance(AFMSUtilities.getCurrentTime())),
                new Criteria(com.portrade.ipms.afms.dao.BankGuaranteeDAO.FILTER_ENDDATE, ">=", com.portrade.ipms.icms.Date.newInstance(AFMSUtilities.getCurrentTime()))
                };
            OrderBy[] orderBy = {new OrderBy(com.portrade.ipms.afms.dao.BankGuaranteeDAO.FILTER_ENDDATE)};
            java.util.List bankGuaranteeList = DAOProxy.list("bankGuarantee", bo.getOfficeCode(), user, filter, orderBy);

            //List bankGuaranteeList = new ArrayList(bankGuaranteeHome.findByOfficeCodeAndDebtorAndEndDate(bo.getOfficeCode(), bo.getAccountNumber(), AFMSUtilities.getCurrentTime()));
            if (bankGuaranteeList.size() > 0) {
              IBankGuarantee bankGuarantee = (IBankGuarantee) bankGuaranteeList.get(0);
              bo.setFirstGuaranteeExpiryDate(bankGuarantee.getEndDate());
              java.math.BigDecimal sum_up = new java.math.BigDecimal(0);
              for (int i = 0; i < bankGuaranteeList.size(); i++) {
                bankGuarantee = (IBankGuarantee) bankGuaranteeList.get(i);
                sum_up = sum_up.add(bankGuarantee.getAmount());
              }
              bo.setGuaranteeTotalAmount(sum_up);

              //Chee Seng 18th July 2005, bugId: 12465
              if (bankGuaranteeList.size() > 1) {
                bo.setPortUserGuarantee(Boolean.TRUE);
              }
              else {
                bo.setPortUserGuarantee(Boolean.FALSE);
              }
            }
            else {
              bo.setPortUserGuarantee(Boolean.FALSE);
            }
          }
          catch (java.sql.SQLException ex) {
						if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
							throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
						}
						else {
	            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_ACCOUNTNUMBER});
						}
          }
        }
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
			}
    }

    /*
     * try {
     * DebtorAccount debtorAccount = debtorAccountHome.findByPrimaryKey(new DebtorAccountPK(accountNumber, officeCode));
     * bo.setOfficeCode(debtorAccount.getOfficeCode());
     * bo.setAccountNumber(debtorAccount.getAccountNumber());
     * bo.setAccountCategory(debtorAccount.getAccountCategory());
     * bo.setAccountGroup(debtorAccount.getAccountGroup());
     * bo.setAccountRegistrationDate(debtorAccount.getAccountRegistrationDate());
     * bo.setAccountStatus(debtorAccount.getAccountStatus());
     * bo.setBillingAddressCity(debtorAccount.getBillingAddressCity());
     * bo.setBillingAddressCountry(debtorAccount.getBillingAddressCountry());
     * bo.setBillingAddressLine1(debtorAccount.getBillingAddressLine1());
     * bo.setBillingAddressLine2(debtorAccount.getBillingAddressLine2());
     * bo.setBillingAddressPostCode(debtorAccount.getBillingAddressPostCode());
     * bo.setBillingAddressState(debtorAccount.getBillingAddressState());
     * bo.setCompanyRegistrationNumber(debtorAccount.getCompanyRegistrationNumber());
     * bo.setContactEmail(debtorAccount.getContactEmail());
     * bo.setContactFax(debtorAccount.getContactFax());
     * bo.setContactName(debtorAccount.getContactName());
     * bo.setContactPosition(debtorAccount.getContactPosition());
     * bo.setCostCenterId(debtorAccount.getCostCenterId());
     * bo.setContactTelephone1(debtorAccount.getContactTelephone1());
     * bo.setContactTelephone2(debtorAccount.getContactTelephone2());
     * bo.setCurrencyType(debtorAccount.getCurrencyType());
     * bo.setDebtorCategory(debtorAccount.getDebtorCategory());
     * bo.setDebtorName(debtorAccount.getDebtorName());
     * bo.setDebtorType(debtorAccount.getDebtorType());
     * bo.setElectronicBillPresentment(debtorAccount.isElectronicBillPresentment());
     * bo.setEmployeeNumber(debtorAccount.getEmployeeNumber());
     * bo.setLastSuspendDate(debtorAccount.getLastSuspendDate());
     * bo.setPaymentTermType(debtorAccount.getPaymentTermType());
     * bo.setPortUserGuarantee(debtorAccount.isPortUserGuarantee());
     * bo.setReconAccountId(debtorAccount.getReconAccountId());
     * bo.setRemarks(debtorAccount.getRemarks());
     * bo.setShippingAddressCity(debtorAccount.getShippingAddressCity());
     * bo.setShippingAddressCountry(debtorAccount.getShippingAddressCountry());
     * bo.setShippingAddressLine1(debtorAccount.getShippingAddressLine1());
     * bo.setShippingAddressLine2(debtorAccount.getShippingAddressLine2());
     * bo.setShippingAddressPostCode(debtorAccount.getShippingAddressPostCode());
     * bo.setShippingAddressState(debtorAccount.getShippingAddressState());
     * bo.setShortName(debtorAccount.getShortName());
     * bo.setSurchargeCode(debtorAccount.getSurchargeCode());
     * bo.setTaxCode(debtorAccount.getTaxCode());
     * bo.setTaxIdentificationNumber(debtorAccount.getTaxIdentificationNumber());
     * bo.setDeleted(debtorAccount.isDeleted());
     * bo.setFirstGuaranteeExpiryDate(null);
     * bo.setGuaranteeTotalAmount(new java.math.BigDecimal(0));
     * if(debtorAccount.getDebtorCategory().equals(IConstants.DebCategory.NORMAL) ||
     * debtorAccount.getDebtorCategory().equals(IConstants.DebCategory.NON_TRADE_NON_STAFF)) {
     * try {
     * List bankGuaranteeList = new ArrayList(bankGuaranteeHome.findByOfficeCodeAndDebtorAndEndDate(debtorAccount.getOfficeCode(), debtorAccount.getAccountNumber(), AFMSUtilities.getCurrentTime()));
     * if(bankGuaranteeList.size() > 0) {
     * BankGuarantee bankGuarantee = (BankGuarantee)bankGuaranteeList.get(0);
     * bo.setFirstGuaranteeExpiryDate(bankGuarantee.getEndDate());
     * java.math.BigDecimal sum_up = new java.math.BigDecimal(0);
     * for(int i=0; i<bankGuaranteeList.size(); i++) {
     * bankGuarantee = (BankGuarantee)bankGuaranteeList.get(i);
     * sum_up = sum_up.add(bankGuarantee.getAmount());
     * }
     * bo.setGuaranteeTotalAmount(sum_up);
     * }
     * }
     * catch (javax.ejb.FinderException ex) {
     * /throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[] { BankGuaranteeLabelId.OFFICECODE_AND_ACCOUNTNUMBER });
     * }
     * catch (java.rmi.RemoteException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[] { ex });
     * }
     * }
     * }
     * catch (javax.ejb.FinderException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[] { DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER });
     * }
     * catch (java.rmi.RemoteException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[] { ex });
     * }
     */
    return bo;
  }



  /**
   * @param officeCode Description of the Parameter
   * @param referenceNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {EBA45B39-2759-448A-BAC2-21497943F214}
   */
  public com.portrade.ipms.afms.IBankGuarantee retrieveDebtorBankGuarantee(String officeCode, String referenceNumber, IUser user) throws AFMSException {
    com.portrade.ipms.afms.IBankGuarantee bo = new com.portrade.ipms.afms.bo.BankGuaranteeValue();

    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.BankGuaranteeDAO.FILTER_REFERENCENUMBER, "=", referenceNumber)
          };
      java.util.List results = DAOProxy.list("bankGuarantee", officeCode, user, filter);
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
      }
      bo = (IBankGuarantee) results.get(0);
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param code Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {61B57191-549B-4D20-8F01-817165CA8B1B}
   */
  public com.portrade.ipms.afms.IInvoicePrefix retrieveInvoicePrefix(String code, IUser user) throws AFMSException {
    com.portrade.ipms.afms.IInvoicePrefix bo = new com.portrade.ipms.afms.bo.InvoicePrefixValue();
    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.InvoicePrefixDAO.FILTER_CODE, "=", code)
          };
      java.util.List results = DAOProxy.list("invoicePrefix", ICMSConnector.IGNORE, user, filter);
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoicePrefixLabelId.CODE});
      }
      bo = (IInvoicePrefix) results.get(0);
    }
    catch (java.sql.SQLException fx) {
			if (String.valueOf(fx.getErrorCode()).equals("-244") || String.valueOf(fx.getErrorCode()).equals("-271")) {
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoicePrefixLabelId.CODE});
			}
    }
    return bo;
  }


  /**
   * @param documentNumber Description of the Parameter
   * @param documentDate Description of the Parameter
   * @param postingDate Description of the Parameter
   * @param creationDate Description of the Parameter
   * @param companyCode Description of the Parameter
   * @param createdBy Description of the Parameter
   * @param docType Description of the Parameter
   * @param reference Description of the Parameter
   * @param description Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {BE7BC34E-1FE4-46D7-A395-408CB05C6FF2}
   */
  public java.util.ArrayList searchAccountReceivable(String documentNumber, java.util.Date documentDate, java.util.Date postingDate, java.util.Date creationDate, String companyCode, String createdBy, String docType, String reference, String description) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {F02EE3EF-4AA3-4059-B0E8-DDC5B7767B65}
   */
  public Boolean simulateInterCompanyDebtor(com.portrade.ipms.afms.IPayment payment) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A967D268-0B00-4121-A080-6AC3B106C78C}
   */
  public void updateCompanyDebtorPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {AE846B1D-56B9-4AC9-A881-DB32529F0BD7}
   */
  public void updateDebtorBankGuarantee(com.portrade.ipms.afms.IBankGuarantee bo, IUser user) throws AFMSException {
    BankGuarantee bankGuarantee = null;

    validateUpdateDebtorBankGuarantee(bo);
    try {
      bankGuarantee = bankGuaranteeHome.findByPrimaryKey(new BankGuaranteePK(bo.getOfficeCode(), bo.getReferenceNumber()));
      bankGuarantee.setAccountNumber(bo.getAccountNumber());
      bankGuarantee.setBankCode(bo.getBankCode());
      bankGuarantee.setGuaranteeReference(bo.getGuaranteeReference());
      bankGuarantee.setGuaranteeType(bo.getGuaranteeType());
      bankGuarantee.setAmount(bo.getAmount());
      Logger.getInstance().logDebug("bo.getAmount - " + bo.getAmount());
      bankGuarantee.setStartDate(bo.getStartDate());
      bankGuarantee.setEndDate(bo.getEndDate());
      bankGuarantee.setRemark(bo.getRemark());
      bankGuarantee.setLastUpdateBy(user.getId());
      bankGuarantee.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      bankGuarantee.setDebtorGuarantee(bo.getDebtorGuarantee());
      bankGuarantee.setGuaranteeStatus(bo.getGuaranteeStatus());
      bankGuarantee.setCancellationDate(bo.getCancellationDate());
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
  }


  /**
   * @param groupWideDebtorAccountValue Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {11DA4AAC-33A4-43A9-AA55-A15E26092807}
   */
  public void updateGroupWideDebtor(com.portrade.ipms.afms.IGroupWideDebtorAccount groupWideDebtorAccountValue, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * @param staffAdvance Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {CD8439B5-D16F-47F9-9FD7-0CE4E18E2D99}
   */
  public void updateStaffAdvance(com.portrade.ipms.afms.IStaffAdvance staffAdvance) throws AFMSException { }


  /**
   * @param memo Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {25AE6A50-9628-4E48-9FD1-152E25532BAD}
   */
  public Boolean validateDebitCreditMemo(com.portrade.ipms.afms.IARDocument memo) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {E2C80B01-5E55-4E3F-B6BC-47EC6C2285F9}
   */
  public Boolean validateDebtorInvoicePayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException {
    return null;
  }


  /**
   * @param payment Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {C4C4F33C-B09D-485A-8913-826076791FAA}
   */
  public Boolean validateInterCompanyDebtorPayment(com.portrade.ipms.afms.IPayment payment) throws AFMSException {
    return null;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {689E7FE5-B3AA-431D-B967-669C2C5FF249}
   */
  public java.util.ArrayList createDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    DepositToBank depositToBank = null;
    DepositToBankReceipt depositToBankReceipt = null;
    DepositToBankItem depositToBankItem = null;
    Long nextDocumentNumber = null;
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    IDepositToBankReceipt depositToBankReceiptBO = new DepositToBankReceiptValue();
    IDepositToBankItem depositToBankItemBO = new DepositToBankItemValue();
    java.util.Iterator iterator = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IPostParkedDocument postParkedDocumentInterPMOBO = new PostParkedDocumentValue();
    GLAccountItem glAccountItem = null;
    java.util.ArrayList depositToBankList = new java.util.ArrayList();
    java.util.List documentList = new java.util.ArrayList();
    String bankGLAccount = null;
    GLAccountItem originalGlAccountItem = null;

    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    Logger.getInstance().logDebug("Before validateCreateDepositToBank");
    validateCreateDepositToBank(bo, user);
    Logger.getInstance().logDebug("Before setDepositToBankValue");
    setDepositToBankValue(bo, user);
    Logger.getInstance().logDebug("After setDepositToBankValue");
    

    //Create a dummy header for glaccount item table
    glAccountItemBO = new AbstractGLAccountItemValue();
    glAccountItemBO.copyPropertiesFrom(bo);
    glAccountItemBO.setDebitCreditType(null);
    glAccountItemBO.setAmount(new BigDecimal("0"));
    glAccountItemBO.setAmountInLocalCurrency(new BigDecimal("0"));
    //Chee Seng 16th June 2004, bugId: 6186
    glAccountItemBO.setPostingKey(null);
    //Chee Seng 2nd Feb 2005, bugId: 9691
    //glAccountItemBO.setGLAccount(null);
    postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

    //Jaymee. 10/10/2003: Keep bankGLAccount for use in creating cross-office items
    bankGLAccount = bo.getGLAccount();
    //Hui Mian, 22033 18/05/2007
    try {
      AbstractCriteria[] filter = {
          new Criteria(BankDAO.FILTER_BANK_ACCOUNT_TYPE, "=", IConstants.BankAccountType.CURRENT),
          new Criteria(BankDAO.FILTER_CODE, "=", bo.getBankCode())
          };

      List bankList = DAOProxy.list("bank", com.portrade.ipms.afms.ext.icms.ICMSConnector.IGNORE, user, filter);
      if (bankList.size() > 0) {
        IBank bankBO = (IBank) bankList.get(0);
        bankGLAccount = bankBO.getGLAccount();
        Logger.getInstance().logDebug("bank glaccount = " + bankGLAccount);
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankLabelId.OFFICECODE_AND_COUNTRY_CODE});
			}
    }

    if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
      glAccountItemBO = new AbstractGLAccountItemValue();
      glAccountItemBO.copyPropertiesFrom(bo);
      glAccountItemBO.setOfficeCode(bo.getOfficeCodeOfBankAccount());
      glAccountItemBO.setDocumentNumber(null);
      glAccountItemBO.setDebitCreditType(null);
      glAccountItemBO.setAmount(new BigDecimal("0"));
      glAccountItemBO.setAmountInLocalCurrency(new BigDecimal("0"));
      glAccountItemBO.setCostCenterId(null);
      //Chee Seng 07th June 2004, BugId: 5735
      glAccountItemBO.setDocumentType(TransactionDocumentType.JOURNAL);
      glAccountItemBO.setPostingKey(null);
      //Chee Seng 16th June 2004, bugId: 6186
      glAccountItemBO.setGLAccount(null);
      postParkedDocumentInterPMOBO.addGLAccountItems(glAccountItemBO);
    }

    java.util.List receipts = bo.getReceipts();
    iterator = receipts.iterator();

    IAutomaticAccountAssignment orAutomaticAccountAssignmentBO = new AutomaticAccountAssignmentValue();
    IOffice orOfficeBO = null;

    int previousIsExcludedCount = 0;

    while (iterator.hasNext()) {
      depositToBankReceiptBO = (IDepositToBankReceipt) iterator.next();
      glAccountItemBO = new AbstractGLAccountItemValue();

      if (depositToBankReceiptBO.getBankInSlipNumber() == null || depositToBankReceiptBO.getBankInSlipNumber().equals("")) {
        previousIsExcludedCount = previousIsExcludedCount + 1;
      }
      //    BugId: 16415 THC 20/03/2006 Add in for BPSB  If bankinslip is not mean cannot save this receipt line item as deposittobank to afmsGLAccountItem.  And the
      // record will save to afmsDepositToBankReceipt with approvalStatus = Pending (if the DTBApprovalFlag = true).

      if (depositToBankReceiptBO.getBankInSlipNumber() != null && !depositToBankReceiptBO.getBankInSlipNumber().equals("")) {
        glAccountItemBO.copyPropertiesFrom(depositToBankReceiptBO);
        if (previousIsExcludedCount != 0) {
          glAccountItemBO.setItemNo(new Integer(glAccountItemBO.getItemNo().intValue() - previousIsExcludedCount));
        }
        //glAccountItemBO.setAmount(depositToBankReceiptBO.getOrAmount());

        postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

        if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
          glAccountItemBO = new AbstractGLAccountItemValue();
          glAccountItemBO.copyPropertiesFrom(depositToBankReceiptBO);
          glAccountItemBO.setOfficeCode(bo.getOfficeCodeOfBankAccount());
          glAccountItemBO.setDocumentNumber(null);
          glAccountItemBO.setDocumentType(TransactionDocumentType.JOURNAL);
          glAccountItemBO.setCostCenterId(null);
          //glAccountItemBO.setPostingKey(bo.getPostingKey());
          //glAccountItemBO.setAmount(depositToBankReceiptBO.getOrAmount());

          //Jaymee. 10/10/03. Fix bug 2985, originally retrieved wrong glAccounts to be used in cross-office items
          if (glAccountItemBO.getPostingKey().equals(TransactionPostingKey.JOURNAL_CREDIT)) {
            Logger.getInstance().logDebug("bo.getGLAccount() = " + bo.getGLAccount());
            try {
              orOfficeBO = generalLedgerSetup.retrieveOffice(glAccountItemBO.getOfficeCode(), user);
              orAutomaticAccountAssignmentBO = generalLedgerSetup.retrieveAutomaticAccountAssignment(orOfficeBO.getCOA(), glAccountItemBO.getOfficeCode(), AutomaticAccountDetermination.DEPOSIT_TO_BANK, glAccountItemBO.getPostingKey(), user);
            }
            catch (java.rmi.RemoteException ex) {
              sessionContext.setRollbackOnly();
              throw new javax.ejb.EJBException(ex.toString());
            }
            glAccountItemBO.setGLAccount(orAutomaticAccountAssignmentBO.getGlAccount());
          }
          else if (glAccountItemBO.getPostingKey().equals(TransactionPostingKey.JOURNAL_DEBIT)) {
            glAccountItemBO.setGLAccount(bankGLAccount);
          }
          postParkedDocumentInterPMOBO.addGLAccountItems(glAccountItemBO);
        }

      }
    }

    documentList.add(postParkedDocumentBO.getGLAccountItems());
    if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
      documentList.add(postParkedDocumentInterPMOBO.getGLAccountItems());
    }

    try {
      Logger.getInstance().logDebug("Before postDocuments");
      documentList = commonFunction.postDocuments(documentList, bo.getBudgetActionType(), user);
      Logger.getInstance().logDebug("After postDocuments");
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }

    if (documentList.size() > 0) {
      postParkedDocumentBO.setGLAccountItems((List) documentList.get(0));
      bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));
      depositToBankList.add(bo);
    }

    if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
      postParkedDocumentInterPMOBO.setGLAccountItems((List) documentList.get(1));
      IDepositToBank interOfficeBankBO = new DepositToBankValue();
      interOfficeBankBO.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentInterPMOBO.getGLAccountItems().get(0));
      interOfficeBankBO.setTotalAmount(bo.getTotalAmount());
      interOfficeBankBO.setCollectionOfficerGLAccount(bo.getCollectionOfficerGLAccount());
      interOfficeBankBO.setCollectionOfficerId(bo.getCollectionOfficerId());
      interOfficeBankBO.setFromDate(bo.getFromDate());
      interOfficeBankBO.setToDate(bo.getToDate());
      interOfficeBankBO.setRemittanceAdviceNumber(bo.getRemittanceAdviceNumber());
      interOfficeBankBO.setOfficeCodeOfBankAccount(bo.getOfficeCodeOfBankAccount());
      interOfficeBankBO.setBankCode(bo.getBankCode());
      depositToBankList.add(interOfficeBankBO);
    }

    try {
      depositToBank = depositToBankHome.create(new DepositToBankPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getTotalAmount(), bo.getCollectionOfficerId(), bo.getCollectionOfficerGLAccount(), bo.getRemittanceAdviceNumber(), bo.getOfficeCodeOfBankAccount(), bo.getBankCode(), bo.getOthersCollection(), bo.getAsOfDate(), bo.getDocumentDate(), bo.getReference(), bo.getReferenceType(), bo.getCurrency(), bo.getCostCenterId(), bo.getRemark(), bo.getPostIndicator(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 05th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(depositToBank, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      receipts = bo.getReceipts();
      iterator = receipts.iterator();

      while (iterator.hasNext()) {
        depositToBankReceiptBO = (IDepositToBankReceipt) iterator.next();
        Logger.getInstance().logDebug("THC 27/04/2006 depositToBankReceiptBO.getReasonCode() = " + depositToBankReceiptBO.getReasonCode());
        if ((depositToBankReceiptBO.getReasonCode() != null && !depositToBankReceiptBO.getReasonCode().equals("")) ||
            (depositToBankReceiptBO.getBankInSlipNumber() != null && !depositToBankReceiptBO.getBankInSlipNumber().equals(""))) {
          //17/05/2006 THC Added If include in next run is checked, the line item cannot be proceed for DTB or DTB approval,
          //because for some receipt, they can just exclude it from this run. meaning, this line doesn't need to go through the approval. maybe because of they suspect something wrong of the cheque, then want to bank in by tomorow.
          depositToBankReceipt = depositToBankReceiptHome.create(new DepositToBankReceiptPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), depositToBankReceiptBO.getItemNo()), depositToBankReceiptBO.getOrNumber(), depositToBankReceiptBO.getOrOfficeCode(), depositToBankReceiptBO.getOrFiscalYear(), depositToBankReceiptBO.getOrDocumentNumber(), depositToBankReceiptBO.getOrPaymentType(), depositToBankReceiptBO.getOrPostingDate(), depositToBankReceiptBO.getOrDebtorAccount(), depositToBankReceiptBO.getOrAmount(), depositToBankReceiptBO.getOrCostCenterId(), depositToBankReceiptBO.getOrDocumentType(), depositToBankReceiptBO.getOrChequeNumber(), depositToBankReceiptBO.getOrChequeType(), depositToBankReceiptBO.getBankInSlipNumber(), depositToBankReceiptBO.getReasonCode(), depositToBankReceiptBO.getApprovalStatus(), depositToBankReceiptBO.getTransactionId(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime(), null, null);
          //Chee Seng 05th July 2005, bugId: 11719
          ACRAuditTrail.insertLogAuditTrail(depositToBankReceipt, user);

          //Update depositToBankIndicator
          glAccountItem = gLAccountItemHome.findByPrimaryKey(depositToBankReceiptBO.getId());
          glAccountItem.setDepositToBankIndicator(new Boolean(true));
          //Chee Seng 04rd Aug 2004, BugId: 6839
          glAccountItem.setLastUpdateBy(user.getId());
          glAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());

          //Chee Seng 14th July 2005, bugId: 11952
          //Chee Seng 05th July 2005, bugId: 11719
          AFMSAuditTrail.updateLogAuditTrail(glAccountItem, user);

        }
        if (depositToBankReceiptBO.getBankInSlipNumber() != null && !depositToBankReceiptBO.getBankInSlipNumber().equals("")) {
          //Hui Mian, 22033, 18/05/2007 Should update deposittobankindicator in original OR transaction
          //Update depositToBankIndicator
          originalGlAccountItem = gLAccountItemHome.findByPrimaryKey(depositToBankReceiptBO.getTransactionId());
          originalGlAccountItem.setDepositToBankIndicator(new Boolean(true));
          //Chee Seng 04rd Aug 2004, BugId: 6839
          originalGlAccountItem.setLastUpdateBy(user.getId());
          originalGlAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());

          //Chee Seng 14th July 2005, bugId: 11952
          //Chee Seng 05th July 2005, bugId: 11719
          AFMSAuditTrail.updateLogAuditTrail(originalGlAccountItem, user);
        }
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.ID});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    
    return depositToBankList;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {A67C501B-4868-413B-BCDC-0628E5A1A763}
   */
  public com.portrade.ipms.afms.IDepositToBank retrieveDepositToBank(String officeCode, Integer fiscalYear, Long documentNumber, com.portrade.ipms.icms.IUser user) throws AFMSException {
    IDepositToBank bo = new DepositToBankValue();
    IDepositToBankReceipt item = new DepositToBankReceiptValue();
    IDebtorPayment orItem = new DebtorPaymentValue();
    INonDebtorPayment NonORItem = new NonDebtorPaymentValue();

    try {
      com.portrade.ipms.afms.dao.DepositToBankDAO dao = (com.portrade.ipms.afms.dao.DepositToBankDAO) DAOProxy.getDAO("depositToBank", user);
      if (dao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_OFFICECODE, "=", DepositToBankDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_FISCALYEAR, "=", DepositToBankDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_DOCUMENTNUMBER, "=", DepositToBankDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_GLACCOUNTITEM_DOCUMENTTYPE, "=", TransactionDocumentType.DEPOSIT_TO_BANK),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
            };
        //java.util.List results = DAOProxy.list("depositToBank", user, filter);
        //rocky, bugid 25950, get the hearder information by checking between depositToBank and depositToBankReceipt 
        java.util.List results = dao.retrieveDepositToBank(officeCode,fiscalYear,documentNumber);
        if (results.size() > 0) {
          bo = (IDepositToBank) results.get(0);
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      com.portrade.ipms.afms.dao.DepositToBankReceiptDAO itemDao = (com.portrade.ipms.afms.dao.DepositToBankReceiptDAO) DAOProxy.getDAO("depositToBankReceipt", user);
      if (itemDao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_OFFICECODE, "=", DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_FISCALYEAR, "=", DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_DOCUMENTNUMBER, "=", DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            //new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_ITEMNUMBER, "=", DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_ITEMNUMBER),
			      //new FieldCriteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_ITEMNUMBER, "=", itemNumber),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
						new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_ORNUMBER, "IS NOT NULL", null),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_DOCUMENTTYPE, "=", TransactionDocumentType.DEPOSIT_TO_BANK),
            new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            //new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false)),
			new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
            //new Criteria(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_GLACCOUNTITEM_DEBITCREDITTYPE, "=", DebitCreditType.CREDIT)
            };

        OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.DepositToBankReceiptDAO.FILTER_ITEMNUMBER)};

        //java.util.List results = DAOProxy.list("depositToBankReceipt", user, filter, order);
        java.util.List results = itemDao.retrieveDepositToBankReceipt(officeCode,fiscalYear,documentNumber);
		    Logger.getInstance().logDebug("test result size = " + results.size());
        for (int i = 0; i < results.size(); i++) {
		//for (int i = 0; i < (results.size()/2); i++) {
          item = (IDepositToBankReceipt) results.get(i);
          //BugId:23019 07/08/2007 Jiuan Change RC to User Login Name
          com.portrade.ipms.afms.dao.DebtorPaymentDAO receiptDao = (com.portrade.ipms.afms.dao.DebtorPaymentDAO) DAOProxy.getDAO("debtorPayment", user);
          com.portrade.ipms.afms.dao.NonDebtorPaymentDAO nonDebtorReceiptDao = (com.portrade.ipms.afms.dao.NonDebtorPaymentDAO) DAOProxy.getDAO("nonDebtorPayment", user);
          if (item.getDocumentType() != null && item.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_PAYMENT)) {
            if (receiptDao != null) {
              AbstractCriteria[] orFilter = {
                  new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_OFFICE_CODE, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
                  new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_FISCALYEAR, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
                  new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
                  new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_ORNUMBER, "=", item.getOrNumber()),
                  new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
                  };
              java.util.List orResults = DAOProxy.list("debtorPayment", user, orFilter);
              Logger.getInstance().logDebug("orResults = " + orResults.size());
              orItem = (IDebtorPayment) orResults.get(0);
              Logger.getInstance().logDebug("user login =============" + orItem.getCreatedBy());
              if (orItem.getCreatedBy() != null) {
                String userLogin = receiptDao.retrieveUserLoginName(orItem.getCreatedBy());
                if (userLogin != null) {
                  item.setUserId(userLogin);
                }
              }
            }
          }
          else if (item.getDocumentType() != null && item.getDocumentType().equals(IConstants.TransactionDocumentType.NON_DEBTOR_PAYMENT)) {
            if (nonDebtorReceiptDao != null) {
              AbstractCriteria[] orFilter = {
                  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_OFFICE_CODE, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
                  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_FISCALYEAR, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
                  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
                  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_ORNUMBER, "=", item.getOrNumber()),
                  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
                  };
              java.util.List orResults = DAOProxy.list("nonDebtorPayment", user, orFilter);
              Logger.getInstance().logDebug("orResults = " + orResults.size());
              NonORItem = (INonDebtorPayment) orResults.get(0);
              Logger.getInstance().logDebug("user login =============" + NonORItem.getCreatedBy());
              if (NonORItem.getCreatedBy() != null) {
                String userLogin = receiptDao.retrieveUserLoginName(NonORItem.getCreatedBy());
                if (userLogin != null) {
                  item.setUserId(userLogin);
                }
              }
            }
          }
          bo.addReceipt(item);
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {7DE07C07-95E9-46D3-86D3-FCB5C7A7800E}
   */
  public void updateDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    // Get the remote interface
    CommonFunction commonFunction = null;
    java.util.ArrayList glAccountItemList = new java.util.ArrayList();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
        glAccountItemList = commonFunction.retrieveGLAccountItemByCrossOfficeNumber(bo.getCrossOfficeNumber(), bo.getFiscalYear(), user);
      }
      else {
        glAccountItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      for (int i = 0; i < glAccountItemList.size(); i++) {
        glAccountItemBO = (IAbstractGLAccountItem) glAccountItemList.get(i);
        if (glAccountItemBO.isHeaderIndicator().equals(Boolean.TRUE)) {
          glAccountItemBO.setReference(bo.getReference());
          glAccountItemBO.setRemark(bo.getRemark());
          commonFunction.updateGLAccountItem(glAccountItemBO, user);
        }
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }

  public IDepositToBank deleteDepositToBank(String aOfficeCode, Integer aFiscalYear, Long aDocumentNumber, IUser user) throws AFMSException {
    Logger.getInstance().logDebug("deleteDepositToBank");
    IDepositToBank bo = new DepositToBankValue();
    DepositToBank depositToBank = null;
    DepositToBankReceipt depositToBankReceipt = null;
    IAbstractGLAccountItem glAccountItemBO = null;
    CommonFunction commonFunction = null;
    try {

      Collection items = depositToBankReceiptHome.findByOfficeCodeFiscalYearDocumentNumber(aOfficeCode, aFiscalYear, aDocumentNumber);
      Iterator iterator = items.iterator();
      while (iterator.hasNext()) {
        DepositToBankReceipt item = (DepositToBankReceipt) iterator.next();

        item.remove();
      }
      

      depositToBank = depositToBankHome.findByPrimaryKey(new DepositToBankPK(aOfficeCode, aFiscalYear, aDocumentNumber));
      Logger.getInstance().logDebug("depositToBank ==== " + depositToBank);

      depositToBank.remove();
    }

    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
    return bo;
  }

  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {15F028BF-79E8-4D21-985B-32B87B0372FB}
   */
  public INotesReceivable createParkNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      validateCreateParkNotesReceivable(bo, user);

      java.util.List glItemList = new java.util.ArrayList();

      try {
        // gl item for header
        IAbstractGLAccountItem glAccountItem = new AbstractGLAccountItemValue();
        glAccountItem.setOfficeCode(bo.getOfficeCode());
        glAccountItem.setFiscalYear(bo.getFiscalYear());
        glAccountItem.setDocumentNumber(bo.getDocumentNumber());
        glAccountItem.setItemNo(new Integer(0));
        glAccountItem.setDocumentType(bo.getDocumentType());
        glAccountItem.setDocumentDate(bo.getDocumentDate());
        glAccountItem.setPostingKey(bo.getPostingKey());
        glAccountItem.setPostingPeriod(bo.getPostingPeriod());
        glAccountItem.setPostingDate(bo.getPostingDate());
        glAccountItem.setProcessStatus(bo.getProcessStatus());
        glAccountItem.setReference(bo.getReference());
        glAccountItem.setReferenceType(bo.getReferenceType());
        glAccountItem.setCurrency(bo.getCurrency());
        glAccountItem.setExchangeRate(bo.getExchangeRate());
        glAccountItem.setHeaderIndicator(Boolean.TRUE);
        glAccountItem.setSubledgerAccount(bo.getSubledgerAccount());
        glAccountItem.setDebitCreditType(DebitCreditType.CREDIT);
        glAccountItem.setAmount(bo.getAmount());
        glAccountItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
        glAccountItem.setRemark(bo.getRemark());
        //      glAccountItem.setSubledgerAccountType(PostingAccountType.DEBTOR);

        glItemList.add(glAccountItem);

        for (int i = 0; i < bo.getItems().size(); i++) {
          INotesReceivableItem item = (INotesReceivableItem) bo.getItems().get(i);

          // create GLAccountItem for NotesReceivableItems
          glAccountItem = new AbstractGLAccountItemValue();

          glAccountItem.setOfficeCode(bo.getOfficeCode());
          glAccountItem.setFiscalYear(bo.getFiscalYear());
          glAccountItem.setDocumentNumber(bo.getDocumentNumber());
          glAccountItem.setItemNo(item.getItemNo());
          glAccountItem.setDocumentType(bo.getDocumentType());
          glAccountItem.setDocumentDate(item.getDocumentDate());
          glAccountItem.setPostingKey(item.getPostingKey());
          glAccountItem.setPostingPeriod(bo.getPostingPeriod());
          glAccountItem.setPostingDate(bo.getPostingDate());
          glAccountItem.setReference(bo.getReference());
          glAccountItem.setReferenceType(bo.getReferenceType());
          glAccountItem.setProcessStatus(bo.getProcessStatus());
          glAccountItem.setCurrency(bo.getCurrency());
          glAccountItem.setExchangeRate(bo.getExchangeRate());
          glAccountItem.setHeaderIndicator(new Boolean(false));
          glAccountItem.setGLAccount(item.getGLAccount());
          glAccountItem.setSpecialGLIndicator(item.getSpecialGLIndicator());
          glAccountItem.setAmount(item.getAmount());
          glAccountItem.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
          if (item.isGeneratedIndicator() != null && item.isGeneratedIndicator().booleanValue()) {
            glAccountItem.setRemark(bo.getRemark());
          }
          else {
            glAccountItem.setRemark(item.getRemark());
          }

          // set subledger account for installment items
          if (item.getInstallmentDueDate() != null) {
            glAccountItem.setSubledgerAccount(bo.getSubledgerAccount());
          }
          // add detail item into list
          glItemList.add(glAccountItem);
        }

        try {
          glItemList = cf.parkDocument(glItemList, bo.getBudgetActionType(), user);
        }
        catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
          sessionContext.setRollbackOnly();
          throw ex;
        }

        glAccountItem = (IAbstractGLAccountItem) glItemList.get(0);
        bo.setFiscalYear(glAccountItem.getFiscalYear());
        bo.setDocumentNumber(glAccountItem.getDocumentNumber());

        try {
          // create header
          NotesReceivable aNotesReceivable = notesReceivableHome.create(new NotesReceivablePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()),
              bo.getNumberOfTransaction(), bo.getFrequencyOfTransaction(), bo.getPenaltyGLAccountCode(), bo.getPenaltyAmount(), bo.getInterestGLAccountCode(),
              bo.getInterestAmount(), bo.getInterestPercentage(), bo.getBuiltInInterest(), bo.getVatAmount(), bo.getVatPercentage(), bo.getPaymentTerm(),
              user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        }
        catch (javax.ejb.DuplicateKeyException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{NotesReceivableLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
        catch (javax.ejb.CreateException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{NotesReceivableLabelId.NOTESRECEIVABLE});
        }

        // create NotesReceivableItem
        for (int i = 0; i < bo.getItems().size(); i++) {
          INotesReceivableItem item = (INotesReceivableItem) bo.getItems().get(i);
          item.setOfficeCode(bo.getOfficeCode());
          item.setFiscalYear(bo.getFiscalYear());
          item.setDocumentNumber(bo.getDocumentNumber());

          try {
            NotesReceivableItem notesReceivableItem = notesReceivableItemHome.create(new NotesReceivableItemPK(item.getOfficeCode(), item.getFiscalYear(), item.getDocumentNumber(), item.getItemNo()),
                item.getInstallmentDueDate(), item.isGeneratedIndicator(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
          }
          catch (javax.ejb.DuplicateKeyException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{NotesReceivableItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
          }
          catch (javax.ejb.CreateException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{NotesReceivableItemLabelId.NOTESRECEIVABLEITEM});
          }
        }

        // create NotesReceivableInvoiceItem
        for (int i = 0; i < bo.getInvoiceItems().size(); i++) {
          INotesReceivableInvoiceItem item = (INotesReceivableInvoiceItem) bo.getInvoiceItems().get(i);
          //  item.setInvoiceFiscalYear(bo.getFiscalYear());
          //  item.setInvoiceDocumentNumber(bo.getDocumentNumber());

          try {
            NotesReceivableInvoiceItem notesReceivableInvoiceItem = notesReceivableInvoiceItemHome.create(new NotesReceivableInvoiceItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), item.getInvoiceNumber()),
                item.getInvoiceFiscalYear(), item.getInvoiceDocumentNumber(), item.getInvoiceAmount(), item.getInvoiceDate(), item.getInvoiceDueDate(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
          }
          catch (javax.ejb.DuplicateKeyException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{NotesReceivableInvoiceItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_INVOICE_NUMBER});
          }
          catch (javax.ejb.CreateException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{NotesReceivableInvoiceItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_INVOICE_NUMBER});
          }
        }
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param aOfficeCode Description of the Parameter
   * @param aFiscalYear Description of the Parameter
   * @param aDocumentNumber Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {F733B414-54A0-40E6-AA65-57A267AD07F8}
   */
  public INotesReceivable deleteParkNotesReceivable(String aOfficeCode, Integer aFiscalYear, Long aDocumentNumber, String budgetActionIndicator, IUser user) throws AFMSException {
    INotesReceivable bo = new NotesReceivableValue();
    NotesReceivable notesReceivable = null;
    IAbstractGLAccountItem glAccountItemBO = null;
    CommonFunction commonFunction = null;
    try {
      validateDeleteParkNotesReceivable(aOfficeCode, aFiscalYear, aDocumentNumber, user);

      try {
        commonFunction = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      try {
        commonFunction.deleteParkedDocument(aOfficeCode, aFiscalYear, aDocumentNumber, budgetActionIndicator, user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {872968D8-3E6D-47BD-B229-071DAF7DAC21}
   */
  public INotesReceivable updateParkNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      validateUpdateParkNotesReceivable(bo, user);

      try {
        // remove notesReceivableItems
        Collection items = notesReceivableItemHome.findByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), new Integer(bo.getDocumentNumber().intValue()));
        Iterator iterator = items.iterator();
        while (iterator.hasNext()) {
          NotesReceivableItem item = (NotesReceivableItem) iterator.next();

          AbstractCriteria[] filter = {new Criteria(NotesReceivableItemDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()), new Criteria(NotesReceivableItemDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()), new Criteria(NotesReceivableItemDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()), new Criteria(NotesReceivableItemDAO.FILTER_DOCUMENTNUMBER, "=", bo.getDocumentNumber()), new Criteria(NotesReceivableItemDAO.FILTER_ITEMNUMBER, "=", item.getItemNumber())};
          DAOProxy.setAuditUserInformation("afmsNotesReceivableItem", "NotesReceivableItem", filter, user);

          item.remove();
        }
      }
      catch (java.sql.SQLException ex) {
        sessionContext.setRollbackOnly();
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
				}
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
      }
      catch (javax.ejb.RemoveException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{NotesReceivableItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
      }

      java.util.List glItemList = new java.util.ArrayList();

      IAbstractGLAccountItem glAccountItem = new AbstractGLAccountItemValue();
      glAccountItem.setId(bo.getId());
      glAccountItem.setOfficeCode(bo.getOfficeCode());
      glAccountItem.setFiscalYear(bo.getFiscalYear());
      glAccountItem.setDocumentNumber(bo.getDocumentNumber());
      glAccountItem.setItemNo(new Integer(0));
      glAccountItem.setDocumentType(bo.getDocumentType());
      glAccountItem.setDocumentDate(bo.getDocumentDate());
      glAccountItem.setPostingKey(bo.getPostingKey());
      glAccountItem.setPostingPeriod(bo.getPostingPeriod());
      glAccountItem.setPostingDate(bo.getPostingDate());
      glAccountItem.setReference(bo.getReference());
      glAccountItem.setReferenceType(bo.getReferenceType());
      glAccountItem.setProcessStatus(bo.getProcessStatus());
      glAccountItem.setCurrency(bo.getCurrency());
      glAccountItem.setExchangeRate(bo.getExchangeRate());
      glAccountItem.setHeaderIndicator(new Boolean(true));
      glAccountItem.setSubledgerAccount(bo.getSubledgerAccount());
      glAccountItem.setDebitCreditType(DebitCreditType.CREDIT);
      glAccountItem.setAmount(bo.getAmount());
      glAccountItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
      glAccountItem.setRemark(bo.getRemark());
      //  glAccountItem.setSubledgerAccountType(PostingAccountType.DEBTOR);

      // add header item
      glItemList.add(glAccountItem);

      for (int i = 0; i < bo.getItems().size(); i++) {
        INotesReceivableItem item = (INotesReceivableItem) bo.getItems().get(i);

        item.setOfficeCode(bo.getOfficeCode());
        item.setFiscalYear(bo.getFiscalYear());
        item.setDocumentNumber(bo.getDocumentNumber());

        // create GLAccountItem for NotesReceivableItems
        glAccountItem = new AbstractGLAccountItemValue();

        glAccountItem.setOfficeCode(item.getOfficeCode());
        glAccountItem.setFiscalYear(item.getFiscalYear());
        glAccountItem.setDocumentNumber(item.getDocumentNumber());
        glAccountItem.setItemNo(item.getItemNo());
        glAccountItem.setDocumentType(bo.getDocumentType());
        glAccountItem.setDocumentDate(item.getDocumentDate());
        glAccountItem.setPostingKey(item.getPostingKey());
        glAccountItem.setPostingPeriod(bo.getPostingPeriod());
        glAccountItem.setPostingDate(bo.getPostingDate());
        glAccountItem.setReference(bo.getReference());
        glAccountItem.setReferenceType(bo.getReferenceType());
        glAccountItem.setProcessStatus(bo.getProcessStatus());
        glAccountItem.setCurrency(bo.getCurrency());
        glAccountItem.setExchangeRate(bo.getExchangeRate());
        glAccountItem.setHeaderIndicator(new Boolean(false));
        glAccountItem.setGLAccount(item.getGLAccount());
        glAccountItem.setSpecialGLIndicator(item.getSpecialGLIndicator());
        glAccountItem.setAmount(item.getAmount());
        glAccountItem.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
        if (item.isGeneratedIndicator() != null && item.isGeneratedIndicator().booleanValue()) {
          glAccountItem.setRemark(bo.getRemark());
        }
        else {
          glAccountItem.setRemark(item.getRemark());
        }
        //  glAccountItem.setSubledgerAccountType(PostingAccountType.DEBTOR);

        if (item.getInstallmentDueDate() != null) {
          glAccountItem.setSubledgerAccount(bo.getSubledgerAccount());
        }
        glItemList.add(glAccountItem);
      }
      try {
        cf.updateDocument(glItemList, bo.getBudgetActionType(), user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }

      try {
        for (int i = 0; i < bo.getItems().size(); i++) {
          INotesReceivableItem item = (INotesReceivableItem) bo.getItems().get(i);

          // create notesReceivableItems
          NotesReceivableItem notesReceivableItem = notesReceivableItemHome.create(new NotesReceivableItemPK(item.getOfficeCode(), item.getFiscalYear(), item.getDocumentNumber(), item.getItemNo()),
              item.getInstallmentDueDate(), item.isGeneratedIndicator(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        }
      }
      catch (javax.ejb.DuplicateKeyException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{NotesReceivableItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
      }
      catch (javax.ejb.CreateException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{NotesReceivableItemLabelId.NOTESRECEIVABLEITEM});
      }
    }
    catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {147B7737-02D7-465D-89AD-8A39E8440B16}
   */
  public void updatePostedNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      validateUpdatePostedNotesReceivable(bo, user);

      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      java.util.List glItemList = new java.util.ArrayList();
      try {
        IAbstractGLAccountItem glAccountItem = cf.retrieveGLAccountItem(bo.getId(), user);
        // update master
        glAccountItem.setReference(bo.getReference());
        glAccountItem.setReferenceType(bo.getReferenceType());
        glAccountItem.setRemark(bo.getRemark());

        glItemList.add(glAccountItem);

        // update details
        List items = bo.getItems();
        for (int i = 0; i < items.size(); i++) {
          INotesReceivableItem itemBo = (INotesReceivableItem) items.get(i);

          glAccountItem = cf.retrieveGLAccountItem(itemBo.getId(), user);
          glAccountItem.setReference(bo.getReference());
          glAccountItem.setReferenceType(bo.getReferenceType());
          if (itemBo.isGeneratedIndicator() != null && itemBo.isGeneratedIndicator().booleanValue()) {
            glAccountItem.setRemark(bo.getRemark());
          }
          else {
            glAccountItem.setRemark(itemBo.getRemark());
          }
          glItemList.add(glAccountItem);
        }
        cf.updateDocument(glItemList, bo.getBudgetActionType(), user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param aOfficeCode Description of the Parameter
   * @param aFiscalYear Description of the Parameter
   * @param aDocumentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {A93F8D19-37B3-491B-B608-DA0FDFCB8266}
   */
  public com.portrade.ipms.afms.INotesReceivable retrieveNotesReceivable(String aOfficeCode, Integer aFiscalYear, Long aDocumentNumber, IUser user) throws AFMSException {
    com.portrade.ipms.afms.INotesReceivable bo = new NotesReceivableValue();

    try {
      AbstractCriteria[] filter = {
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_OFFICECODE, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_FISCALYEAR, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_DOCUMENTNUMBER, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_OFFICECODE, "=", aOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_FISCALYEAR, "=", aFiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableDAO.FILTER_DOCUMENTNUMBER, "=", aDocumentNumber)
          };
      java.util.List results = DAOProxy.list("NotesReceivable", user, filter);

      if (results.size() > 0) {
        bo = (INotesReceivable) results.get(0);
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      AbstractCriteria[] itemFilter = {
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_OFFICECODE, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_FISCALYEAR, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_DOCUMENTNUMBER, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new FieldCriteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_ITEMNUMBER, "=", NotesReceivableDAO.FILTER_GLACCOUNTITEM_ITEMNUMBER),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false)),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_OFFICECODE, "=", aOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_FISCALYEAR, "=", aFiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_DOCUMENTNUMBER, "=", aDocumentNumber),
          };

      OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.NotesReceivableItemDAO.FILTER_DOCUMENTNUMBER, false)};

      java.util.List itemResults = DAOProxy.list("NotesReceivableItem", user, itemFilter, order);

      for (int i = 0; i < itemResults.size(); i++) {
        INotesReceivableItem item = (INotesReceivableItem) itemResults.get(i);
        bo.addItem(item);
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {556ED133-AEE2-4636-9223-EF73067E0C43}
   */
  public com.portrade.ipms.afms.INotesReceivable generateNotesReceivableItems(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    GeneralLedgerSetup glSetup = null;
    CommonFunction cf = null;
    AccountPayableManager ap = null;

    try {
      try {
        glSetup = generalLedgerSetupHome.create();
        ap = accountPayableHome.create();
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      bo.setFiscalYear(cf.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));

      bo = setNotesReceivableInvoiceItemValues(bo, user);
      validateGenerateParkNotesReceivable(bo, user);

      BigDecimal aInvoiceAmount = new BigDecimal(0.00);
      for (int i = 0; i < bo.getInvoiceItems().size(); i++) {
        INotesReceivableInvoiceItem invoiceItemBo = (INotesReceivableInvoiceItem) bo.getInvoiceItems().get(i);
        aInvoiceAmount = aInvoiceAmount.add(invoiceItemBo.getInvoiceAmount());
      }

      ICalculateExchangeRateAmount exchangeRate = cf.calculateExchangeRateAmount(aInvoiceAmount, null, null, bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
      bo.setExchangeRate(exchangeRate.getExchangeRate());
      bo.setAmount(exchangeRate.getAmount());
      bo.setAmountInLocalCurrency(exchangeRate.getAmountLocalCurrency().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION));
      bo.setProcessStatus(ProcessStatus.PARK);

      BigDecimal aBuiltInInterest = calculateBuiltInInterest(bo, user);
      bo.setBuiltInInterest(aBuiltInInterest);

      aInvoiceAmount = aInvoiceAmount.add(bo.getPenaltyAmount()).add(bo.getInterestAmount()).add(bo.getBuiltInInterest());

      INotesReceivableItem item = new NotesReceivableItemValue();
      int itemNo = 1;

      // to get the COA for AutomaticAccountAssignment
      IOffice office = glSetup.retrieveOffice(bo.getOfficeCode(), user);

      // create interest item
      if ((bo.getInterestAmount() != null) && (bo.getInterestAmount().compareTo(new BigDecimal(0)) > 0)) {
        item = new NotesReceivableItemValue();
        item.setItemNo(new Integer(itemNo++));
        item.setGeneratedIndicator(new Boolean(true));
        item.setDocumentDate(bo.getDocumentDate());

        item.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
        item.setDebitCreditType(glSetup.retrievePostingKey(item.getPostingKey(), user).getDebitCredit());
        item.setGLAccount(glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTERST_NOTES_RECEIVABLE, TransactionPostingKey.JOURNAL_CREDIT, user).getGlAccount());
        item.setAmount(bo.getInterestAmount());
        item.setAmountInLocalCurrency(cf.calculateExchangeRateAmount(item.getAmount(), null, bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), item.getDocumentDate(), user).getAmountLocalCurrency());
        bo.setInterestGLAccountCode(item.getGLAccount());
        bo.addItem(item);
      }

      // create penalty item
      if ((bo.getPenaltyAmount() != null) && (bo.getPenaltyAmount().compareTo(new BigDecimal(0)) > 0)) {
        item = new NotesReceivableItemValue();
        item.setItemNo(new Integer(itemNo++));
        item.setGeneratedIndicator(new Boolean(true));
        item.setDocumentDate(bo.getDocumentDate());

        item.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
        item.setDebitCreditType(glSetup.retrievePostingKey(item.getPostingKey(), user).getDebitCredit());
        item.setGLAccount(glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.PENALTY, TransactionPostingKey.JOURNAL_CREDIT, user).getGlAccount());
        item.setAmount(bo.getPenaltyAmount());
        item.setAmountInLocalCurrency(cf.calculateExchangeRateAmount(item.getAmount(), null, bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), item.getDocumentDate(), user).getAmountLocalCurrency());
        bo.setPenaltyGLAccountCode(item.getGLAccount());
        bo.addItem(item);
      }

      // create builtInInterest item
      if ((bo.getBuiltInInterest() != null) && (bo.getBuiltInInterest().compareTo(new BigDecimal(0)) > 0)) {
        item = new NotesReceivableItemValue();
        item.setItemNo(new Integer(itemNo++));
        item.setGeneratedIndicator(new Boolean(true));
        item.setDocumentDate(bo.getDocumentDate());

        item.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
        item.setDebitCreditType(glSetup.retrievePostingKey(item.getPostingKey(), user).getDebitCredit());
        item.setGLAccount(glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTERST_NOTES_RECEIVABLE, TransactionPostingKey.JOURNAL_CREDIT, user).getGlAccount());
        item.setAmount(bo.getBuiltInInterest());
        item.setAmountInLocalCurrency(cf.calculateExchangeRateAmount(item.getAmount(), null, bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), item.getDocumentDate(), user).getAmountLocalCurrency());

        bo.addItem(item);
      }

      IPaymentTerm paymentTermBO = glSetup.retrievePaymentTerm(bo.getPaymentTerm(), user);
      int paymentTermDays = ((IPaymentTermTerm) paymentTermBO.getTerms().get(0)).getNumOfDay().intValue();

      BigDecimal aInstallment = aInvoiceAmount.divide(new BigDecimal(bo.getNumberOfTransaction().toString()), IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION);

      java.util.Calendar aDocumentDate = AFMSUtilities.getCalendar(bo.getDocumentDate());
      java.util.Calendar aNextDocumentDate = AFMSUtilities.getCalendar(bo.getDocumentDate());
      java.util.Calendar aNextDueDate = AFMSUtilities.getCalendar(bo.getDocumentDate());

      boolean isLastDay = false;
      if (aDocumentDate.get(Calendar.DAY_OF_MONTH) == aDocumentDate.getActualMaximum(Calendar.DAY_OF_MONTH)) {
        isLastDay = true;
      }

      ISpecialGLIndicator specialGLIndicator = glSetup.retrieveSpecialGLIndicator(ICMSConnector.IGNORE, SpecialGLIndicator.NOTES_RECEIVABLE, user);
      String aGLAccount = specialGLIndicator.getGLAccount();

      // create items
      for (int i = 0; i < bo.getNumberOfTransaction().intValue(); i++) {
        item = new NotesReceivableItemValue();
        item.setItemNo(new Integer(itemNo++));
        item.setGeneratedIndicator(new Boolean(true));

        if (i == 0) {
          aNextDocumentDate.set(aDocumentDate.get(Calendar.YEAR), aDocumentDate.get(Calendar.MONTH), aDocumentDate.get(Calendar.DAY_OF_MONTH));
          aNextDueDate.set(aDocumentDate.get(Calendar.YEAR), aDocumentDate.get(Calendar.MONTH), aDocumentDate.get(Calendar.DAY_OF_MONTH) + paymentTermDays);
        }
        else {
          if (bo.getFrequencyOfTransaction().compareTo(new Integer(30)) == 0) {
            aNextDocumentDate.set(aDocumentDate.get(Calendar.YEAR), aDocumentDate.get(Calendar.MONTH), aDocumentDate.get(Calendar.DAY_OF_MONTH));
            aNextDocumentDate.add(Calendar.MONTH, i);
            if (isLastDay) {
              aNextDocumentDate.set(Calendar.DAY_OF_MONTH, aNextDocumentDate.getActualMaximum(Calendar.DAY_OF_MONTH));
            }
          }
          else {
            aNextDocumentDate.set(aNextDocumentDate.get(Calendar.YEAR), aNextDocumentDate.get(Calendar.MONTH), aNextDocumentDate.get(Calendar.DAY_OF_MONTH) + bo.getFrequencyOfTransaction().intValue());
          }
          aNextDueDate.set(aNextDocumentDate.get(Calendar.YEAR), aNextDocumentDate.get(Calendar.MONTH), aNextDocumentDate.get(Calendar.DAY_OF_MONTH) + paymentTermDays);
        }
        item.setDocumentDate(new java.sql.Date(aNextDocumentDate.getTime().getTime()));
        item.setInstallmentDueDate(new java.sql.Date(aNextDueDate.getTime().getTime()));
        item.setGLAccount(aGLAccount);
        item.setSpecialGLIndicator(SpecialGLIndicator.NOTES_RECEIVABLE);
        item.setPostingKey(TransactionPostingKey.NOTES_RECEIVABLE);

        if (aInvoiceAmount.compareTo(aInstallment) > 0) {
          item.setAmount(aInstallment);
        }
        else {
          item.setAmount(aInvoiceAmount);
        }

        exchangeRate = cf.calculateExchangeRateAmount(item.getAmount(), null, bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), item.getDocumentDate(), user);
        item.setAmountInLocalCurrency(exchangeRate.getAmountLocalCurrency().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION));
        bo.addItem(item);

        aInvoiceAmount = aInvoiceAmount.subtract(aInstallment);
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {90C2C675-C191-4E24-B0A1-34F106A58062}
   */
  public BigDecimal calculateBuiltInInterest(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    CommonFunction cf = null;

    BigDecimal aTotal = new BigDecimal(0.00);
    BigDecimal aInterest = new BigDecimal(0.00);

    for (int i = 0; i < bo.getInvoiceItems().size(); i++) {
      INotesReceivableInvoiceItem invoiceItemBo = (INotesReceivableInvoiceItem) bo.getInvoiceItems().get(i);
      aTotal = aTotal.add(invoiceItemBo.getInvoiceAmount());
    }
    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }
      BigDecimal aVatAmount = cf.calculateTax(bo.getVatPercentage(), aTotal, user);
      bo.setVatAmount(aVatAmount);
      BigDecimal aPrincipal = aTotal.subtract(aVatAmount);
      // amount for each payment
      BigDecimal aAmount = aPrincipal.divide(new BigDecimal(bo.getNumberOfTransaction().toString()), IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION);

      java.util.Calendar aDocumentDate = AFMSUtilities.getCalendar(bo.getDocumentDate());
      java.util.Calendar aDueDate = AFMSUtilities.getCalendar(bo.getDocumentDate());
      java.util.Calendar aNextDueDate = AFMSUtilities.getCalendar(bo.getDocumentDate());
      java.util.Calendar aDummyDate = AFMSUtilities.getCalendar(bo.getDocumentDate());
      Integer aDays = new Integer(0);
      boolean isLastDay = false;
      if (aDocumentDate.get(Calendar.DAY_OF_MONTH) == aDocumentDate.getActualMaximum(Calendar.DAY_OF_MONTH)) {
        isLastDay = true;
      }

      for (int i = 0; i < bo.getNumberOfTransaction().intValue(); i++) {
        aDays = bo.getFrequencyOfTransaction();
        if (i == 0) {
          if (bo.getFrequencyOfTransaction().compareTo(new Integer(30)) == 0) {
            aDueDate.set(aDocumentDate.get(Calendar.YEAR), aDocumentDate.get(Calendar.MONTH), aDocumentDate.get(Calendar.DAY_OF_MONTH));
            aDueDate.add(Calendar.MONTH, i + 1);
            if (isLastDay) {
              aDueDate.set(Calendar.DAY_OF_MONTH, aDueDate.getActualMaximum(Calendar.DAY_OF_MONTH));
            }
            aDummyDate.set(aDueDate.get(Calendar.YEAR), aDueDate.get(Calendar.MONTH), 1);
            aDummyDate.add(Calendar.DAY_OF_MONTH, -1);

            aDays = new Integer(aDueDate.get(Calendar.DAY_OF_MONTH) + (aDummyDate.get(Calendar.DAY_OF_MONTH) - aDocumentDate.get(Calendar.DAY_OF_MONTH)));
          }
          else {
            aDueDate.set(Calendar.DAY_OF_MONTH, aDocumentDate.get(Calendar.DAY_OF_MONTH) + bo.getFrequencyOfTransaction().intValue());
          }
        }
        else {
          aNextDueDate.set(aDueDate.get(Calendar.YEAR), aDueDate.get(Calendar.MONTH), aDueDate.get(Calendar.DAY_OF_MONTH));
          if (bo.getFrequencyOfTransaction().compareTo(new Integer(30)) == 0) {
            aNextDueDate.set(aDocumentDate.get(Calendar.YEAR), aDocumentDate.get(Calendar.MONTH), aDocumentDate.get(Calendar.DAY_OF_MONTH));
            aNextDueDate.add(java.util.Calendar.MONTH, i + 1);
            if (isLastDay) {
              aNextDueDate.set(Calendar.DAY_OF_MONTH, aNextDueDate.getActualMaximum(Calendar.DAY_OF_MONTH));
            }
            aDummyDate.set(aNextDueDate.get(Calendar.YEAR), aNextDueDate.get(Calendar.MONTH), 1);
            aDummyDate.add(Calendar.DAY_OF_MONTH, -1);

            aDays = new Integer(aNextDueDate.get(Calendar.DAY_OF_MONTH) + (aDummyDate.get(Calendar.DAY_OF_MONTH) - aDueDate.get(Calendar.DAY_OF_MONTH)));
          }
          else {
            aNextDueDate.set(Calendar.DAY_OF_MONTH, aNextDueDate.get(Calendar.DAY_OF_MONTH) + bo.getFrequencyOfTransaction().intValue());
          }
          aDueDate.set(aNextDueDate.get(Calendar.YEAR), aNextDueDate.get(Calendar.MONTH), aNextDueDate.get(Calendar.DAY_OF_MONTH));
        }

        // principal * days / 360 * interestPercentage / 100
        aInterest = aInterest.add(aPrincipal.multiply(bo.getInterestPercentage())
            .multiply(new BigDecimal(aDays.toString()))
            .divide(new BigDecimal(36000), IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION));

        aPrincipal = aPrincipal.subtract(aAmount);
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return aInterest;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @exception ValidationException Description of the Exception
   * @modelguid {0F6D2ED6-A470-4825-9177-B1ABBFE99EE6}
   */
  public com.portrade.ipms.afms.IDebtorDebitCreditMemo createParkDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, com.portrade.ipms.icms.IUser user) throws AFMSException, ValidationException {
    CommonFunction commonFunction = null;
    DebtorDebitCreditMemo debtorDebitCreditMemo = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IDebtorDebitCreditMemoItem item = new DebtorDebitCreditMemoItemValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    DebtorDebitCreditMemoItem debtorDebitCreditMemoItem = null;
    java.util.List glAccountItemList = new java.util.ArrayList();
    GeneralLedgerSetup glSetup = null;
    boolean createJournalFlag = false;
    java.util.ArrayList exceptionList = new java.util.ArrayList();
    boolean conversionFlag = false;

    try {
      glSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      setDebtorDebitCreditMemoValue(bo, user);
      validateCreateParkDebtorCreditNote(bo, user);
    }
    catch (com.portrade.ipms.afms.exceptions.CustomerAccountBalanceNotEnoughException ex) {
      // karen October 12 2006 BugId: 18550
      exceptionList.add(
          new com.portrade.ipms.afms.exceptions.ExtraInfoException(
          new com.portrade.ipms.afms.exceptions.CustomerAccountBalanceNotEnoughException(new Object[]{}),
          new Object[]{"", "", "", ""}));

      com.portrade.ipms.afms.exceptions.AFMSListException listException = new com.portrade.ipms.afms.exceptions.AFMSListException(exceptionList);
      sessionContext.setRollbackOnly();

      throw listException;
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    //Chee Seng 08th Dec 2004, bugId: 8866. Move from setDebtorDebitCreditMemoValue().
    try {
      if (bo.getCreditNoteNumber() != null && !bo.getCreditNoteNumber().equals("")) {
        /*
		AbstractCriteria[] filter = {
		  new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
		  new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber())
		};
		//AbstractCriteria[] filter = {new Criteria(DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber())};
		List ddcmList = DAOProxy.list("DebtorDebitCreditMemo", user, filter);
				*/
        DebtorDebitCreditMemoDAO dao = (DebtorDebitCreditMemoDAO) DAOProxy.getDAO("debtorDebitCreditMemo", user);
        List ddcmList = dao.findByOfficeCodeCreditNoteNumber(bo.getOfficeCode(), bo.getCreditNoteNumber());

        if (ddcmList.size() > 0) {
          throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{IConstants.DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
        }
      }
      else {
        generateDebitCreditNoteNumber(bo, user);
        //Chee Seng 28 May 2004
        if (bo.getCreditNoteNumber() == null || bo.getCreditNoteNumber().length() == 0) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
        }
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
			}
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    glAccountItemBO = new AbstractGLAccountItemValue();
    glAccountItemBO.copyPropertiesFrom(bo);
    glAccountItemBO.setGlobalNumber(bo.getCreditNoteNumber());
    if (bo.isConversionIndicator() != null && bo.isConversionIndicator().booleanValue()) {
      conversionFlag = true;
    }

    /*	16th Sep 2006 Derek BugId: 18323 BEGIN
    if(bo.getEnabledReissueInvInd().equals(Boolean.TRUE)){
		glAccountItemBO.setClearedAmount(bo.getAmount());
    }
	16th Sep 2006 Derek BugId: 18323 END */
    postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

		//Hui Mian 29/04/2008
		
		List revenueList = new ArrayList();
		revenueList.addAll(bo.getItems());
		try{
			if (bo.getFiscalYear() == null) {
						bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
			}
			if (bo.getPostingPeriod() == null) {
						bo.setPostingPeriod(commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user));
			}
			Logger.getInstance().logDebug("bo.getFiscalYear === " + bo.getFiscalYear());
			Logger.getInstance().logDebug("bo.getPostingPeriod === " + bo.getPostingPeriod());
		  commonFunction.insertToRevenueTbl(bo.getDocumentType(), bo.getFiscalYear(),
		  bo.getPostingPeriod(), bo.getSCN(),revenueList, user); 
      Logger.getInstance().logDebug("after insertToRevenueTbl");
		}
		catch (java.rmi.RemoteException ex) {
		  throw new javax.ejb.EJBException(ex.toString());
		}    

		//End		
    for (int i = 0; i < bo.getItems().size(); i++) {
      item = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
      glAccountItemBO = new AbstractGLAccountItemValue();
      glAccountItemBO.copyPropertiesFrom(item);
      glAccountItemBO.setGlobalNumber(bo.getCreditNoteNumber());
      glAccountItemBO.setDirectPostingJournalFlag(bo.getDirectPostingJournalFlag());
      if (bo.getDirectPostingJournalFlag() != null && bo.getDirectPostingJournalFlag().equals(Boolean.TRUE)) {
        glAccountItemBO.setInterOfficePostingIndicator(new Boolean(true));
      }
      Logger.getInstance().logDebug("item.getCostCenterOfficeCode() = " + item.getCostCenterOfficeCode());
      
      if (item.getCostCenterOfficeCode() != null && !item.getCostCenterOfficeCode().equals("")) {
        if (!bo.getOfficeCode().equals(item.getCostCenterOfficeCode())) {
          //journal required
          createJournalFlag = true;
          glAccountItemBO.setInterOfficePostingIndicator(new Boolean(true));
          try {
            IOffice office = glSetup.retrieveOffice(item.getCostCenterOfficeCode(), user);

            Logger.getInstance().logDebug("coa =" + office.getCOA());
            Logger.getInstance().logDebug("item.getCostCenterOfficeCode() =" + item.getCostCenterOfficeCode());
            Logger.getInstance().logDebug("item.getPostingKey() = " + item.getPostingKey());
            
            
            IAutomaticAccountAssignment automaticAccountAssignment = glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getCostCenterOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, item.getPostingKey(), user);
            

            glAccountItemBO.setGLAccount(automaticAccountAssignment.getGlAccount());
            glAccountItemBO.setCostCenterId(null);

          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

        }
      }
      postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
    }

    try {
      //Joseph Lim 4/3/2004
      Logger.getInstance().logDebug("Direct Posting");
      if ((com.portrade.ipms.icms.SystemProfile.get(com.portrade.ipms.icms.SystemProfile.DEBTOR_INVOICE_DIRECT_POSTING_FLAG)).equals(Boolean.TRUE.toString())) {
        glAccountItemList = commonFunction.postDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
      }
      else {
        glAccountItemList = commonFunction.parkDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
      }
      Logger.getInstance().logDebug("After Direct Posting");
      postParkedDocumentBO.setGLAccountItems(glAccountItemList);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));

    try {
      debtorDebitCreditMemo = debtorDebitCreditMemoHome.create(new DebtorDebitCreditMemoPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getCreditNoteNumber(), bo.getDocumentDueDate(), bo.getTranslationDate(), bo.getPaymentTerm(), bo.isPaymentBlock(), bo.getTransactionType(), bo.getInvoiceNumber(), bo.getFullInvoiceAmountFlag(), bo.getEnabledReissueInvInd(), bo.getSurchargeCount(), bo.getLastSurchargeDate(), bo.getLastSurchargeDueDate(), bo.getProtestStatus(), bo.getProtestStartDate(), bo.getProtestEndDate(), bo.getCnDnType(), bo.getSCN(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 7th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(debtorDebitCreditMemo, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        item = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
        debtorDebitCreditMemoItem = debtorDebitCreditMemoItemHome.create(new DebtorDebitCreditMemoItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), item.getItemNo()), item.getInvoiceItemNumber(), item.getQuantity(), item.getUOM(), item.getQuantity2(), item.getUOM2(), item.getUnitPrice(), item.getTariffCode(), item.getCostCenterOfficeCode(), item.getDifferentOfficeGLAccount(), item.getDifferentOfficeCostCenterId(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        ACRAuditTrail.insertLogAuditTrail(debtorDebitCreditMemoItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    if (createJournalFlag) {
      createJournalForDebitCreditNote(bo, user);
    }

    try {
      if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")) {
      	Logger.getInstance().logDebug("If invoicenumber is not null in here");
      	Logger.getInstance().logDebug("documenttype = " + bo.getDocumentType());

        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
        //new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
            //new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber())
            };
        java.util.List results = DAOProxy.list("invoice", user, filter);

        if (results.size() > 0) {
          IARDocument invoiceBo = (IARDocument) results.get(0);
          try {
            Logger.getInstance().logDebug("bo.getTransactionType()==" + bo.getTransactionType());
            Logger.getInstance().logDebug("bo.getFullInvoiceAmountFlag()==" + bo.getFullInvoiceAmountFlag());
            Logger.getInstance().logDebug("bo.getAmount()==" + bo.getAmount());
            Logger.getInstance().logDebug("conversionFlag==" + conversionFlag);
            //BugId: 17786 karen 31 July 2006
            if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {
			  //25/3/2010 - erma bugId: 28368 - only update header for invoices
              //List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(invoiceBo.getOfficeCode(), invoiceBo.getFiscalYear(), invoiceBo.getDocumentNumber()));
			  List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByItemNumber(invoiceBo.getOfficeCode(), invoiceBo.getFiscalYear(), invoiceBo.getDocumentNumber(), new Integer(0)));

              if (collectionGLAccountItemList.size() <= 0) {
                sessionContext.setRollbackOnly();
                throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
              }
              else {
                for (int i = 0; i < collectionGLAccountItemList.size(); i++) {
                  GLAccountItem collectionGLAccountItem = (GLAccountItem) collectionGLAccountItemList.get(i);
				  				GLAccountItem gl = gLAccountItemHome.findByPrimaryKey(collectionGLAccountItem.getId());

                  if (conversionFlag) {
                    if (i == 0) {
                      BigDecimal creditNoteAmount = bo.getAmount();
                      BigDecimal invoiceAmount = collectionGLAccountItem.getAmount();

                      Logger.getInstance().logDebug("bo.getAmount()==" + bo.getAmount());
                      Logger.getInstance().logDebug("collectionGLAccountItem.getAmount()==" + collectionGLAccountItem.getAmount());

                      if (creditNoteAmount.compareTo(invoiceAmount) == 0) {
                        bo.setFullInvoiceAmountFlag(Boolean.TRUE);
                      }
                      else {
                        bo.setFullInvoiceAmountFlag(Boolean.FALSE);
                      }
                    }
                  }
                  if (bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)) {
                    //BugId:20545 karen 14 March 2007
                    gl.setClearedAmount(bo.getAmount().add(invoiceBo.getClearedAmount() != null ? invoiceBo.getClearedAmount() : new BigDecimal(0)));
                    gl.setClearedRefDocumentNumber(bo.getDocumentNumber());
                    gl.setClearedRefFiscalYear(bo.getFiscalYear());
                    gl.setLastUpdateBy(user.getId());
                    gl.setLastUpdateOn(AFMSUtilities.getCurrentTime());
                  }
                  else {
                    //Hui Mian, 11/04/2007, bugId:21205 CN should not automatic offset if not full amount
                    //collectionGLAccountItem.setClearedAmount(bo.getAmount().add(invoiceBo.getClearedAmount()!=null? invoiceBo.getClearedAmount():new BigDecimal(0)));
                    Logger.getInstance().logDebug("collectionGLAccountItem.getAmount()==" + collectionGLAccountItem.getAmount());

                    gl.setLastUpdateBy(user.getId());
                    gl.setLastUpdateOn(AFMSUtilities.getCurrentTime());
                  }
                }

              }
            }
            if (invoiceBo.getProtestStatus() != null) {
              if (invoiceBo.getProtestStatus().equals(ProtestStatus.PROTEST)) {
                Invoice invoice = invoiceHome.findByPrimaryKey(new InvoicePK(invoiceBo.getCustomerType(), invoiceBo.getOfficeCode(), invoiceBo.getFiscalYear(), invoiceBo.getDocumentNumber()));
                invoice.setProtestStatus(ProtestStatus.VALID);
                invoice.setLastUpdateBy(user.getId());
                invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
                ACRAuditTrail.updateLogAuditTrail(invoice, user);

                ProtestInvoice protestInvoice = protestInvoiceHome.findByInvoiceNumber(invoiceBo.getInvoiceNumber());
                protestInvoice.setProtestEndDate(bo.getPostingDate());
                protestInvoice.setProtestStatus(ProtestStatus.VALID);
                protestInvoice.setLastUpdateBy(user.getId());
                protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
                ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);

              }
              else if (invoiceBo.getProtestStatus().equals(ProtestStatus.VALID)) {
                //karen BugId: 20102 10 January 2007
                if (conversionFlag) {
                  ProtestInvoice protestInvoice = protestInvoiceHome.findByInvoiceNumber(invoiceBo.getInvoiceNumber());
                  protestInvoice.setProtestStartDate(bo.getProtestStartDate());
                  protestInvoice.setProtestEndDate(bo.getProtestEndDate());
                  protestInvoice.setLastUpdateBy(user.getId());
                  protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
                  ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);
                }
              }
            }

            Logger.getInstance().logDebug("invoiceBo.getExternalSystemType()=" + invoiceBo.getExternalSystemType());
            Logger.getInstance().logDebug("bo.getEnabledReissueInvInd()=" + bo.getEnabledReissueInvInd());
            Logger.getInstance().logDebug("bo.getInvoiceNumber()=" + bo.getInvoiceNumber());
            /* Hui Mian, 26/06/2007, bugid: 22417 No need to update back pbis
					if(invoiceBo.getExternalSystemType() != null && invoiceBo.getExternalSystemType().equals(ExternalSystemType.POM)){
						if(bo.getEnabledReissueInvInd().equals(Boolean.TRUE)){
							ACRToPBISConnector.updateInvalidIndAndInvalidRefNo(user.getIcmsSession(),bo.getInvoiceNumber(),bo.getCreditNoteNumber());
						}
					}else{
						if(bo.getEnabledReissueInvInd().equals(Boolean.TRUE)){
							ACRToVIMSConnector.updateBLorSONumber(user.getIcmsSession(),bo.getInvoiceNumber(),com.portrade.ipms.icms.Date.newInstance(bo.getDocumentDate()),null, null,null, true);
						}
					}
					*/
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
        //25/03/2010 erma bugId: 28391 - add for surcharge Invoice 
        else {
        	Logger.getInstance().logDebug("In surcharge");
        	AbstractCriteria[] surchargeFilter = {
        		new FieldCriteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_OFFICECODE, "=", SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
        		new FieldCriteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_FISCALYEAR, "=", SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
        		new FieldCriteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_DOCUMENTNUMBER, "=", SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
        		new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
        		new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber())
        	};
        	java.util.List surchargeResults = DAOProxy.list("surchargeInvoice", user, surchargeFilter);
        	if(surchargeResults.size() > 0){
        		ISurchargeInvoice surchargeInvoiceBO = (ISurchargeInvoice) surchargeResults.get(0);
        		try{
					Logger.getInstance().logDebug("bo.getTransactionType()==" + bo.getTransactionType());
					Logger.getInstance().logDebug("bo.getFullInvoiceAmountFlag()==" + bo.getFullInvoiceAmountFlag());
					Logger.getInstance().logDebug("bo.getAmount()==" + bo.getAmount());
					Logger.getInstance().logDebug("conversionFlag==" + conversionFlag);
					if(bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_CREDIT_NOTES)){
						//List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(surchargeInvoiceBO.getOfficeCode(), surchargeInvoiceBO.getFiscalYear(), surchargeInvoiceBO.getDocumentNumber()));
						List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByItemNumber(surchargeInvoiceBO.getOfficeCode(), surchargeInvoiceBO.getFiscalYear(), surchargeInvoiceBO.getDocumentNumber(), new Integer(0)));
						if(collectionGLAccountItemList.size() <= 0){
							sessionContext.setRollbackOnly();
							throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
						}
						else{
							for(int i=0; i<collectionGLAccountItemList.size(); i++){
								GLAccountItem collectionGLAccountItem = (GLAccountItem) collectionGLAccountItemList.get(i);
								GLAccountItem gl = gLAccountItemHome.findByPrimaryKey(collectionGLAccountItem.getId());
								if(conversionFlag){
									if(i==0){
										BigDecimal creditNoteAmount = bo.getAmount();
										BigDecimal invoiceAmount = collectionGLAccountItem.getAmount();
										if(creditNoteAmount.compareTo(invoiceAmount) == 0){
											bo.setFullInvoiceAmountFlag(Boolean.TRUE);
										}
										else{
											bo.setFullInvoiceAmountFlag(Boolean.FALSE);
										}
									}
								}
								if(bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)){
									gl.setClearedAmount(bo.getAmount().add(surchargeInvoiceBO.getClearedAmount() != null ? surchargeInvoiceBO.getClearedAmount() : new BigDecimal(0)));
								    gl.setClearedRefDocumentNumber(bo.getDocumentNumber());
								    gl.setClearedRefFiscalYear(bo.getFiscalYear());
								    gl.setLastUpdateBy(user.getId());
								    gl.setLastUpdateOn(AFMSUtilities.getCurrentTime());
								}
								else{
									gl.setLastUpdateBy(user.getId());
									gl.setLastUpdateOn(AFMSUtilities.getCurrentTime());									
								}
							}
						}
					}
					if(surchargeInvoiceBO.getProtestStatus() != null){
						if(surchargeInvoiceBO.getProtestStatus().equals(ProtestStatus.PROTEST)){
							Logger.getInstance().logDebug("rundate = " + surchargeInvoiceBO.getRunDate());
							SurchargeInvoice surInvoice = surchargeInvoiceHome.findByPrimaryKey(new SurchargeInvoicePK(surchargeInvoiceBO.getDocumentNumber(), surchargeInvoiceBO.getFiscalYear(), surchargeInvoiceBO.getOfficeCode(), surchargeInvoiceBO.getRunDate()));
							surInvoice.setProtestStatus(ProtestStatus.VALID);
							surInvoice.setLastUpdateBy(user.getId());
							surInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
							ACRAuditTrail.updateLogAuditTrail(surInvoice, user);

							ProtestInvoice protestInvoice = protestInvoiceHome.findByInvoiceNumber(surchargeInvoiceBO.getInvoiceNumber());
							protestInvoice.setProtestEndDate(bo.getPostingDate());
							protestInvoice.setProtestStatus(ProtestStatus.VALID);
							protestInvoice.setLastUpdateBy(user.getId());
							protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
							ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);
						}
						else if(surchargeInvoiceBO.getProtestStatus().equals(ProtestStatus.VALID)){
						if(conversionFlag){
							ProtestInvoice protestInvoice = protestInvoiceHome.findByInvoiceNumber(surchargeInvoiceBO.getInvoiceNumber());
							protestInvoice.setProtestStartDate(bo.getProtestStartDate());
							protestInvoice.setProtestEndDate(bo.getProtestEndDate());
							protestInvoice.setLastUpdateBy(user.getId());
							protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
							ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);
						}
					}
					
				   }	
        		}
				catch (javax.ejb.FinderException ex) {
							sessionContext.setRollbackOnly();
							throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
						  }
						  catch (java.rmi.RemoteException ex) {
							sessionContext.setRollbackOnly();
							throw new javax.ejb.EJBException(ex.toString());
						  }
        	}

        	else {
					AbstractCriteria[] debitNoteFilter = {
							new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
							new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
							new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
							new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
							new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
					//new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
							//new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()),
							new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getInvoiceNumber())
							};
					java.util.List debitNoteResults = DAOProxy.list("debtorDebitCreditMemo", user, debitNoteFilter);

					if (debitNoteResults.size() > 0) {
						IDebtorDebitCreditMemo debitNoteBo = (IDebtorDebitCreditMemo) debitNoteResults.get(0);
						try {
							Logger.getInstance().logDebug("bo.getTransactionType()==" + bo.getTransactionType());
							Logger.getInstance().logDebug("bo.getFullInvoiceAmountFlag()==" + bo.getFullInvoiceAmountFlag());
							Logger.getInstance().logDebug("bo.getAmount()==" + bo.getAmount());
							Logger.getInstance().logDebug("conversionFlag==" + conversionFlag);
							//BugId: 17786 karen 31 July 2006
							if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {

								List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(debitNoteBo.getOfficeCode(), debitNoteBo.getFiscalYear(), debitNoteBo.getDocumentNumber()));

								if (collectionGLAccountItemList.size() <= 0) {
									sessionContext.setRollbackOnly();
									throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
								}
								else {
									for (int i = 0; i < collectionGLAccountItemList.size(); i++) {
										GLAccountItem collectionGLAccountItem = (GLAccountItem) collectionGLAccountItemList.get(i);
										if (conversionFlag) {
											if (i == 0) {
												BigDecimal creditNoteAmount = bo.getAmount();
												BigDecimal invoiceAmount = collectionGLAccountItem.getAmount();

												Logger.getInstance().logDebug("bo.getAmount()==" + bo.getAmount());
												Logger.getInstance().logDebug("collectionGLAccountItem.getAmount()==" + collectionGLAccountItem.getAmount());

												if (creditNoteAmount.compareTo(invoiceAmount) == 0) {
													bo.setFullInvoiceAmountFlag(Boolean.TRUE);
												}
												else {
													bo.setFullInvoiceAmountFlag(Boolean.FALSE);
												}
											}
										}
										if (bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)) {
											//BugId:20545 karen 14 March 2007
											collectionGLAccountItem.setClearedAmount(bo.getAmount().add(debitNoteBo.getClearedAmount() != null ? debitNoteBo.getClearedAmount() : new BigDecimal(0)));
											collectionGLAccountItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
											collectionGLAccountItem.setClearedRefFiscalYear(bo.getFiscalYear());
											collectionGLAccountItem.setLastUpdateBy(user.getId());
											collectionGLAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
										}
										else {
											//Hui Mian, 11/04/2007, bugId:21205 CN should not automatic offset if not full amount
											//collectionGLAccountItem.setClearedAmount(bo.getAmount().add(invoiceBo.getClearedAmount()!=null? invoiceBo.getClearedAmount():new BigDecimal(0)));
											Logger.getInstance().logDebug("collectionGLAccountItem.getAmount()==" + collectionGLAccountItem.getAmount());

											collectionGLAccountItem.setLastUpdateBy(user.getId());
											collectionGLAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
										}
									}

								}
							}
							if (debitNoteBo.getProtestStatus() != null) {
								if (debitNoteBo.getProtestStatus().equals(ProtestStatus.PROTEST)) {
									DebtorDebitCreditMemo debitNote = debtorDebitCreditMemoHome.findByPrimaryKey(new DebtorDebitCreditMemoPK(debitNoteBo.getOfficeCode(), debitNoteBo.getFiscalYear(), debitNoteBo.getDocumentNumber()));
									debitNote.setProtestStatus(ProtestStatus.VALID);
									debitNote.setLastUpdateBy(user.getId());
									debitNote.setLastUpdateOn(AFMSUtilities.getCurrentTime());
									ACRAuditTrail.updateLogAuditTrail(debitNote, user);

									ProtestInvoice protestInvoice = protestInvoiceHome.findByCreditNoteNumber(debitNoteBo.getCreditNoteNumber());
									protestInvoice.setProtestEndDate(bo.getPostingDate());
									protestInvoice.setProtestStatus(ProtestStatus.VALID);
									protestInvoice.setLastUpdateBy(user.getId());
									protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
									ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);

								}
								else if (debitNoteBo.getProtestStatus().equals(ProtestStatus.VALID)) {
									//karen BugId: 20102 10 January 2007
									if (conversionFlag) {
										ProtestInvoice protestInvoice = protestInvoiceHome.findByCreditNoteNumber(debitNoteBo.getCreditNoteNumber());
										protestInvoice.setProtestStartDate(bo.getProtestStartDate());
										protestInvoice.setProtestEndDate(bo.getProtestEndDate());
										protestInvoice.setLastUpdateBy(user.getId());
										protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
										ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);
									}
								}
							}

							Logger.getInstance().logDebug("invoiceBo.getExternalSystemType()=" + debitNoteBo.getExternalSystemType());
							Logger.getInstance().logDebug("bo.getEnabledReissueInvInd()=" + bo.getEnabledReissueInvInd());
							Logger.getInstance().logDebug("bo.getInvoiceNumber()=" + bo.getInvoiceNumber());
							/* Hui Mian, 26/06/2007, bugid: 22417 No need to update back pbis
						if(invoiceBo.getExternalSystemType() != null && invoiceBo.getExternalSystemType().equals(ExternalSystemType.POM)){
							if(bo.getEnabledReissueInvInd().equals(Boolean.TRUE)){
								ACRToPBISConnector.updateInvalidIndAndInvalidRefNo(user.getIcmsSession(),bo.getInvoiceNumber(),bo.getCreditNoteNumber());
							}
						}else{
							if(bo.getEnabledReissueInvInd().equals(Boolean.TRUE)){
								ACRToVIMSConnector.updateBLorSONumber(user.getIcmsSession(),bo.getInvoiceNumber(),com.portrade.ipms.icms.Date.newInstance(bo.getDocumentDate()),null, null,null, true);
							}
						}
						*/
						}
						catch (javax.ejb.FinderException ex) {
							sessionContext.setRollbackOnly();
							throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
						}
						catch (java.rmi.RemoteException ex) {
							sessionContext.setRollbackOnly();
							throw new javax.ejb.EJBException(ex.toString());
						}
					}        	
        }
      }
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
			}
    }
    /*catch (ValidationException ex) {
		sessionContext.setRollbackOnly();
		throw ex;
	}*/
    //karen 28 September 2006 for report
    if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("") && bo.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_CREDIT_NOTES) &&
    //Hui Mian, 11/04/2007, bugId:21205 CN should not automatic offset if not full amount
        bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)) {
      IDebtorClearingTransaction debtorClearingTransactionBO = null;
      debtorClearingTransactionBO = new DebtorClearingTransactionValue();
      debtorClearingTransactionBO.setOfficeCode(bo.getOfficeCode());
      debtorClearingTransactionBO.setFiscalYear(bo.getFiscalYear());
      debtorClearingTransactionBO.setDocumentNumber(bo.getDocumentNumber());
      debtorClearingTransactionBO.setFiscalYear1(bo.getFiscalYear());
      debtorClearingTransactionBO.setDocumentNumber1(bo.getDocumentNumber());
      debtorClearingTransactionBO.setFiscalYear2(bo.getClearedRefFiscalYear() != null ? bo.getClearedRefFiscalYear() : new Integer(0));
      debtorClearingTransactionBO.setDocumentNumber2(bo.getClearedRefDocumentNumber() != null ? bo.getClearedRefDocumentNumber() : new Long(0));
      debtorClearingTransactionBO.setItemNumber1(bo.getItemNo());
      debtorClearingTransactionBO.setItemNumber2(bo.getItemNo());
      debtorClearingTransactionBO.setDocumentDate(bo.getDocumentDate());
      debtorClearingTransactionBO.setDebitCreditType1(bo.getDebitCreditType());
      debtorClearingTransactionBO.setDebitCreditType2(IConstants.DebitCreditType.DEBIT);
      debtorClearingTransactionBO.setClearedAmount(bo.getClearedAmount());
      debtorClearingTransactionBO.setClearedAmountInLocalCurrency((bo.getClearedAmount() != null ? bo.getClearedAmount() : new BigDecimal(0)).multiply(bo.getExchangeRate()));

      try {
        com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO dao = (com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO) DAOProxy.getDAO("debtorClearingTransaction", user);
        dao.createDebtorClearingTransaction(debtorClearingTransactionBO, user);
      }
      catch (SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorClearingTransactionLabelId.ID});
				}
      }
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {06124522-9FFF-4071-BEDC-31BD4BA7D741}
   */
  public com.portrade.ipms.afms.IDebtorDebitCreditMemo deleteParkDebtorCreditNote(String officeCode, Integer fiscalYear, Long documentNumber, String budgetActionIndicator, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    java.util.ArrayList debtorDebitCreditMemoList = new java.util.ArrayList();
    java.util.ArrayList glAccountItemList = new java.util.ArrayList();
    com.portrade.ipms.afms.IDebtorDebitCreditMemo bo = new DebtorDebitCreditMemoValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateDeleteParkDebtorDebitCreditNote();
      commonFunction.deleteParkedDocument(officeCode, fiscalYear, documentNumber, budgetActionIndicator, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {BEB7EC3D-0D1D-4DCC-87D7-0FCABB9CAD86}
   */
  public com.portrade.ipms.afms.IDebtorDebitCreditMemo updateParkDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DebtorDebitCreditMemo debtorDebitCreditMemo = null;
    DebtorDebitCreditMemoItem debtorDebitCreditMemoItem = null;
    java.util.ArrayList debtorDebitCreditMemoItemList = new java.util.ArrayList();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    IDebtorDebitCreditMemoItem debtorDebitCreditMemoItemBO = new DebtorDebitCreditMemoItemValue();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      setDebtorDebitCreditMemoValue(bo, user);
      validateUpdateParkDebtorCreditNote(bo, user);
    }
    catch (RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex.getMessage()});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      debtorDebitCreditMemoItemList = new java.util.ArrayList(debtorDebitCreditMemoItemHome.findByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), new Integer(bo.getDocumentNumber().toString())));
      if (debtorDebitCreditMemoItemList != null) {
        for (int i = 0; i < debtorDebitCreditMemoItemList.size(); i++) {
          debtorDebitCreditMemoItem = (DebtorDebitCreditMemoItem) debtorDebitCreditMemoItemList.get(i);

          //Chee Seng 7th July 2005, bugId: 11719
          ACRAuditTrail.deleteLogAuditTrail(debtorDebitCreditMemoItem, user);
          /*
          AbstractCriteria[] filter = {new Criteria(DebtorDebitCreditMemoItemDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()), new Criteria(DebtorDebitCreditMemoItemDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()), new Criteria(DebtorDebitCreditMemoItemDAO.FILTER_DOCUMENTNUMBER, "=", bo.getDocumentNumber()), new Criteria(DebtorDebitCreditMemoItemDAO.FILTER_ITEMNUMBER, "=", debtorDebitCreditMemoItem.getItemNumber())};
          DAOProxy.setAuditUserInformation("afmsDebtorDebitCreditMemoItem", "DebtorDebitCreditMemoItem", filter, user);
					*/
          debtorDebitCreditMemoItem.remove();
        }
      }
    }

    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Assign credit notes header to glaccount item header
    glAccountItemBO = new AbstractGLAccountItemValue();
    glAccountItemBO.copyPropertiesFrom(bo);
    postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

    //Assign credit notes item to glaccount item detail
    for (int i = 0; i < bo.getItems().size(); i++) {
      debtorDebitCreditMemoItemBO = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
      glAccountItemBO = new AbstractGLAccountItemValue();
      glAccountItemBO.copyPropertiesFrom(debtorDebitCreditMemoItemBO);
      postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
    }

    try {
      java.util.List glAccountItemList = commonFunction.updateDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
      postParkedDocumentBO.setGLAccountItems(glAccountItemList);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));

    try {
      debtorDebitCreditMemo = debtorDebitCreditMemoHome.findByPrimaryKey(new DebtorDebitCreditMemoPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
      debtorDebitCreditMemo.setTranslationDate(bo.getTranslationDate());
      debtorDebitCreditMemo.setDocumentDueDate(bo.getDocumentDueDate());
      debtorDebitCreditMemo.setPaymentTerm(bo.getPaymentTerm());
      debtorDebitCreditMemo.setPaymentBlock(bo.isPaymentBlock());
	  debtorDebitCreditMemo.setCnDnType(bo.getCnDnType());
	  debtorDebitCreditMemo.setSCN(bo.getSCN());
      debtorDebitCreditMemo.setLastUpdateBy(user.getId());
      debtorDebitCreditMemo.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 7th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(debtorDebitCreditMemo, user);
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        debtorDebitCreditMemoItemBO = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
        debtorDebitCreditMemoItem = debtorDebitCreditMemoItemHome.create(new DebtorDebitCreditMemoItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), debtorDebitCreditMemoItemBO.getItemNo()), debtorDebitCreditMemoItemBO.getInvoiceItemNumber(), debtorDebitCreditMemoItemBO.getQuantity(), debtorDebitCreditMemoItemBO.getUOM(), debtorDebitCreditMemoItemBO.getQuantity2(), debtorDebitCreditMemoItemBO.getUOM2(), debtorDebitCreditMemoItemBO.getUnitPrice(), debtorDebitCreditMemoItemBO.getTariffCode(), debtorDebitCreditMemoItemBO.getCostCenterOfficeCode(), debtorDebitCreditMemoItemBO.getDifferentOfficeGLAccount(), debtorDebitCreditMemoItemBO.getDifferentOfficeCostCenterId(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        //Chee Seng 7th July 2005, bugId: 11719
        ACRAuditTrail.insertLogAuditTrail(debtorDebitCreditMemoItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {870CCF22-2B27-4EE9-BA16-A5CFC4B230C8}
   */
  public void updatePostedDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    java.util.ArrayList debtorDebitCreditMemoList = new java.util.ArrayList();
    IDebtorDebitCreditMemoItem debtorDebitCreditMemoItemBO = new DebtorDebitCreditMemoItemValue();
    IDebtorDebitCreditMemoItem item = new DebtorDebitCreditMemoItemValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateUpdatePostedDebtorCreditNote(bo, user);
      debtorDebitCreditMemoList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);

      for (int j = 0; j < debtorDebitCreditMemoList.size(); j++) {
        glAccountItemBO = (IAbstractGLAccountItem) debtorDebitCreditMemoList.get(j);
        //update master
        if (glAccountItemBO.isHeaderIndicator().equals(Boolean.TRUE)) {
          glAccountItemBO.setReference(bo.getReference());
          glAccountItemBO.setReferenceType(bo.getReferenceType());
          glAccountItemBO.setRemark(bo.getRemark());
        }
        //update detail
        else {
          for (int i = 0; i < bo.getItems().size(); i++) {
            debtorDebitCreditMemoItemBO = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
            if (debtorDebitCreditMemoItemBO.getItemNo().compareTo(glAccountItemBO.getItemNo()) == 0) {
              glAccountItemBO.setRemark(debtorDebitCreditMemoItemBO.getRemark());
            }
          }
        }
        //commonFunction.updateGLAccountItem(glAccountItemBO, user);
        postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
      }
      commonFunction.updateDocument(postParkedDocumentBO.getGLAccountItems(), user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {CFE39059-38ED-4F1E-BA14-BAEAF783C3D9}
   */
  public com.portrade.ipms.afms.IDebtorDebitCreditMemo retrieveDebtorCreditNote(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    com.portrade.ipms.afms.IDebtorDebitCreditMemo bo = new DebtorDebitCreditMemoValue();
    com.portrade.ipms.afms.IDebtorDebitCreditMemoItem item = new DebtorDebitCreditMemoItemValue();

    try {
      com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO dao = (com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO) DAOProxy.getDAO("debtorDebitCreditMemo", user);
      if (dao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
            };

        java.util.List results = DAOProxy.list("debtorDebitCreditMemo", user, filter);

        if (results.size() > 0) {
          bo = (IDebtorDebitCreditMemo) results.get(0);
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO itemDao = (com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO) DAOProxy.getDAO("debtorDebitCreditMemoItem", user);
      if (itemDao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoItemDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoItemDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoItemDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_ITEMNUMBER, "=", DebtorDebitCreditMemoItemDAO.FILTER_GLACCOUNTITEM_ITEMNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false)),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
            };

        OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoItemDAO.FILTER_ITEMNUMBER)};

        java.util.List results = DAOProxy.list("debtorDebitCreditMemoItem", user, filter, order);

        if (results != null && results.size() > 0) {
          if (!Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_TAX_CODE_FLAG))) {
            item = (IDebtorDebitCreditMemoItem) results.get(0);

            if (item.isTaxIndicator() != null && item.isTaxIndicator().equals(Boolean.TRUE)) {
              if (item.getParentItemNumber() != null && item.getParentItemNumber().doubleValue() == 0) {
                bo.setTaxAmount(item.getAmount());
                bo.setTaxAmountInLocalCurrency(item.getAmountInLocalCurrency());
                results.remove(0);

              }
            }
          }

          Iterator iterator = results.iterator();
          while (iterator.hasNext()) {
            IDebtorDebitCreditMemoItem debtorDebitCreditMemoItem = (IDebtorDebitCreditMemoItem) iterator.next();
            debtorDebitCreditMemoItem.setCnDnQuantity1(debtorDebitCreditMemoItem.getQuantity());
            debtorDebitCreditMemoItem.setCnDnQuantity2(debtorDebitCreditMemoItem.getQuantity2());
            //Hui Mian 21/11/2006, bugId: 18372
            Logger.getInstance().logDebug("debtorDebitCreditMemoItem.getDifferentOfficeGLAccount() = " + debtorDebitCreditMemoItem.getDifferentOfficeGLAccount());
            if (debtorDebitCreditMemoItem.getDifferentOfficeGLAccount() != null && !debtorDebitCreditMemoItem.getDifferentOfficeGLAccount().equals("")) {
              debtorDebitCreditMemoItem.setGLAccount(debtorDebitCreditMemoItem.getDifferentOfficeGLAccount());
            }
            if (debtorDebitCreditMemoItem.getDifferentOfficeCostCenterId() != null && !debtorDebitCreditMemoItem.getDifferentOfficeCostCenterId().equals("")) {
              debtorDebitCreditMemoItem.setCostCenterId(debtorDebitCreditMemoItem.getDifferentOfficeCostCenterId());
            }

            if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")) {
              InvoiceItemDAO invoiceItemDao = (InvoiceItemDAO) DAOProxy.getDAO("InvoiceItem", user);

              java.util.List invoiceItemList = invoiceItemDao.listInvoiceItemByDebitCreditNoteInvoiceItemNumber(officeCode, fiscalYear, bo.getInvoiceNumber(), debtorDebitCreditMemoItem.getInvoiceItemNumber());

              if (invoiceItemList != null && invoiceItemList.size() > 0) {
                IInvoiceItem invoiceItem = (IInvoiceItem) invoiceItemList.get(0);
                debtorDebitCreditMemoItem.setInvoiceAmount(invoiceItem.getAmount());
                debtorDebitCreditMemoItem.setInvoiceAmountInLocalCurrency(invoiceItem.getAmountInLocalCurrency());
				//if (invoiceItem.isTaxIndicator() != null && invoiceItem.isTaxIndicator().equals(Boolean.TRUE)) {
				if ((invoiceItem.getTaxAmount() !=null) && invoiceItem.getTaxAmount().compareTo(new BigDecimal(0))==1) {
				  debtorDebitCreditMemoItem.setInvoiceTaxAmount(invoiceItem.getTaxAmount());
				  debtorDebitCreditMemoItem.setInvoiceTaxAmountInLocalCurrency(invoiceItem.getTaxAmountInLocalCurrency());
				}
                debtorDebitCreditMemoItem.setInvoiceQuantity1(invoiceItem.getQuantity());
                debtorDebitCreditMemoItem.setInvoiceQuantity2(invoiceItem.getQuantity2());
                debtorDebitCreditMemoItem.setInvoiceBillUnit1(invoiceItem.getUOM());
                debtorDebitCreditMemoItem.setInvoiceBillUnit2(invoiceItem.getUOM2());
                debtorDebitCreditMemoItem.setTariffCode(invoiceItem.getTariffCode());
                debtorDebitCreditMemoItem.setInvoiceItemNumber(invoiceItem.getItemNo());
              }

            }

            bo.addItem(debtorDebitCreditMemoItem);
          }
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {30167810-0CB8-4464-838A-CE6BF1BBDBE3}
   */
  public com.portrade.ipms.afms.IARDocument createParkPomsDebtorInvoice(com.portrade.ipms.afms.IARDocument bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    Logger.getInstance().logDebug("createParkPomsDebtorInvoice");
    java.sql.Date currentDate = null;
    BigDecimal amount = new BigDecimal(0);
    String postingKey = null;
    String documentType = null;
    BigDecimal totalAmount = new BigDecimal(0);
    BigDecimal totalAmountInLocalCurrency = new BigDecimal(0);
    Invoice invoice = null;
    InvoiceItem invoiceItem = null;
    IInvoiceItem item = null;
    CommonFunction commonFunction = null;
    IAbstractGLAccountItem accountItemBO = new AbstractGLAccountItemValue();
    ICustomer customerBO = new DebtorAccountValue();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    java.util.ArrayList invoiceList = new java.util.ArrayList();
    java.util.List glAccountItemList = new java.util.ArrayList();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      //validateCreateParkDebtorInvoice(bo, user);
      //validateParkDebtorInvoice(bo, user);
      bo.setCustomerType(CustomerType.DEBTOR);

      currentDate = java.sql.Date.valueOf(String.valueOf(AFMSUtilities.getCalendar().get(Calendar.YEAR)) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.MONTH) + 1) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.DATE)));
      bo.setDocumentDate(currentDate);
      bo.setPostingDate(currentDate);

      if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")) {
        try {
          AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber())
              };

          java.util.List results = DAOProxy.list("invoice", user, filter);

          if (results.size() > 0) {
            throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
          }
        }
        catch (java.sql.SQLException fe) {
					if (String.valueOf(fe.getErrorCode()).equals("-244") || String.valueOf(fe.getErrorCode()).equals("-271")) {
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
					}
        }
      }
      else {
        if (bo.getInvoicePrefix() != null && !bo.getInvoicePrefix().equals("")) {
          generateInvoiceNumber(bo, user);
        }
      }

      bo.setCurrency(DefaultValue.BASE_CURRENCY);

      //retrieve paymentTerm account
      customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      bo.setPaymentTerm(customerBO.getPaymentTerm());

      bo.setPostingKey(TransactionPostingKey.DEBTOR_INVOICE);
      bo.setDocumentType(TransactionDocumentType.DEBTOR_INVOICE);

    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    /*
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
    */
    for (int i = 0; i < bo.getItems().size(); i++) {
      item = (IInvoiceItem) bo.getItems().get(i);

      item.setCustomerType(bo.getCustomerType());
      item.setOfficeCode(bo.getOfficeCode());
      item.setItemNo(new Integer(i + 1));
			item.setScn(bo.getSCN());
      //ITariff tariff = ICMSConnector.getTariff(user.getIcmsSession(), item.getTariffCode());

      //assign value from invoice item to account item detail
      accountItemBO = new AbstractGLAccountItemValue();
      accountItemBO.copyPropertiesFrom(item);
      //accountItemBO.setGLAccount(tariff.getCreditGL());
      accountItemBO.setDocumentType(bo.getDocumentType());
      accountItemBO.setDocumentDate(bo.getDocumentDate());
      accountItemBO.setPostingDate(bo.getPostingDate());
      accountItemBO.setProcessStatus(bo.getProcessStatus());
      accountItemBO.setCurrency(bo.getCurrency());
      accountItemBO.setAccountType(PostingAccountType.DEBTOR);
      accountItemBO.setHeaderIndicator(new Boolean(false));

      if (accountItemBO.getPostingKey().equals(TransactionPostingKey.JOURNAL_CREDIT)) {
        amount = amount.add(item.getAmount());
      }
      else {
        amount = amount.subtract(item.getAmount());
      }
      if (accountItemBO.isTaxIndicator() == null || accountItemBO.isTaxIndicator().booleanValue() == false) {
        accountItemBO.setTaxIndicator(null);
      }
      if (accountItemBO.getParentItemNumber() == null || accountItemBO.getParentItemNumber().compareTo(new Integer(0)) == 0) {
        accountItemBO.setParentItemNumber(null);
      }

      postParkedDocumentBO.addGLAccountItems(accountItemBO);
    }

    if (bo.getAmountInLocalCurrency() == null) {
      bo.setAmount(amount);
    }

    //Assign value from invoice to glaccount item header
    if (bo.isTaxIndicator() == null || bo.isTaxIndicator().equals(Boolean.FALSE)) {
      bo.setTaxIndicator(null);
    }
    accountItemBO = new AbstractGLAccountItemValue();
    accountItemBO.copyPropertiesFrom(bo);
    accountItemBO.setHeaderIndicator(new Boolean(true));
    accountItemBO.setGLAccount(customerBO.getReconAccountId());
    postParkedDocumentBO.getGLAccountItems().add(0, accountItemBO);

    if (bo.getExternalSystemType() != null && bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
      try {
        glAccountItemList = commonFunction.postDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
        postParkedDocumentBO.setGLAccountItems(glAccountItemList);
      }
      catch (AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        sessionContext.setRollbackOnly();
        throw new javax.ejb.EJBException(ex.toString());
      }
    }
    else {
      try {
        glAccountItemList = commonFunction.parkDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
        postParkedDocumentBO.setGLAccountItems(glAccountItemList);
      }
      catch (AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        sessionContext.setRollbackOnly();
        throw new javax.ejb.EJBException(ex.toString());
      }
    }

    bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));

    if (bo.getExternalSystemType() == null || !bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
      if (bo.isProceedIndicator() == null || !bo.isProceedIndicator().equals(Boolean.TRUE)) {
        //Chee Seng 16th Aug 2005, bugId: 13103
        IOverridingApproval overridingApprovalBO = checkCreditLimit(customerBO, bo.getAmount(), bo.getFiscalYear(), true, null, user);
        BigDecimal overRideAmount = overridingApprovalBO.getAmount();
        if (overRideAmount.compareTo(new BigDecimal("0")) != 0) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
        }
      }
    }

    /*
     * for(int i=0; i<bo.getItems().size(); i++) {
     * item = (IInvoiceItem) bo.getItems().get(i);
     * item.copyPropertiesFrom((IAbstractGLAccountItem)postParkedDocumentBO.getGLAccountItems().get(i+1));
     * }
     */
    //create invoice master
    try {
      //Chee Seng 3rd Feb 2005, bugId: 9790
      invoice = invoiceHome.create(new InvoicePK(bo.getCustomerType(), bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getInvoiceNumber(), bo.getInvoicePrefix(), bo.getDocumentDueDate(), bo.getTranslationDate(), bo.getSCN(), bo.getPaymentTerm(), bo.isPaymentBlockStatus(), bo.getSurchargeCount(), bo.getLastSurchargeDate(), bo.getLastSurchargeDueDate(), bo.getProtestStatus(), bo.getLocation(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //create invoice item
    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        item = (IInvoiceItem) bo.getItems().get(i);
        //Chee Seng 11th June 2004, bugId: 6116
        //Chee Seng 29th Nov 2004, bugId: 8703
        invoiceItem = invoiceItemHome.create(new InvoiceItemPK(bo.getCustomerType(), bo.getFiscalYear(), bo.getOfficeCode(), bo.getDocumentNumber(), item.getItemNo()), item.getQuantity(), item.getTariffCode(), item.getUOM(), item.getUnitPrice(), item.getCargoType(), item.getCommodityType(), item.getQuantity2(), item.getUOM2(), item.getTonnage(), item.getCostCenterOfficeCode(), item.getDifferentOfficeGLAccount(), item.getDifferentOfficeCostCenterId(), item.getImportExportFlag(), item.getBlNumber(), item.getScn(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {CCA08318-EA2C-4C44-AA8A-C86575748AE8}
   */
  public IARDocument createParkDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    Long documentNumber = null;
    String invoiceNumber = null;
    Integer postingPeriod = null;
    java.sql.Date documentDueDate = null;
    Invoice invoice = null;
    InvoiceItem invoiceItem = null;
    IInvoiceItem item = null;
    BigDecimal totalAmount = new BigDecimal(0);
    BigDecimal totalAmountInLocalCurrency = new BigDecimal(0);
    CommonFunction commonFunction = null;
    IAbstractGLAccountItem accountItemBO = new AbstractGLAccountItemValue();
    ICustomer customerBO = new DebtorAccountValue();
    IAutomaticAccountAssignment automaticAccountAssignment = null;
    IOffice office = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    //tml 04 July 2006, BugId: 17433
    AccountReceivableSetup arSetup = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    java.util.ArrayList invoiceList = new java.util.ArrayList();
    java.util.List glAccountItemList = new java.util.ArrayList();
    boolean updateOverrideApprovalFlag = false;
    IOverridingApproval overridingApprovalBO = null;
    List exceptionList = new ArrayList();

    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      arSetup = accountReceivableSetupHome.create();
      
      System.out.println("inside " + this.getClass() +".invoiceHome = "+invoiceHome.getClass().getName());
      
      System.out.println("inside " + this.getClass() +".createParkDebtorInvoice :  \n"
      +"exchange rate: "+ bo.getExchangeRate());
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      //validateDebtorInvoice(bo, user);
      validateParkDebtorInvoice(bo, user);

      //retrieve reconciliation account
      customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      //Chee Seng 08th Dec 2004, bugId: 8866
      try {
        if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")) {
          /*
		  AbstractCriteria[] filter = {
			  new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
			  new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber())
			  };
		  java.util.List results = DAOProxy.list("invoice", user, filter);
		  */
          InvoiceDAO dao = (InvoiceDAO) DAOProxy.getDAO("invoice", user);
          java.util.List results = dao.findByOfficeCodeInvoiceNumber(bo.getOfficeCode(), bo.getInvoiceNumber());

          if (results.size() > 0) {
            throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
          }
        }
        else {
          if (bo.getInvoicePrefix() != null && !bo.getInvoicePrefix().equals("")) {
            generateInvoiceNumber(bo, user);
          }
        }
      }
      catch (java.sql.SQLException ex) {
        sessionContext.setRollbackOnly();
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
				}
      }
      catch (AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }

      //Chee Seng 19 Feb 2004
      if (bo.getInvoiceNumber() == null || bo.getInvoiceNumber().length() == 0) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
      }
      //gerald 23 August 2006, BugId: 18003
      if (bo.isConversionIndicator() != null && bo.isConversionIndicator().booleanValue()) {
        //do nothing to avoid validation on ReconAccountType and InvoicePrefix in else block during conversion
        //if (bo.getGLAccount() == null) {
        //  bo.setGLAccount(customerBO.getReconAccountId());
        //}

        //IDebtorReconAccountType debtorReconAccountType = generalLedgerSetup.retrieveDebtorReconAccountType(bo.getOfficeCode(), bo.getReconAccountType(), user);
        //bo.setPaymentTerm(debtorReconAccountType.getPaymentTerm());

        Logger.getInstance().logDebug("bo.getOfficeCode() : " + bo.getOfficeCode());
        Logger.getInstance().logDebug("bo.getSubledgerAccount() : " + bo.getSubledgerAccount());
        Logger.getInstance().logDebug("bo.getReconAccountType() : " + bo.getReconAccountType());

        IDebtorReconAccount debtorReconAccount = arSetup.retrieveDebtorReconAccountByAccountType(bo.getOfficeCode(), bo.getSubledgerAccount(), bo.getReconAccountType(), user);
        bo.setGLAccount(debtorReconAccount.getReconciliationGLAccount());
        bo.setPaymentTerm(debtorReconAccount.getPaymentType());

        Logger.getInstance().logDebug("recon acc during conversion : " + bo.getGLAccount());
        Logger.getInstance().logDebug("paymentTerm during conversion : " + bo.getPaymentTerm());
      }
      else {
        //Chee Seng 19th Feb 2004
        if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue()) {
          //Chee Seng 13th Aug 2004, bugId: 6948
          //tml 04 July 2006, BugId: 17433
          //ICustomer customerBo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);

          try {
            //tml 04 July 2006, BugId: 17433
            IDebtorReconAccount debtorReconAccountBO = arSetup.retrieveDebtorReconAccountByAccountType(customerBO.getOfficeCode(), bo.getSubledgerAccount(), bo.getReconAccountType(), user);
            /*
            AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_OFFICE_CODE, "=", bo.getOfficeCode()),
              new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_ACCOUNT_NUMBER, "=", bo.getSubledgerAccount()),
              new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_ACCOUNT_TYPE, "=", bo.getReconAccountType())
            };
            java.util.List results = DAOProxy.list("debtorReconAccount", user, filter);
            if (results.size() < 1) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorReconAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER_AND_ACCOUNT_TYPE});
            }
            IDebtorReconAccount debtorReconAccountBO = (IDebtorReconAccount) results.get(0);
		    */
            if (bo.getPaymentTerm() == null) {
              bo.setPaymentTerm(debtorReconAccountBO.getPaymentType());
            }
            if (bo.getGLAccount() == null) {
              bo.setGLAccount(debtorReconAccountBO.getReconciliationGLAccount());
            }
          }
          /*
          catch (java.sql.SQLException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorReconAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER_AND_ACCOUNT_TYPE});
          }*/
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
        else {
          //ffgan 23 March 2005 Bugid:10248
          Logger.getInstance().logDebug("bo.getInvoicePrefix() : " + bo.getInvoicePrefix());
          String code = bo.getInvoicePrefix();
          List invoicePaymentTerm = null;
          List invoiceTypeTerm = null;
          IInvoicePrefix invPrefix = retrieveInvoicePrefix(code, user);
          String invTypeCode = invPrefix.getInvoiceType();
          Logger.getInstance().logDebug("bo.getSubledgerAccount() : " + bo.getSubledgerAccount());
          invoicePaymentTerm = retrieveInvoicePaymentTerm(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
          if (invoicePaymentTerm != null && invoicePaymentTerm.size() > 0) {
            int invPaymentTermSize = invoicePaymentTerm.size();
            IDebtorInvoicePaymentTerm tempInvPaymentTerm = null;
            for (int counter = 0; counter < invPaymentTermSize; counter++) {
              tempInvPaymentTerm = (IDebtorInvoicePaymentTerm) invoicePaymentTerm.get(counter);
              if (invTypeCode.equals(tempInvPaymentTerm.getInvoiceType())) {
                bo.setPaymentTerm(tempInvPaymentTerm.getPaymentTerm());
                Logger.getInstance().logDebug("tempInvPaymentTerm.getPaymentTerm() : " + tempInvPaymentTerm.getPaymentTerm());
              }
            }
          }
          else {
            //Gets invoice type payment term
            List invoiceTypeList = ICMSConnector.getInvoiceTypeList(user.getIcmsSession());
            int invTypeSize = invoiceTypeList.size();
            InvoiceType tempInvoiceType = null;
            for (int counter = 0; counter < invTypeSize; counter++) {
              tempInvoiceType = (InvoiceType) invoiceTypeList.get(counter);
              if (invTypeCode.equals(tempInvoiceType.getCode())) {
                bo.setPaymentTerm(tempInvoiceType.getPaymentTerm());
                Logger.getInstance().logDebug("tempInvoiceType.getPaymentTerm() : " + tempInvoiceType.getPaymentTerm());
              }
            }
          }
          //end
          if (bo.getGLAccount() == null) {
            bo.setGLAccount(customerBO.getReconAccountId());
          }
        }
      }

      if (bo.getPaymentTerm() != null && bo.getPaymentTerm().length() > 0) {
        java.sql.Date entryDate = java.sql.Date.valueOf(String.valueOf(AFMSUtilities.getCalendar().get(Calendar.YEAR)) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.MONTH) + 1) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.DATE)));
        documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), entryDate, bo.getDocumentDate(), bo.getPostingDate(), user);
        bo.setDocumentDueDate(documentDueDate);
      }
      //Get the account type from document type
      //documentTypeBO = commonFunction.retrieveDocumentType(bo.getDocumentType());

      //Get the exchange rate if doesn't exists
      /*
       * if(bo.getExchangeRate() == null || bo.getExchangeRate().equals("")) {
       * calculateExchangeRateAmount = new CalculateExchangeRateAmountValue();
       * calculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(bo.getAmount(), bo.getAmountInLocalCurrency(), bo.getExchangeRate(),
       * bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
       * bo.setExchangeRate(calculateExchangeRateAmount.getExchangeRate());
       * }
       */
      //Chee Seng 2nd Nov 2004, bugId: 8214
      if (bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
        bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
      }

      if(bo.getDirectPostingJournalFlag() != null && bo.getDirectPostingJournalFlag().equals(Boolean.TRUE)) {
        bo.setInterOfficePostingIndicator(new Boolean(true));
      }

      /* postingPeriod = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingDate(), user);
       * if(postingPeriod != null && !postingPeriod.equals("")) {
       * if(postingPeriod.intValue() == 12) {
       * if(bo.getPostingPeriod() == null || bo.getPostingPeriod().equals("")) {
       * bo.setPostingPeriod(postingPeriod);
       * }
       * }
       * else {
       * bo.setPostingPeriod(postingPeriod);
       * }
       * }
       * if(bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) {
       * documentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType());
       * bo.setDocumentNumber(documentNumber);
       * }
       */
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
			}
    }
    catch (Exception ex) {
      Logger.getInstance().logDebug("General Exception : " + ex.toString());
   }
   
   BigDecimal sumItemsTaxAmount = new BigDecimal("0");
   
    for (int i = 0; i < bo.getItems().size(); i++) {
      item = (IInvoiceItem) bo.getItems().get(i);

      item.setCustomerType(bo.getCustomerType());
      item.setOfficeCode(bo.getOfficeCode());
      item.setItemNo(new Integer(i + 1));

      //assign value from invoice item to account item detail
      accountItemBO = new AbstractGLAccountItemValue();
      accountItemBO.copyPropertiesFrom(item);
      System.out.println("$$$accountItemBO.getAmount() = "+ accountItemBO.getAmount());
	    System.out.println("$$$accountItemBO.getTaxAmount() = "+ accountItemBO.getTaxAmount());
      //Chee Seng 2nd Nov 2004, bugId: 8214
      accountItemBO.setFiscalYear(bo.getFiscalYear());
      accountItemBO.setDocumentNumber(bo.getDocumentNumber());
      accountItemBO.setDocumentType(bo.getDocumentType());
      accountItemBO.setDocumentDate(bo.getDocumentDate());
      accountItemBO.setPostingDate(bo.getPostingDate());
      //Chee Seng 07th Sept 2004, bugId: 7288
      accountItemBO.setPostingPeriod(bo.getPostingPeriod());
      accountItemBO.setProcessStatus(bo.getProcessStatus());
      accountItemBO.setCurrency(bo.getCurrency());
      //Chee Seng 08th Dec 2004, bugId: 8866
      accountItemBO.setHeaderIndicator(Boolean.FALSE);
      accountItemBO.setDirectPostingJournalFlag(bo.getDirectPostingJournalFlag());
      if(bo.getDirectPostingJournalFlag() != null && bo.getDirectPostingJournalFlag().equals(Boolean.TRUE)) {
        accountItemBO.setInterOfficePostingIndicator(new Boolean(true));
      }
      accountItemBO.setGlobalNumber(bo.getInvoiceNumber());
      if (accountItemBO.getDebitCreditType().equals(DebitCreditType.CREDIT)) {
        totalAmount = totalAmount.add(item.getAmount());
      }
      else {
        totalAmount = totalAmount.subtract(item.getAmount());
      }
      //Chee Seng 27th Aug 2004, bugId: 7178
      if (accountItemBO.isTaxIndicator() == null || accountItemBO.isTaxIndicator().booleanValue() == false || accountItemBO.getTaxCode() == null || accountItemBO.getTaxCode().equals("")) {
        accountItemBO.setTaxIndicator(null);
      }
	  else {
	  sumItemsTaxAmount = sumItemsTaxAmount.add(accountItemBO.getAmount());			
	  }
      if (accountItemBO.getParentItemNumber() == null || accountItemBO.getParentItemNumber().compareTo(new Integer(0)) == 0) {
        accountItemBO.setParentItemNumber(null);
      }
      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_RC_FLAG_FOR_INVOICE))) {
        if (item.getCostCenterOfficeCode() != null && !item.getCostCenterOfficeCode().equals("")) {
          if (!bo.getOfficeCode().equals(item.getCostCenterOfficeCode())) {
            accountItemBO.setCostCenterId(null);
          }
        }
      }

      postParkedDocumentBO.addGLAccountItems(accountItemBO);
    }

    //Chee Seng 13th May 2004, bugid: 5663
    //if (bo.getAmountInLocalCurrency() == null) {
    //  bo.setAmount(totalAmount);
    //}

    //Assign value from invoice to glaccount item header
    if (bo.isTaxIndicator() == null || bo.isTaxIndicator().equals(Boolean.FALSE)) {
      bo.setTaxIndicator(null);
    }
    accountItemBO = new AbstractGLAccountItemValue();
    accountItemBO.copyPropertiesFrom(bo);
    
	//#### glaccountitem header
	if(accountItemBO.getExternalSystemType() != null && accountItemBO.getExternalSystemType().equals(ExternalSystemType.POM)){
		accountItemBO.setTaxIndicator(null);
		accountItemBO.setTaxAmount(sumItemsTaxAmount);
	}
	
    //Chee Seng 08th Dec 2004, bugId: 8866
    accountItemBO.setHeaderIndicator(Boolean.TRUE);
    accountItemBO.setGlobalNumber(bo.getInvoiceNumber());
    accountItemBO.setRemark(bo.getRemark());
    //Jason 14th Nov 2003
    if (bo.getSurchargeInvoiceIndicator() != null && !bo.getSurchargeInvoiceIndicator().equals("") && bo.getSurchargeInvoiceIndicator().booleanValue() == true) {
      try {
        office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
        automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.SURCHARGE_INVOICE, IConstants.TransactionPostingKey.JOURNAL_DEBIT, user);
      }
      catch (java.rmi.RemoteException ex) {
        sessionContext.setRollbackOnly();
        throw new javax.ejb.EJBException(ex.toString());
      }
      accountItemBO.setGLAccount(automaticAccountAssignment.getGlAccount());
    }
    //Chee Seng 19 Feb 2004
    //else {
    //accountItemBO.setGLAccount(customerBO.getReconAccountId());
    //}

    postParkedDocumentBO.getGLAccountItems().add(0, accountItemBO);
    Logger.getInstance().logDebug("bo.getBudgetActionType()============" + bo.getBudgetActionType());
    //	karen 1 August 2006, BugId: 17781 display warning message

    DebtorAccount debtorAccount = null;
    try {
      debtorAccount = debtorAccountHome.findByPrimaryKey(new DebtorAccountPK(customerBO.getAccountNumber(), customerBO.getOfficeCode()));
	  Logger.getInstance().logDebug("debtorAccount.getAccountCategory() === " + debtorAccount.getAccountCategory());
	  Logger.getInstance().logDebug("bo.getExternalSystemType === " + bo.getExternalSystemType());
	  
      // karen 11 Dec 2006, BugId: 19602 request by PBIS
      //if (debtorAccount.getAccountCategory() != null && debtorAccount.getAccountCategory().equals(AccCategory.SPECIAL)) {
      //Hui Mian 22/01/2008 bugid: 24607 should check credit limit for debtor not special
	  if (debtorAccount.getAccountCategory() != null && !debtorAccount.getAccountCategory().equals(AccCategory.SPECIAL)) {
		Logger.getInstance().logDebug("1st if");
        if (BudgetActionType.CHECK_AND_EXECUTE.equals(bo.getBudgetActionType())) {
		  Logger.getInstance().logDebug("2nd if");
          IOverridingApproval overridingBO = checkCreditLimit(customerBO, bo.getAmount(), bo.getFiscalYear(), true, null, user);
          Logger.getInstance().logDebug("overridingBO.getAmount() === " + overridingBO.getAmount());
          BigDecimal overRideAmount = overridingBO.getAmount();
          Logger.getInstance().logDebug("overRideAmount===" + overRideAmount);
          if (overRideAmount.compareTo(new BigDecimal(0)) < 0) {
            //throw new com.portrade.ipms.afms.exceptions.CustomerAccountBalanceNotEnoughException(new Object[]{});
			debtorAccount.setAccountStatus(AccStatus.SUSPENDED);
			debtorAccount.setLastSuspendDate(AFMSUtilities.getCurrentDate());
			debtorAccount.setLastUpdateBy(user.getId());
			debtorAccount.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          }
        }
        else if (BudgetActionType.EXECUTE_ONLY.equals(bo.getBudgetActionType())) {
          debtorAccount.setAccountStatus(AccStatus.SUSPENDED);
          debtorAccount.setLastSuspendDate(AFMSUtilities.getCurrentDate());
          debtorAccount.setLastUpdateBy(user.getId());
          debtorAccount.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        }
      }
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    //Chee Seng 2nd Nov 2004, bugId: 8214
    /* if (bo.getExternalSystemType() == null || !bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
      //Chee Seng 1st March 2005, bugId: 10004
      //Chee Seng 1st March 2005, bugId: 13103
			IOverridingApproval overridingBO = checkCreditLimit(customerBO, bo.getAmount(), bo.getFiscalYear(), true, null, user);
      BigDecimal overRideAmount = overridingBO.getAmount();
      bo.setOverrideAmount(overRideAmount.negate());
      //if (bo.isProceedIndicator() == null || !bo.isProceedIndicator().equals(Boolean.TRUE)) {
      Logger.getInstance().logDebug("overRideAmount = " + overRideAmount);
      try {
        if (overRideAmount.compareTo(new BigDecimal("0")) != 0) {
          // karen BugId: 11311 6 June 2005
          IInvoicePrefix invPrefix = retrieveInvoicePrefix(bo.getInvoicePrefix(), user);
          String invTypeCode = invPrefix.getInvoiceType();
					overridingBO.setInvoiceType(invTypeCode);
          List filterList = new ArrayList();
          filterList.add(new Criteria(OverridingApprovalDAO.FILTER_DEBTORCODE, "=", bo.getSubledgerAccount()));
          filterList.add(new Criteria(OverridingApprovalDAO.FILTER_INVOICETYPE, "=", invTypeCode));
          filterList.add(new Criteria(OverridingApprovalDAO.FILTER_INVOICEDATE, "=", com.portrade.ipms.icms.Date.newInstance(bo.getDocumentDate())));
          filterList.add(new Criteria(OverridingApprovalDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()));
          filterList.add(new Criteria(OverridingApprovalDAO.FILTER_INVOICEAMOUNT, "=", bo.getAmount()));
          filterList.add(new Criteria(OverridingApprovalDAO.FILTER_PROGRAMID, "=", "pfms0080"));
          //Chee Seng 3rd Aug 2005, bugId: 12798
          AbstractCriteria[] orCriterias = new AbstractCriteria[2];
          orCriterias[0] = new Criteria(OverridingApprovalDAO.FILTER_STATUS, "is null", null);
          orCriterias[1] = new Criteria(OverridingApprovalDAO.FILTER_STATUS, "=", com.portrade.ipms.afms.IConstants.Approval.APPROVED_CODE);
          filterList.add(new OrCriteria(orCriterias));
					filterList.add(new Criteria(OverridingApprovalDAO.FILTER_FISCALYEAR, "is null", null));
					filterList.add(new Criteria(OverridingApprovalDAO.FILTER_DOCUMENTNUMBER, "is null", null));
          if (bo.getSCN() != null && !"".equals(bo.getSCN())) {
            filterList.add(new Criteria(OverridingApprovalDAO.FILTER_SCN, "=", bo.getSCN()));
          }
          if (bo.getBLNumber() != null && !"".equals(bo.getBLNumber())) {
            filterList.add(new Criteria(OverridingApprovalDAO.FILTER_BLSONUMBER, "=", bo.getBLNumber()));
          }
          AbstractCriteria[] filter = new AbstractCriteria[filterList.size()];
          filterList.toArray(filter);
          try {
            overridingApprovalBO = retrieveOverridingApproval(filter, user);
            if (overridingApprovalBO == null) {
              AccountReceivableManager acr = accountReceivableManagerHome.create();
              acr.createOverridingApprovalWithNewSession(bo, overridingBO, user);
			  sessionContext.setRollbackOnly();
			  throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
            }
            else {
            	///Chee Seng 3rd Aug 2005, bugId: 12798
              if (overridingApprovalBO.getStatus() == null) {
                sessionContext.setRollbackOnly();
                throw new com.portrade.ipms.afms.exceptions.RecordsAreNotApprovedException(new Object[]{OverridingApprovalLabelId.OVERRIDINGAPPROVAL});
              }
				else if (overridingApprovalBO.getStatus() != null && !IConstants.Approval.APPROVED_CODE.equals(overridingApprovalBO.getStatus())) {
					AccountReceivableManager acr = accountReceivableManagerHome.create();
					acr.createOverridingApprovalWithNewSession(bo, overridingBO, user);
					sessionContext.setRollbackOnly();
					throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
				}
              else if (overridingApprovalBO.getStatus() != null && IConstants.Approval.APPROVED_CODE.equals(overridingApprovalBO.getStatus())) {
                if (overridingApprovalBO.getFiscalYear() != null && overridingApprovalBO.getDocumentNumber() != null) {
                  AccountReceivableManager acr = accountReceivableManagerHome.create();
                  acr.createOverridingApprovalWithNewSession(bo, invTypeCode, user);
                  sessionContext.setRollbackOnly();
                  throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
                }
                updateOverrideApprovalFlag = true;
              }
							updateOverrideApprovalFlag = true;
            }
          }
          catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
            AccountReceivableManager acr = accountReceivableManagerHome.create();
            acr.createOverridingApprovalWithNewSession(bo, overridingBO, user);
			sessionContext.setRollbackOnly();
			throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
          }
        }
      }
      catch (javax.ejb.CreateException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      //}
    }
    */
    //karen 1 August 2006, BugId: 17781 igonore overriding approval because BPSB does not have it
    if (bo.getExternalSystemType() != null && bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
      //Chee Seng 09th May 2005, bugId: 10666
      //else {
      if (!Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_RC_FLAG_FOR_INVOICE))) {
        String costCenter = null;
        try {
          if (IConstants.PostingResponsibleCenter.PORT.equals(SystemProfile.get(SystemProfile.POSTING_RESPONSIBLE_CENTER))) {
            if (user.getIcmsSession().getPortSite().getPort().getResponsibleCenter() != null) {
              String costCenterId = user.getIcmsSession().getPortSite().getPort().getResponsibleCenter().getId();
              AbstractCriteria[] filter = {
                  new Criteria(com.portrade.ipms.afms.dao.CostCenterDAO.FILTER_ID, "=", costCenterId)
                  };
              java.util.List costCenterList = DAOProxy.list("costCenter", user, filter);
              if (costCenterList.size() == 0) {
                sessionContext.setRollbackOnly();
                throw new RecordNotFoundException(new Object[]{IConstants.CostCenterLabelId.COSTCENTER});
              }
              ICostCenter costCenterBO = (ICostCenter) costCenterList.get(0);
              costCenter = costCenterBO.getCostCenterId();
            }
          }
          else {
            costCenter = ACRToVIMSConnector.retrieveResponsibleCenterBySCN(bo.getSCN(), user.getIcmsSession());
          }
        }
        catch (SQLException ex) {
          sessionContext.setRollbackOnly();
					if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new RecordNotFoundException(new Object[]{IConstants.CostCenterLabelId.COSTCENTER});
					}
        }
        catch (AFMSException ex) {
          sessionContext.setRollbackOnly();
          throw ex;
        }

        if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_RC_FLAG))) {
          //Populate the responsible center code for item
          for (int j = 1; j < postParkedDocumentBO.getGLAccountItems().size(); j++) {
            accountItemBO = (IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(j);
            accountItemBO.setCostCenterId(costCenter);
          }
        }
        else {
          //Populate the responsible center code for header
          accountItemBO = (IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0);
          accountItemBO.setCostCenterId(costCenter);
        }
      }

      if (bo.isTaxIndicator() != null && bo.isTaxIndicator().equals(Boolean.TRUE)) {
        try {
          java.util.List taxCalculationList = DAOProxy.list("taxCalculation", ICMSConnector.IGNORE, user);
          if (taxCalculationList != null && taxCalculationList.size() > 0) {
            Map taxCalculationMap = new HashMap();
            for (int j = 1; j < taxCalculationList.size(); j++) {
              ITaxCalculation taxCalculationBO = (ITaxCalculation) taxCalculationList.get(j);
              taxCalculationMap.put(taxCalculationBO.getTaxCode(), taxCalculationBO.getGLAccount());
            }
            for (int j = 1; j < postParkedDocumentBO.getGLAccountItems().size(); j++) {
              accountItemBO = (IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(j);
              if (accountItemBO.isTaxIndicator() != null && Boolean.TRUE.equals(accountItemBO.isTaxIndicator())) {
                Object glCode = taxCalculationMap.get(accountItemBO.getTaxCode());
                if (glCode != null) {
                  accountItemBO.setGLAccount((String) glCode);
                }
              }
            }
          }
        }
        catch (SQLException ex) {
          sessionContext.setRollbackOnly();
					if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.TaxCalculationLabelId.TAX_CALCULATION});
					}
        }
      }
    }

    for (int j = 1; j < postParkedDocumentBO.getGLAccountItems().size(); j++) {
      accountItemBO = (IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(j);
    }

    try {
      //Chee Seng 23rd June 2005, bugId: 11341
      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.DEBTOR_INVOICE_DIRECT_POSTING_FLAG))) {
        
        //GST GL manage
        glAccountItemList = commonFunction.postDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
        //if (bo.isDebtorInvoiceDirectPostingFlag() == null || bo.isDebtorInvoiceDirectPostingFlag().booleanValue() == false) {
      }
      else {
		//GST GL manage
        glAccountItemList = commonFunction.parkDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
      }

      postParkedDocumentBO.setGLAccountItems(glAccountItemList);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));

    bo.setExternalSystemType(accountItemBO.getExternalSystemType());

    //Chee Seng 2nd March 2005, bugId: 10004
    /*
		try {
			if (bo.getExternalSystemType() == null || !bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
				if (bo.isProceedIndicator() != null && bo.isProceedIndicator().equals(Boolean.TRUE) && bo.getOverridingApprovalUserId() != null) {
					InvoiceDAO.insertOverrideApprovalDetail(bo, user);
				}
			}
		}
		catch (java.sql.SQLException ex) {
			sessionContext.setRollbackOnly();
			throw new CannotCreateRecordException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
		}
		*/
    //Chee Seng 21st June 2005, bugId: 11719
    for (int i = 0; i < bo.getItems().size(); i++) {
      item = (IInvoiceItem) bo.getItems().get(i);
      //karen BugId: 17661 4 August 2006, set the UI cost center office Code
      String costCenterOfficeCode = item.getCostCenterOfficeCode();
      item.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(i + 1));
      item.setCostCenterOfficeCode(costCenterOfficeCode);
      item.setScn(bo.getSCN());
    }

    //create invoice master
    try {
      //Chee Seng 3rd Feb 2005, bugId: 9790
      invoice = invoiceHome.create(new InvoicePK(bo.getCustomerType(), bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getInvoiceNumber(), bo.getInvoicePrefix(), bo.getDocumentDueDate(), bo.getTranslationDate(), bo.getSCN(), bo.getPaymentTerm(), bo.isPaymentBlockStatus(), bo.getSurchargeCount(), bo.getLastSurchargeDate(), bo.getLastSurchargeDueDate(), bo.getLocation(), bo.getProtestStatus(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 4th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(invoice, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //create invoice item
    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        item = (IInvoiceItem) bo.getItems().get(i);
        //Chee Seng 11th June 2004, bugId: 6116
        //Chee Seng 29th Nov 2004, bugId: 8703
        invoiceItem = invoiceItemHome.create(new InvoiceItemPK(bo.getCustomerType(), bo.getFiscalYear(), bo.getOfficeCode(), bo.getDocumentNumber(), item.getItemNo()), item.getQuantity(), item.getTariffCode(), item.getUOM(), item.getUnitPrice(), item.getCargoType(), item.getCommodityType(), item.getQuantity2(), item.getUOM2(), item.getTonnage(), item.getCostCenterOfficeCode(), item.getDifferentOfficeGLAccount(), item.getDifferentOfficeCostCenterId(), item.getImportExportFlag(), item.getBlNumber(), item.getScn(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        //Chee Seng 4th July 2005, bugId: 11719
        ACRAuditTrail.insertLogAuditTrail(invoiceItem, user);
      }

    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    Logger.getInstance().logDebug("updateOverrideApprovalFlag = " + updateOverrideApprovalFlag);
    if (updateOverrideApprovalFlag) {
      try {
        OverridingApprovalDAO overridingApprovalDAO = (OverridingApprovalDAO) DAOProxy.getDAO("overridingApproval", user);
        overridingApprovalBO.setFiscalYear(bo.getFiscalYear());
        overridingApprovalBO.setDocumentNumber(bo.getDocumentNumber());
        overridingApprovalBO.setInvoiceNumber(bo.getInvoiceNumber());
        overridingApprovalDAO.updateOverridingApproval(overridingApprovalBO, user);
      }
      catch (java.sql.SQLException ex) {
        sessionContext.setRollbackOnly();
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new RecordNotFoundException(new Object[]{OverridingApprovalLabelId.OVERRIDINGAPPROVAL});
				}
      }
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @exception ValidationException Description of the Exception
   * @exception SQLException Description of the Exception
   * @modelguid {66AE2E40-49C2-4A14-84C8-4547D4CD18ED}
   */
  public java.util.ArrayList confirmParkDebtorInvoice(IARDocument bo, IUser user) throws AFMSException, SQLException, ValidationException {
    IARDocument VATableInvoice = new DebtorInvoiceValue();
    IARDocument nonVATableInvoice = new DebtorInvoiceValue();
    java.util.ArrayList invoiceList = new java.util.ArrayList();
    java.util.ArrayList exceptionList = new java.util.ArrayList();
		CommonFunction commonFunction = null;
		
    String subledgerOfficeCode = null;

		//25194 - ffgan
		try {
		  commonFunction = commonFunctionHome.create();
		}
		catch (javax.ejb.CreateException ex) {
		  Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
		}
		catch (java.rmi.RemoteException ex) {
		  throw new javax.ejb.EJBException(ex.toString());
		}
	    
		List revenueList = new ArrayList();
		revenueList.addAll(bo.getItems());
		try{
			if (bo.getFiscalYear() == null) {
						bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
			}
			if (bo.getPostingPeriod() == null) {
						bo.setPostingPeriod(commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user));
			}
			Logger.getInstance().logDebug("bo.getFiscalYear === " + bo.getFiscalYear());
			Logger.getInstance().logDebug("bo.getPostingPeriod === " + bo.getPostingPeriod());
		  commonFunction.insertToRevenueTbl(bo.getRevenueType(), bo.getFiscalYear(),
		  bo.getPostingPeriod(), bo.getSCN(),revenueList, user); 
		}
		catch (java.rmi.RemoteException ex) {
		  throw new javax.ejb.EJBException(ex.toString());
		}    
		//End 

    bo.setCustomerType(CustomerType.DEBTOR);
    bo.setProcessStatus(ProcessStatus.PARK);

    VATableInvoice.setCustomerType(bo.getCustomerType());
    VATableInvoice.setOfficeCode(bo.getOfficeCode());
    VATableInvoice.setFiscalYear(bo.getFiscalYear());
    VATableInvoice.setDocumentNumber(bo.getDocumentNumber());
    VATableInvoice.setInvoicePrefix(bo.getInvoicePrefix());
    VATableInvoice.setInvoiceNumber(bo.getInvoiceNumber());
    VATableInvoice.setSubledgerAccount(bo.getSubledgerAccount());
    VATableInvoice.setSubledgerName(bo.getSubledgerName());
    VATableInvoice.setTin(bo.getTin());
    //tml 15 May 2006, BugId: 16902
    if (bo.getSubledgerAccount() != null) {
      ICustomer debtorBo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      subledgerOfficeCode = debtorBo.getOfficeCode();
    }
    VATableInvoice.setSubledgerOfficeCode(subledgerOfficeCode);

    VATableInvoice.setDocumentDate(bo.getDocumentDate());
    VATableInvoice.setDocumentDueDate(bo.getDocumentDueDate());
    VATableInvoice.setDocumentType(bo.getDocumentType());
    VATableInvoice.setPostingKey(bo.getPostingKey());
    VATableInvoice.setPostingDate(bo.getPostingDate());
    VATableInvoice.setPostingPeriod(bo.getPostingPeriod());
    VATableInvoice.setReference(bo.getReference());
    VATableInvoice.setReferenceType(bo.getReferenceType());
    VATableInvoice.setRemark(bo.getRemark());
    VATableInvoice.setAmount(bo.getAmount());
    VATableInvoice.setCurrency(bo.getCurrency());
    VATableInvoice.setExchangeRate(bo.getExchangeRate());
    VATableInvoice.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
    VATableInvoice.setTranslationDate(bo.getTranslationDate());
    VATableInvoice.setSCN(bo.getSCN());
    VATableInvoice.setPaymentTerm(bo.getPaymentTerm());
    VATableInvoice.setPaymentBlockStatus(bo.isPaymentBlockStatus());
    VATableInvoice.setProcessStatus(bo.getProcessStatus());
    VATableInvoice.setTaxIndicator(new Boolean(true));
    VATableInvoice.setBudgetActionType(bo.getBudgetActionType());
    VATableInvoice.setProceedIndicator(bo.isProceedIndicator());
    VATableInvoice.setExternalSystemType(bo.getExternalSystemType());
    //Jason 14th Nov 2003
    VATableInvoice.setSurchargeInvoiceIndicator(bo.getSurchargeInvoiceIndicator());

    //Chee Seng 19th Feb 2004
    VATableInvoice.setMultipleReconAccountFlag(bo.isMultipleReconAccountFlag());
    VATableInvoice.setReconAccountType(bo.getReconAccountType());
    VATableInvoice.setDebtorInvoiceDirectPostingFlag(bo.isDebtorInvoiceDirectPostingFlag());
    VATableInvoice.setLocation(bo.getLocation());
    //Chee Seng 2nd March 2005, bugId: 10004
    VATableInvoice.setOverridingApprovalUserId(bo.getOverridingApprovalUserId());
    VATableInvoice.setOverrideAmount(bo.getOverrideAmount());
    VATableInvoice.setCostCenterId(bo.getCostCenterId());
    VATableInvoice.setTaxCode(bo.getTaxCode());
    VATableInvoice.setTaxAmount(bo.getTaxAmount());
    VATableInvoice.setTaxAmountInLocalCurrency(bo.getTaxAmountInLocalCurrency());
    VATableInvoice.setNewInvoiceIndicator(Boolean.TRUE);
    VATableInvoice.setConversionIndicator(bo.isConversionIndicator());
    //Hui Mian 15/11/2006 bugId: 19166
    VATableInvoice.setSurchargeCount(bo.getSurchargeCount());
    VATableInvoice.setLastSurchargeDate(bo.getLastSurchargeDate());
    VATableInvoice.setLastSurchargeDueDate(bo.getLastSurchargeDueDate());
    VATableInvoice.setProtestStatus(bo.getProtestStatus());
    Logger.getInstance().logDebug("VATableInvoice.setImportExportFlag "+bo.getImportExportFlag());
    VATableInvoice.setImportExportFlag(bo.getImportExportFlag());
    
    nonVATableInvoice.setCustomerType(bo.getCustomerType());
    nonVATableInvoice.setOfficeCode(bo.getOfficeCode());
    nonVATableInvoice.setFiscalYear(bo.getFiscalYear());
    nonVATableInvoice.setDocumentNumber(bo.getDocumentNumber());
    nonVATableInvoice.setInvoicePrefix(bo.getInvoicePrefix());
    nonVATableInvoice.setInvoiceNumber(bo.getInvoiceNumber());
    nonVATableInvoice.setSubledgerAccount(bo.getSubledgerAccount());
    nonVATableInvoice.setSubledgerName(bo.getSubledgerName());
    nonVATableInvoice.setTin(bo.getTin());
    //tml 15 May 2006, BugId: 16902
    nonVATableInvoice.setSubledgerOfficeCode(subledgerOfficeCode);

    nonVATableInvoice.setDocumentDate(bo.getDocumentDate());
    nonVATableInvoice.setDocumentDueDate(bo.getDocumentDueDate());
    nonVATableInvoice.setDocumentType(bo.getDocumentType());
    nonVATableInvoice.setPostingKey(bo.getPostingKey());
    nonVATableInvoice.setPostingDate(bo.getPostingDate());
    nonVATableInvoice.setPostingPeriod(bo.getPostingPeriod());
    nonVATableInvoice.setReference(bo.getReference());
    nonVATableInvoice.setReferenceType(bo.getReferenceType());
    nonVATableInvoice.setRemark(bo.getRemark());
    nonVATableInvoice.setAmount(bo.getAmount());
    nonVATableInvoice.setCurrency(bo.getCurrency());
    nonVATableInvoice.setExchangeRate(bo.getExchangeRate());
    nonVATableInvoice.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
    nonVATableInvoice.setTranslationDate(bo.getTranslationDate());
    nonVATableInvoice.setSCN(bo.getSCN());
    nonVATableInvoice.setPaymentTerm(bo.getPaymentTerm());
    nonVATableInvoice.setPaymentBlockStatus(bo.isPaymentBlockStatus());
    nonVATableInvoice.setProcessStatus(bo.getProcessStatus());
    nonVATableInvoice.setBudgetActionType(bo.getBudgetActionType());
    nonVATableInvoice.setProceedIndicator(bo.isProceedIndicator());
    nonVATableInvoice.setExternalSystemType(bo.getExternalSystemType());
    //Jason 14th Nov 2003
    nonVATableInvoice.setSurchargeInvoiceIndicator(bo.getSurchargeInvoiceIndicator());

    //Chee Seng 19th Feb 2004
    nonVATableInvoice.setMultipleReconAccountFlag(bo.isMultipleReconAccountFlag());
    nonVATableInvoice.setReconAccountType(bo.getReconAccountType());
    nonVATableInvoice.setDebtorInvoiceDirectPostingFlag(bo.isDebtorInvoiceDirectPostingFlag());

    nonVATableInvoice.setLocation(bo.getLocation());

    //Chee Seng 2nd March 2005, bugId: 10004
    nonVATableInvoice.setOverridingApprovalUserId(bo.getOverridingApprovalUserId());
    nonVATableInvoice.setOverrideAmount(bo.getOverrideAmount());

    nonVATableInvoice.setCostCenterId(bo.getCostCenterId());
    nonVATableInvoice.setTaxCode(bo.getTaxCode());
    nonVATableInvoice.setTaxAmount(bo.getTaxAmount());
    nonVATableInvoice.setTaxAmountInLocalCurrency(bo.getTaxAmountInLocalCurrency());
    nonVATableInvoice.setNewInvoiceIndicator(Boolean.TRUE);
    nonVATableInvoice.setConversionIndicator(bo.isConversionIndicator());

    //Hui Mian 15/11/2006 bugId: 19166
    nonVATableInvoice.setSurchargeCount(bo.getSurchargeCount());
    nonVATableInvoice.setLastSurchargeDate(bo.getLastSurchargeDate());
    nonVATableInvoice.setLastSurchargeDueDate(bo.getLastSurchargeDueDate());
    nonVATableInvoice.setProtestStatus(bo.getProtestStatus());
    nonVATableInvoice.setImportExportFlag(bo.getImportExportFlag());
    groupInvoiceItem(bo, VATableInvoice, nonVATableInvoice, user);
    
    System.out.println("**nonVATableInvoice.exchange rate = "+ nonVATableInvoice.getExchangeRate() +"** ");
	System.out.println("**VATableInvoice.exchange rate = "+ VATableInvoice.getExchangeRate() +"** ");
	
    calculateTaxForVATableInvoiceItems(VATableInvoice, nonVATableInvoice, user);
    System.out.println("######## End of calculateTaxForVATableInvoiceItems within confirmParkDebtorInvoice #######");

    validateConfirmParkDebtorInvoice(bo, VATableInvoice, nonVATableInvoice, user);
    Logger.getInstance().logDebug("VATableInvoice.getImportExportFlag() "+VATableInvoice.getImportExportFlag());
    try {
    	boolean splitVATflag = SystemProfile.isTrue(SystemProfile.AFMS_SPLIT_INVOICE_TO_VAT_AND_NONVAT);
		//TODO: remove me if not available
		IARDocument allInvoice = null;
		//if not split to VAT/non VAT & is from manual invoice:
		//merge all item 
		//else
		//no need to merge all
    	if(!splitVATflag && (VATableInvoice.getExternalSystemType()==null || VATableInvoice.getExternalSystemType().length()>0)){
    		if(VATableInvoice.getItems().size()>0){
				allInvoice= VATableInvoice;
				allInvoice.getItems().addAll(nonVATableInvoice.getItems());
    		}
    		else{
				allInvoice = nonVATableInvoice;
				allInvoice.getItems().addAll(VATableInvoice.getItems());
    		}
			
			System.out.println("allInvoice.getItems().size() = "+allInvoice.getItems().size());
			allInvoice=createParkDebtorInvoice(allInvoice, user);
			invoiceList.add(allInvoice);
			if (allInvoice.getDocumentNumber() != null) {
				 bo.setDocumentNumber(allInvoice.getDocumentNumber());
			   }
			   if (allInvoice.getCrossOfficeNumber() != null) {
				 bo.setCrossOfficeNumber(allInvoice.getCrossOfficeNumber());
			   }
    	}
    	
    	else{
    		for (int roun = 0; roun < 2;roun++){
    			if(roun < 1){
					allInvoice = VATableInvoice;
    			}
				else{
					allInvoice = nonVATableInvoice;
				}
				System.out.println("b4 createParkDebtorInvoice :-----");
							System.out.println("allInvoice.getGLAccount()"+allInvoice.getGLAccount());
							System.out.println("allInvoice.getGLAccount()"+allInvoice.getDifferentOfficeGLAccountKS());
							System.out.println("allInvoice.getGLAccount()"+allInvoice.getDifferentOfficeCostCenterIdKS());
							for(int invS = 0 ; invS< allInvoice.getItems().size(); invS++){
								IInvoiceItem item = (IInvoiceItem) allInvoice.getItems().get(invS);
										//Chee Seng 11th June 2004, bugId: 6116
										//Chee Seng 29th Nov 2004, bugId: 8703
										System.out.println("item.getGLAccount() = "+item.getGLAccount());
										System.out.println("item.getOfficeCode() = "+item.getOfficeCode());
										System.out.println("item.getCostCenterId() = "+item.getCostCenterId());
										System.out.println("item.getCostCenterOfficeCode() = "+item.getCostCenterOfficeCode());
										System.out.println("item.getDifferentOfficeGLAccount() = "+item.getDifferentOfficeGLAccount());
										System.out.println("item.getDifferentOfficeGLAccountKS() = "+item.getDifferentOfficeGLAccountKS());
										System.out.println("item.getDifferentOfficeCostCenterId() = "+item.getDifferentOfficeCostCenterId());
										System.out.println("item.getDifferentOfficeCostCenterIdKS() = "+item.getDifferentOfficeCostCenterIdKS());
							}
    		}
    		
			
      if (VATableInvoice.getItems().size() > 0) {
        VATableInvoice = createParkDebtorInvoice(VATableInvoice, user);
        //karen BugId: 21560 7 May 2007 remove the updateBLorSONumber function
        /*
        //karen BugId:18364 21 Nov 2006,  BLNumber has been moved the to the item level
		if (bo.getExternalSystemType() == null || bo.getExternalSystemType().equals("")) {
	        if(bo.getSCN()!=null && !bo.getSCN().equals("")){
				for(int i=0; i<VATableInvoice.getItems().size(); i++){
					IInvoiceItem  invoiceItem = (IInvoiceItem) VATableInvoice.getItems().get(i);
						ACRToVIMSConnector.updateBLorSONumber(user.getIcmsSession(),VATableInvoice.getInvoiceNumber(),com.portrade.ipms.icms.Date.newInstance(bo.getDocumentDate()),bo.getSCN(), invoiceItem.getImportExportFlag(),invoiceItem.getBlNumber(),false);
				}
	        }
		}*/
        invoiceList.add(VATableInvoice);
        //BugId: 16934 30 May 2006 set the document number to create the debtor journal
        if (VATableInvoice.getDocumentNumber() != null) {
          bo.setDocumentNumber(VATableInvoice.getDocumentNumber());
        }
        if (VATableInvoice.getCrossOfficeNumber() != null) {
          bo.setCrossOfficeNumber(VATableInvoice.getCrossOfficeNumber());
        }
		if (VATableInvoice.getDocumentDueDate() != null) {
		  bo.setDocumentDueDate(VATableInvoice.getDocumentDueDate());
		}
		
		System.out.println("allInvoice.getItems().size() = "+allInvoice.getItems().size());
								allInvoice=VATableInvoice;
								System.out.println("after createParkDebtorInvoice, vatInv :-----");
											System.out.println("allInvoice.getGLAccount()"+allInvoice.getGLAccount());
											System.out.println("allInvoice.getGLAccount()"+allInvoice.getDifferentOfficeGLAccountKS());
											System.out.println("allInvoice.getGLAccount()"+allInvoice.getDifferentOfficeCostCenterIdKS());
											for(int invS = 0 ; invS< allInvoice.getItems().size(); invS++){
												IInvoiceItem item = (IInvoiceItem) allInvoice.getItems().get(invS);
														//Chee Seng 11th June 2004, bugId: 6116
														//Chee Seng 29th Nov 2004, bugId: 8703
														System.out.println("item.getGLAccount() = "+item.getGLAccount());
														System.out.println("item.getOfficeCode() = "+item.getOfficeCode());
														System.out.println("item.getCostCenterId() = "+item.getCostCenterId());
														System.out.println("item.getCostCenterOfficeCode() = "+item.getCostCenterOfficeCode());
														System.out.println("item.getDifferentOfficeGLAccount() = "+item.getDifferentOfficeGLAccount());
														System.out.println("item.getDifferentOfficeGLAccountKS() = "+item.getDifferentOfficeGLAccountKS());
														System.out.println("item.getDifferentOfficeCostCenterId() = "+item.getDifferentOfficeCostCenterId());
														System.out.println("item.getDifferentOfficeCostCenterIdKS() = "+item.getDifferentOfficeCostCenterIdKS());
											}
      }
      if (nonVATableInvoice.getItems().size() > 0) {
        nonVATableInvoice = createParkDebtorInvoice(nonVATableInvoice, user);
        //karen BugId: 21560 7 May 2007 remove the updateBLorSONumber function
        /*
		//karen BugId:18364 21 Nov 2006,  BLNumber has been moved the to the item level
		if (bo.getExternalSystemType() == null || bo.getExternalSystemType().equals("")) {
			if(bo.getSCN()!=null && !bo.getSCN().equals("")){
				for(int i=0; i<nonVATableInvoice.getItems().size(); i++){
					IInvoiceItem  invoiceItem = (IInvoiceItem) nonVATableInvoice.getItems().get(i);
						ACRToVIMSConnector.updateBLorSONumber(user.getIcmsSession(),nonVATableInvoice.getInvoiceNumber(),com.portrade.ipms.icms.Date.newInstance(bo.getDocumentDate()),bo.getSCN(), invoiceItem.getImportExportFlag(),invoiceItem.getBlNumber(),false);
				}
			}
		}*/
        invoiceList.add(nonVATableInvoice);
        //		BugId: 16934 30 May 2006 set the document number to create the debtor journal
        if (nonVATableInvoice.getDocumentNumber() != null) {
          bo.setDocumentNumber(nonVATableInvoice.getDocumentNumber());
        }
        if (nonVATableInvoice.getCrossOfficeNumber() != null) {
          bo.setCrossOfficeNumber(nonVATableInvoice.getCrossOfficeNumber());
        }
		if (nonVATableInvoice.getDocumentDueDate() != null) {
		  bo.setDocumentDueDate(nonVATableInvoice.getDocumentDueDate());
		}
		
		System.out.println("allInvoice.getItems().size() = "+allInvoice.getItems().size());
							allInvoice=nonVATableInvoice;
							System.out.println("after createParkDebtorInvoice, nonVATInv :-----");
										System.out.println("allInvoice.getGLAccount()"+allInvoice.getGLAccount());
										System.out.println("allInvoice.getGLAccount()"+allInvoice.getDifferentOfficeGLAccountKS());
										System.out.println("allInvoice.getGLAccount()"+allInvoice.getDifferentOfficeCostCenterIdKS());
										for(int invS = 0 ; invS< allInvoice.getItems().size(); invS++){
											IInvoiceItem item = (IInvoiceItem) allInvoice.getItems().get(invS);
													//Chee Seng 11th June 2004, bugId: 6116
													//Chee Seng 29th Nov 2004, bugId: 8703
													System.out.println("item.getGLAccount() = "+item.getGLAccount());
													System.out.println("item.getOfficeCode() = "+item.getOfficeCode());
													System.out.println("item.getCostCenterId() = "+item.getCostCenterId());
													System.out.println("item.getCostCenterOfficeCode() = "+item.getCostCenterOfficeCode());
													System.out.println("item.getDifferentOfficeGLAccount() = "+item.getDifferentOfficeGLAccount());
													System.out.println("item.getDifferentOfficeGLAccountKS() = "+item.getDifferentOfficeGLAccountKS());
													System.out.println("item.getDifferentOfficeCostCenterId() = "+item.getDifferentOfficeCostCenterId());
													System.out.println("item.getDifferentOfficeCostCenterIdKS() = "+item.getDifferentOfficeCostCenterIdKS());
										}

      }
      //remove me below '}' if not avail
	  allInvoice = bo;
      }
      if (bo.getDirectPostingJournalFlag() != null && bo.getDirectPostingJournalFlag().equals(Boolean.TRUE)) {
        //TODO:
        //createJournalForDebtorInvoice(bo, user);
		createJournalForDebtorInvoice(allInvoice, user);
		
      }
	  System.out.println("**nonVATableInvoice.exchange rate = "+ nonVATableInvoice.getExchangeRate() +"** ");
		  System.out.println("**VATableInvoice.exchange rate = "+ VATableInvoice.getExchangeRate() +"** ");
    }
    catch (com.portrade.ipms.afms.exceptions.CustomerAccountBalanceNotEnoughException ex) {
      // karen July 31 2006 BugId: 17781
      exceptionList.add(
          new com.portrade.ipms.afms.exceptions.ExtraInfoException(
          new com.portrade.ipms.afms.exceptions.CustomerAccountBalanceNotEnoughException(new Object[]{}),
          new Object[]{"", "", "", ""}));

      com.portrade.ipms.afms.exceptions.AFMSListException listException = new com.portrade.ipms.afms.exceptions.AFMSListException(exceptionList);
      sessionContext.setRollbackOnly();

      throw listException;
    }

    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }

    return invoiceList;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param VATableInvoice Description of the Parameter
   * @param nonVATableInvoice Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {8F3BD955-7C6E-4F70-84E7-9FB7149033FE}
   */
  public void groupInvoiceItem(IARDocument bo, IARDocument VATableInvoice, IARDocument nonVATableInvoice, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();

      IInvoiceItem item = null;

      com.portrade.ipms.afms.dao.CostCenterDAO dao = (com.portrade.ipms.afms.dao.CostCenterDAO) DAOProxy.getDAO("costCenter", user);

      Map costCenterMap = new HashMap();
      long groupInvStartTime = System.currentTimeMillis();
      for (int i = 0; i < bo.getItems().size(); i++) {
        item = (IInvoiceItem) bo.getItems().get(i);
        if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_RC_FLAG_FOR_INVOICE))) {
          // might occur the cost center that belongs to the other office code
          // find the different office code
          if (item.getCostCenterId() != null && !item.getCostCenterId().equals("")) {
            item.setDifferentOfficeGLAccount(item.getGLAccount());
            item.setDifferentOfficeCostCenterId(item.getCostCenterId());
            Logger.getInstance().logDebug("item.getDifferentOfficeGLAccount()====" + item.getDifferentOfficeGLAccount());
            Logger.getInstance().logDebug("item.getDifferentOfficeCostCenterId()====" + item.getDifferentOfficeCostCenterId());
            if (dao != null) {
              AbstractCriteria[] filter = {
                  new Criteria(com.portrade.ipms.afms.dao.CostCenterDAO.FILTER_COSTCENTERID, "=", item.getCostCenterId()),
                  };

              java.util.List results = DAOProxy.list("costCenter", user, filter);
              if (results.size() > 0) {
                ICostCenter costCenter = (ICostCenter) results.get(0);
                item.setCostCenterOfficeCode(costCenter.getOfficeCode());
              }

              if (!bo.getOfficeCode().equals(item.getCostCenterOfficeCode())) {
                //directPostingJournalFlag is use to determine whether the journal is require
                bo.setDirectPostingJournalFlag(Boolean.TRUE);
                VATableInvoice.setDirectPostingJournalFlag(Boolean.TRUE);
                nonVATableInvoice.setDirectPostingJournalFlag(Boolean.TRUE);
                try {
                  /*IOffice office = generalLedgerSetup.retrieveOffice(item.getCostCenterOfficeCode(), user);
                IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getCostCenterOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, item.getPostingKey(), user);
                item.setGLAccount(automaticAccountAssignment.getGlAccount());*/
                  //ffgan - 22684 (Performance Tuning)
                  if (costCenterMap.containsKey(item.getCostCenterOfficeCode())) {
                    item.setGLAccount((String) costCenterMap.get(item.getCostCenterOfficeCode()));
                  }
                  else {
                    IOffice office = generalLedgerSetup.retrieveOffice(item.getCostCenterOfficeCode(), user);
                    IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getCostCenterOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, item.getPostingKey(), user);
                    item.setGLAccount(automaticAccountAssignment.getGlAccount());
                    costCenterMap.put(item.getCostCenterOfficeCode(), automaticAccountAssignment.getGlAccount());
                  }

                }
                catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
                  sessionContext.setRollbackOnly();
                  throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
                }
              }
            }
            else {
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
            }
          }
        }

        if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_TAX_CODE_FLAG))) {
          if (item.getTaxCode() != null && !item.getTaxCode().equals("")) {
            VATableInvoice.addItem(item);
          }
          else {
            nonVATableInvoice.addItem(item);
          }
        }
        else {
          if (bo.getTaxCode() != null && !bo.getTaxCode().equals("")) {
            VATableInvoice.addItem(item);
          }
          else {
            nonVATableInvoice.addItem(item);
          }
        }

      }
      Logger.getInstance().logDebug("AFMS Time taken for ACR.groupInvoiceItem = " + (System.currentTimeMillis() - groupInvStartTime));

    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param VATableInvoice Description of the Parameter
   * @param nonVATableInvoice Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {5115FC33-1183-4206-8C76-93854DDE964A}
   */
  public void calculateTaxForVATableInvoiceItems(IARDocument VATableInvoice, IARDocument nonVATableInvoice, IUser user) throws AFMSException {
    IInvoiceItem item = null;
    ITaxCalculation taxCalculation = new TaxCalculationValue();
    IInvoiceItem invoiceItem = new DebtorInvoiceItemValue();
    ICalculateExchangeRateAmount calculateExchangeRateAmount = new CalculateExchangeRateAmountValue();
    CommonFunction commonFunction = null;
    GeneralLedgerSetup generalLedgerSetup = null;

    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
	
	String invtype = "unknown";
	if(VATableInvoice.getExternalSystemType()!=null && VATableInvoice.getExternalSystemType().length()>0){
		 invtype = "Non manual invoice";
	}
	else{
		invtype = "Manual invoice";
	}
	System.out.println("running calculateTaxForVATableInvoiceItems for "+ invtype);
    try {
		System.out.println("\n\n\nin calculateTaxForVATableInvoiceItems \n");
      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_TAX_CODE_FLAG))) {
        int i = 0;
        while (i < VATableInvoice.getItems().size()) {
          //for(int i=0; i<VATableInvoice.getItems().size(); i++)
          item = (IInvoiceItem) VATableInvoice.getItems().get(i);
          if (item.isNewItemIndicator() != null && item.isNewItemIndicator().equals(Boolean.TRUE)) {
            taxCalculation = commonFunction.calculateTax(item.getTaxCode(), item.getAmount(), user);
            System.out.println("inside calculateTaxForVATableInvoiceItems, VATableInvoice item "+i 
            +" amt = "+item.getAmount());
            if (taxCalculation.getTaxAmount() == null || taxCalculation.getTaxAmount().doubleValue() == 0) {
				System.out.println("non VATable invoice");
              nonVATableInvoice.addItem(item);
              VATableInvoice.getItems().remove(i);
              i=i-1;
              //TODO: remove me if not available
			  boolean splitVATflag = SystemProfile.isTrue(SystemProfile.AFMS_SPLIT_INVOICE_TO_VAT_AND_NONVAT);
			  if(splitVATflag){
			  	VATableInvoice.setAmount(VATableInvoice.getAmount().subtract(item.getAmount()));
			  }
            }
            else {
				System.out.println("VATable invoice");
				
				System.out.println("VATableInvoice.getDirectPostingJournalFlag() = "+VATableInvoice.getDirectPostingJournalFlag());
				
              //item.setAmount(item.getAmount().subtract(taxCalculation.getTaxAmount()));

              invoiceItem = new DebtorInvoiceItemValue();
              invoiceItem.copyPropertiesFrom(item);
			  System.out.println("invoiceItem.getDirectPostingJournalFlag() = "+invoiceItem.getDirectPostingJournalFlag());
              invoiceItem.setCustomerType(item.getCustomerType());
              //invoiceItem.setFiscalYear(item.getFiscalYear());
              //invoiceItem.setOfficeCode(item.getOfficeCode());
              invoiceItem.setQuantity(item.getQuantity());
              //invoiceItem.setTaxCode(item.getTaxCode());
              //invoiceItem.setCostCenterId(item.getCostCenterId());
              //invoiceItem.setRemark(item.getRemark());
              //invoiceItem.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
              
              //invoiceItem.setGLAccount(taxCalculation.getGLAccount());
              invoiceItem.setPostingKey(taxCalculation.getPostingKey());
              invoiceItem.setAmount(taxCalculation.getTaxAmount());
              invoiceItem.setTariffCode(item.getTariffCode());
              invoiceItem.setTaxIndicator(new Boolean(true));
              invoiceItem.setParentItemNumber(new Integer(i + 1));
              invoiceItem.setUOM(item.getUOM());
              invoiceItem.setUnitPrice(item.getUnitPrice());
              invoiceItem.setCargoType(item.getCargoType());
              invoiceItem.setCommodityType(item.getCommodityType());
              //Chee Seng 11th June 2004, bugId: 6116
              invoiceItem.setQuantity2(item.getQuantity2());
              invoiceItem.setUOM2(item.getUOM2());
              //GST remove tax amount for tax as Lee Ching requested
			  invoiceItem.setTaxAmount(null);
			  //TODO:
			  if(!taxCalculation.getPostingOfficeCode().equalsIgnoreCase(VATableInvoice.getOfficeCode())){
			  invoiceItem.setDifferentOfficeGLAccount(taxCalculation.getGLAccount());
				invoiceItem.setDifferentOfficeCostCenterId(taxCalculation.getPostingOfficeCode());
				invoiceItem.setCostCenterOfficeCode(taxCalculation.getPostingOfficeCode());
			  }
				
			  if(taxCalculation.getPostingOfficeCode().equalsIgnoreCase(VATableInvoice.getOfficeCode())){
				
				invoiceItem.setGLAccount(taxCalculation.getGLAccount());
				invoiceItem.setCostCenterId(taxCalculation.getPostingOfficeCode());
				invoiceItem.setOfficeCode(taxCalculation.getPostingOfficeCode());
				
				invoiceItem.setDifferentOfficeCostCenterId(null);
				invoiceItem.setDifferentOfficeGLAccount(null);
				invoiceItem.setCostCenterOfficeCode(null);
				   }
			  

              //Get the amount in local currency for tax item master
              /*
	             * calculateExchangeRateAmount = null;
	             * calculateExchangeRateAmount = new CalculateExchangeRateAmountValue();
	             * calculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(item.getAmount(), item.getAmountInLocalCurrency(), bo.getExchangeRate(),
	             * bo.getOfficeCode(), bo.getCurrency(), bo.getDocumentDate(), user);
	             * item.setAmountInLocalCurrency(calculateExchangeRateAmount.getAmountLocalCurrency());
	             * /Get the amount in local currency for tax item detail
	             * calculateExchangeRateAmount = null;
	             * calculateExchangeRateAmount = new CalculateExchangeRateAmountValue();
	             * calculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(invoiceItem.getAmount(), invoiceItem.getAmountInLocalCurrency(), bo.getExchangeRate(),
	             * bo.getOfficeCode(), bo.getCurrency(), bo.getDocumentDate(), user);
	             * invoiceItem.setAmountInLocalCurrency(calculateExchangeRateAmount.getAmountLocalCurrency());
	             */
              IPostingKey postingKey = generalLedgerSetup.retrievePostingKey(invoiceItem.getPostingKey(), user);
              invoiceItem.setDebitCreditType(postingKey.getDebitCredit());

              VATableInvoice.getItems().add(i + 1, invoiceItem);
              //GST add tax amount and set tax indi to null on header
			  VATableInvoice.setTaxIndicator(null);
			  //TODO: remove me if not available
			  boolean splitVATflag = SystemProfile.isTrue(SystemProfile.AFMS_SPLIT_INVOICE_TO_VAT_AND_NONVAT);
			  if(splitVATflag){
				DebtorInvoiceItemValue tempvalue = (DebtorInvoiceItemValue)VATableInvoice.getItems().get(i);
			  	nonVATableInvoice.setAmount(nonVATableInvoice.getAmount().subtract(invoiceItem.getAmount().add(
			  	tempvalue.getAmount())));
			  }
              if(VATableInvoice.getTaxAmount()!=null){
				VATableInvoice.setTaxAmount(VATableInvoice.getTaxAmount().add(invoiceItem.getAmount()));
              }
              else{
              	
				VATableInvoice.setTaxAmount(invoiceItem.getAmount());
              }
              i = i + 1;
            }
          }
          i = i + 1;
        }
      }
      else {
        if (VATableInvoice.isNewInvoiceIndicator() != null && VATableInvoice.isNewInvoiceIndicator().equals(Boolean.TRUE)) {
          if (VATableInvoice.getTaxCode() != null && !VATableInvoice.getTaxCode().equals("")) {
            taxCalculation = commonFunction.calculateTax(VATableInvoice.getTaxCode(), VATableInvoice.getAmount(), user);

            if (taxCalculation.getTaxAmount() != null || taxCalculation.getTaxAmount().doubleValue() != 0) {
              VATableInvoice.setAmount(VATableInvoice.getAmount().subtract(taxCalculation.getTaxAmount()));
              VATableInvoice.setAmountInLocalCurrency(null);
              invoiceItem = new DebtorInvoiceItemValue();
              invoiceItem.copyPropertiesFrom(VATableInvoice);
              IPostingKey postingKey = generalLedgerSetup.retrievePostingKey(invoiceItem.getPostingKey(), user);
              invoiceItem.setPostingKey(postingKey.getCode());
              invoiceItem.setDebitCreditType(postingKey.getDebitCredit());
              if(VATableInvoice.getDirectPostingJournalFlag()!=null) {
	              
	              if(VATableInvoice.getDirectPostingJournalFlag().equals(Boolean.TRUE)){
					invoiceItem.setDifferentOfficeGLAccount(taxCalculation.getGLAccount());
					invoiceItem.setDifferentOfficeCostCenterId(taxCalculation.getPostingOfficeCode());
					invoiceItem.setCostCenterOfficeCode(taxCalculation.getPostingOfficeCode());
	              }
	              else{
					invoiceItem.setGLAccount(taxCalculation.getGLAccount());
					invoiceItem.setCostCenterId(taxCalculation.getPostingOfficeCode());
					
	              }
              }
              else{
				throw new CannotCreateRecordException(null);
              }
              
              
              invoiceItem.setTaxIndicator(Boolean.TRUE);
              invoiceItem.setParentItemNumber(new Integer(0));
              invoiceItem.setAmount(taxCalculation.getTaxAmount());
              invoiceItem.setAmountInLocalCurrency(null);

              VATableInvoice.getItems().add(0, invoiceItem);

            }
          }
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param customerType Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param officeCode Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {3C1CC327-2415-49B5-A64A-E0475211D678}
   */
  public com.portrade.ipms.afms.IARDocument retrieveParkDebtorInvoice(String customerType, Integer fiscalYear, String officeCode, Long documentNumber, com.portrade.ipms.icms.IUser user) throws AFMSException {
    com.portrade.ipms.afms.IARDocument bo = new DebtorInvoiceValue();
    com.portrade.ipms.afms.IInvoiceItem item = new DebtorInvoiceItemValue();

    try {
      com.portrade.ipms.afms.dao.InvoiceDAO dao = (com.portrade.ipms.afms.dao.InvoiceDAO) DAOProxy.getDAO("invoice", user);
      if (dao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_CUSTOMERTYPE, "=", customerType),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
            };

        java.util.List results = DAOProxy.list("invoice", user, filter);

        if (results.size() > 0) {
          bo = (IARDocument) results.get(0);
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      com.portrade.ipms.afms.dao.InvoiceItemDAO itemDao = (com.portrade.ipms.afms.dao.InvoiceItemDAO) DAOProxy.getDAO("invoiceItem", user);
      if (itemDao != null) {
        //Chee Seng 15th July 2004, bugId: 6624
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_OFFICECODE, "=", InvoiceItemDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_FISCALYEAR, "=", InvoiceItemDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceItemDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_ITEMNO, "=", InvoiceItemDAO.FILTER_GLACCOUNTITEM_ITEMNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false)),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_CUSTOMERTYPE, "=", customerType),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
            };

        OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.InvoiceItemDAO.FILTER_ITEMNO)};

        java.util.List results = DAOProxy.list("invoiceItem", user, filter, order);

        if (results != null && results.size() > 0) {
          if (!Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_TAX_CODE_FLAG))) {
            item = (IInvoiceItem) results.get(0);

            if (item.isTaxIndicator() != null && item.isTaxIndicator().equals(Boolean.TRUE)) {
              if (item.getParentItemNumber() != null && item.getParentItemNumber().doubleValue() == 0) {
                bo.setTaxAmount(item.getAmount());
                bo.setTaxAmountInLocalCurrency(item.getAmountInLocalCurrency());
                results.remove(0);

              }
            }
          }
          Iterator iterator = results.iterator();
          while (iterator.hasNext()) {
            IInvoiceItem invoiceItem = (IInvoiceItem) iterator.next();
            Logger.getInstance().logDebug("invoiceItem.getDifferentOfficeGLAccount() = " + invoiceItem.getDifferentOfficeGLAccount());
            if (invoiceItem.getDifferentOfficeGLAccount() != null && !invoiceItem.getDifferentOfficeGLAccount().equals("")) {
              invoiceItem.setGLAccount(invoiceItem.getDifferentOfficeGLAccount());
            }
            if (invoiceItem.getDifferentOfficeCostCenterId() != null && !invoiceItem.getDifferentOfficeCostCenterId().equals("")) {
              invoiceItem.setCostCenterId(invoiceItem.getDifferentOfficeCostCenterId());
            }
            bo.addItem(invoiceItem);
          }

        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {F31EF322-2A4B-4F8A-810B-2D29592A60B5}
   */
  public IARDocument updateParkDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    java.util.ArrayList invoiceItemList = null;
    InvoiceItem invoiceItem = null;
    Invoice invoice = null;
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    IInvoiceItem invoiceItemBO = new DebtorInvoiceItemValue();
    CommonFunction commonFunction = null;
    ICustomer customerBO = new DebtorAccountValue();
    IARDocument nonVATableInvoice = new DebtorInvoiceValue();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IARDocument nonVATInvoiceBO = new DebtorInvoiceValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateUpdateParkDebtorInvoice(bo, user);
      validateParkDebtorInvoice(bo, user);

      //Get the document due date
      java.sql.Date entryDate = java.sql.Date.valueOf(String.valueOf(AFMSUtilities.getCalendar().get(Calendar.YEAR)) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.MONTH) + 1) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.DATE)));
      java.sql.Date documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), entryDate, bo.getDocumentDate(), bo.getPostingDate(), user);
      bo.setDocumentDueDate(documentDueDate);

      //Get the reconciliation account
      customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
    }
    //Chee Seng 16th June 2004, bugId: 5896
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      invoiceItemList = new java.util.ArrayList(invoiceItemHome.findByDocumentNumber(bo.getCustomerType(), bo.getFiscalYear(), bo.getOfficeCode(), new Integer(bo.getDocumentNumber().toString())));
      if (invoiceItemList != null) {
        for (int i = 0; i < invoiceItemList.size(); i++) {
          invoiceItem = (InvoiceItem) invoiceItemList.get(i);

          //Chee Seng 4th July 2005, bugId: 11719
          /*
          AbstractCriteria[] filter = {new Criteria(InvoiceItemDAO.FILTER_CUSTOMERTYPE, "=", bo.getCustomerType()), new Criteria(InvoiceItemDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()), new Criteria(InvoiceItemDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()), new Criteria(InvoiceItemDAO.FILTER_DOCUMENTNUMBER, "=", bo.getDocumentNumber()), new Criteria(InvoiceItemDAO.FILTER_ITEMNO, "=", invoiceItem.getItemNo())};
          DAOProxy.setAuditUserInformation("afmsInvoiceItem", "InvoiceItem", filter, user);
					*/
          ACRAuditTrail.deleteLogAuditTrail(invoiceItem, user);
          invoiceItem.remove();
        }
      }
    }
    //Chee Seng 4th July 2005, bugId: 11719
    /*
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }*/
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    if (bo.isTaxIndicator() != null && bo.isTaxIndicator().equals(Boolean.TRUE)) {
      calculateTaxForVATableInvoiceItems(bo, nonVATableInvoice, user);
    }

    //Assign value from invoice to account item header
    if (bo.isTaxIndicator() == null || bo.isTaxIndicator().equals(Boolean.FALSE)) {
      bo.setTaxIndicator(null);
    }
    glAccountItemBO = new AbstractGLAccountItemValue();
    glAccountItemBO.copyPropertiesFrom(bo);
    glAccountItemBO.setHeaderIndicator(new Boolean(true));
    glAccountItemBO.setGLAccount(customerBO.getReconAccountId());
    glAccountItemBO.setPostingPeriod(null);
    postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

    //Assign value from invoice item to account item detail
    for (int i = 0; i < bo.getItems().size(); i++) {
      invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
      invoiceItemBO.setCustomerType(bo.getCustomerType());
      invoiceItemBO.setOfficeCode(bo.getOfficeCode());
      invoiceItemBO.setDocumentNumber(bo.getDocumentNumber());
      invoiceItemBO.setItemNo(new Integer(i + 1));
			invoiceItemBO.setScn(bo.getSCN());
			
      glAccountItemBO = new AbstractGLAccountItemValue();
      glAccountItemBO.copyPropertiesFrom(invoiceItemBO);
      glAccountItemBO.setDocumentType(bo.getDocumentType());
      glAccountItemBO.setDocumentDate(bo.getDocumentDate());
      glAccountItemBO.setPostingDate(bo.getPostingDate());
      glAccountItemBO.setProcessStatus(bo.getProcessStatus());
      glAccountItemBO.setCurrency(bo.getCurrency());
      glAccountItemBO.setHeaderIndicator(new Boolean(false));
      glAccountItemBO.setPostingPeriod(bo.getPostingPeriod());

      if (glAccountItemBO.isTaxIndicator() == null || glAccountItemBO.isTaxIndicator().booleanValue() == false) {
        glAccountItemBO.setTaxIndicator(null);
      }
      if (glAccountItemBO.getParentItemNumber() == null || glAccountItemBO.getParentItemNumber().compareTo(new Integer(0)) == 0) {
        glAccountItemBO.setParentItemNumber(null);
      }
      postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
    }

    try {
      java.util.List glaccountItemList = commonFunction.updateDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Assign glaccount header to invoice
    bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));

    try {
      //update invoice
      invoice = invoiceHome.findByPrimaryKey(new InvoicePK(bo.getCustomerType(), bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
      invoice.setDocumentDueDate(bo.getDocumentDueDate());
      invoice.setTranslationDate(bo.getTranslationDate());
      invoice.setSCN(bo.getSCN());
      invoice.setPaymentTerm(bo.getPaymentTerm());
      invoice.setPaymentBlockStatus(bo.isPaymentBlockStatus());
      //Chee Seng 3rd Feb 2005, bugId: 9790
      invoice.setProtestStatus(bo.getProtestStatus());
      invoice.setLastUpdateBy(user.getId());
      invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 4th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(invoice, user);
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //create invoice item
    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
        //Chee Seng 11th June 2004, bugId: 6116
        //Chee Seng 29th Nov 2004, bugId: 8703
        invoiceItem = invoiceItemHome.create(new InvoiceItemPK(bo.getCustomerType(), bo.getFiscalYear(), bo.getOfficeCode(), bo.getDocumentNumber(), invoiceItemBO.getItemNo()), invoiceItemBO.getQuantity(), invoiceItemBO.getTariffCode(), invoiceItemBO.getUOM(), invoiceItemBO.getUnitPrice(), invoiceItemBO.getCargoType(), invoiceItemBO.getCommodityType(), invoiceItem.getQuantity2(), invoiceItem.getUom2(), invoiceItem.getTonnage(), invoiceItem.getCostCenterOfficeCode(), invoiceItem.getDifferentOfficeGLAccount(), invoiceItem.getDifferentOfficeCostCenterId(), invoiceItem.getImportExportFlag(), invoiceItem.getBLNumber(), invoiceItem.getSCN(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        //Chee Seng 4th July 2005, bugId: 11719
        ACRAuditTrail.insertLogAuditTrail(invoiceItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param customerType Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param officeCode Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {21610EBB-71E3-4685-9926-838AF150D050}
   */
  public IARDocument deleteParkDebtorInvoice(String customerType, Integer fiscalYear, String officeCode, Long documentNumber, String budgetActionIndicator, com.portrade.ipms.icms.IUser user) throws AFMSException {
    java.util.ArrayList invoiceItemList = null;
    java.util.ArrayList glAccountItemList = null;

    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    InvoiceItem invoiceItem = null;
    CommonFunction commonFunction = null;
    com.portrade.ipms.afms.IARDocument bo = new DebtorInvoiceValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateDeleteParkDebtorInvoice();
      commonFunction.deleteParkedDocument(officeCode, fiscalYear, documentNumber, budgetActionIndicator, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {40EE9DBE-306D-4D43-9B77-864C13DA0962}
   */
  public void updatePostDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    IInvoiceItem invoiceItemBO = new DebtorInvoiceItemValue();
    CommonFunction commonFunction = null;
    java.util.ArrayList invoiceList = new java.util.ArrayList();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateUpdatePostDebtorInvoice(bo, user);

      invoiceList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);

      for (int j = 0; j < invoiceList.size(); j++) {
        glAccountItemBO = (IAbstractGLAccountItem) invoiceList.get(j);
        //update master
        if (glAccountItemBO.isHeaderIndicator().equals(Boolean.TRUE)) {
          glAccountItemBO.setReference(bo.getReference());
          glAccountItemBO.setReferenceType(bo.getReferenceType());
          glAccountItemBO.setRemark(bo.getRemark());
        }
        //update detail
        else {
          for (int i = 0; i < bo.getItems().size(); i++) {
            invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
            if (invoiceItemBO.getItemNo().compareTo(glAccountItemBO.getItemNo()) == 0) {
              glAccountItemBO.setRemark(invoiceItemBO.getRemark());
            }
          }
        }
        postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
      }
      commonFunction.updateDocument(postParkedDocumentBO.getGLAccountItems(), user);
    }
    catch (com.portrade.ipms.afms.exceptions.ExtraInfoException ex) {
      sessionContext.setRollbackOnly();
      throw ex.getEx();
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {3D50E825-2C80-4CFD-8758-3B9F24C9D855}
   */
  public IClearingTransaction createAutoClearingTransaction(IClearingTransaction bo, IUser user) throws AFMSException {
    List debitList = new ArrayList();
    List creditList = new ArrayList();
    List itemList = new ArrayList();
    BigDecimal outStandingAmountInLocalCurrency = new BigDecimal(0);
    BigDecimal currentAmountInLocalCurrency = new BigDecimal(0);
    BigDecimal paidAmountInLocalCurrency = new BigDecimal(0);
    IAbstractGLAccountItem newGlAccountItem = new AbstractGLAccountItemValue();
    IAbstractGLAccountItem newGLItem = new AbstractGLAccountItemValue();
    IClearingTransactionItem clearingTrans = null;
    IClearingTransactionItem clearingTrans1 = null;
    IClearingTransactionItem clearingTrans0 = null;
    IAbstractGLAccountItem glItem3 = new AbstractGLAccountItemValue();
    //Chee Seng 26th Jan 2005, bugId: 9451
    IClearingTransactionItem clearingTransBO = null;
    BigDecimal zero = new BigDecimal("0.00");
    BigDecimal creditableWithholdingTaxAmount = zero;
    BigDecimal expandedWithholdingTaxAmount = zero;
    BigDecimal totalCWT = zero;
    BigDecimal totalEWT = zero;
    IClearingTransaction tempBO = new ClearingTransactionValue();

    com.portrade.ipms.afms.dao.ClearingTransactionDAO dao = (com.portrade.ipms.afms.dao.ClearingTransactionDAO) DAOProxy.getDAO("ClearingTransaction", user);

    try {
      //Chee Seng 22nd Dec 2004, bugId: 9014
      debitList = dao.listDebitRecord(bo.getOfficeCode(), bo.getSubledgerAccount(), bo.getFilteredDebitTypeList());
      Logger.getInstance().logDebug("debitList.size()=" + debitList.size());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }

    try {
      creditList = dao.listCreditRecord(bo.getOfficeCode(), bo.getSubledgerAccount(), bo.getFilteredCreditTypeList());
      Logger.getInstance().logDebug("creditList.size()=" + creditList.size());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }

    for (int i = 0; i < debitList.size(); i++) {
      IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) debitList.get(i);

      if ((i != 0) && (outStandingAmountInLocalCurrency.compareTo(new BigDecimal(0)) == 0)) {
        glItem3 = (IAbstractGLAccountItem) debitList.get(i - 1);
        clearingTrans0 = new ARClearingTransactionItemValue();
        clearingTrans0.copyPropertiesFrom(glItem3);
        clearingTrans0.setTransactionDocumentNumber(clearingTrans0.getDocumentNumber());
        clearingTrans0.setPaidAmount((clearingTrans0.getAmount().subtract((clearingTrans0.getClearedAmount() != null ? clearingTrans0.getClearedAmount() : new BigDecimal(0)))).multiply(
            (clearingTrans0.getExchangeRate())));
        clearingTrans0.setClearedAmount((clearingTrans0.getClearedAmount() != null ? clearingTrans0.getClearedAmount() : new BigDecimal(0)).multiply(clearingTrans0.getExchangeRate()));
        clearingTrans0.setTransactionAmount(clearingTrans0.getAmountInLocalCurrency().subtract(clearingTrans0.getClearedAmount()));
        bo.addGLAccountItems(clearingTrans0);
      }

      if (outStandingAmountInLocalCurrency.compareTo(new BigDecimal(0)) != 0) {
        break;
      }
      else {
        outStandingAmountInLocalCurrency = (glItem.getAmountInLocalCurrency() != null ? glItem.getAmountInLocalCurrency() : new BigDecimal(0)).subtract(
            ((glItem.getClearedAmount() != null ? glItem.getClearedAmount() : new BigDecimal(0)).multiply(glItem.getExchangeRate())));

      }

      for (int j = 0; j < creditList.size(); j++) {
        IAbstractGLAccountItem glItem2 = (IAbstractGLAccountItem) creditList.get(j);
        currentAmountInLocalCurrency = outStandingAmountInLocalCurrency.subtract(paidAmountInLocalCurrency).subtract(creditableWithholdingTaxAmount).subtract(expandedWithholdingTaxAmount);
        paidAmountInLocalCurrency = paidAmountInLocalCurrency.add(((glItem2.getAmount() != null ? glItem2.getAmount() : new BigDecimal(0)).subtract(
            (glItem2.getClearedAmount() != null ? glItem2.getClearedAmount() : new BigDecimal(0))).multiply(glItem2.getExchangeRate())));

        //Chee Seng 26th Jan 2005, bugId: 9451
        if (paidAmountInLocalCurrency.compareTo(outStandingAmountInLocalCurrency) >= 0) {

          for (int k = 0; k < itemList.size(); k++) {
            IAbstractGLAccountItem items = (IAbstractGLAccountItem) itemList.get(k);
            clearingTrans = new ARClearingTransactionItemValue();
            clearingTrans.copyPropertiesFrom(items);
            clearingTrans.setTransactionDocumentNumber(clearingTrans.getDocumentNumber());
            clearingTrans.setPaidAmount((clearingTrans.getAmount().subtract(clearingTrans.getClearedAmount())).multiply((clearingTrans.getExchangeRate())));
            clearingTrans.setTransactionAmount(clearingTrans.getAmountInLocalCurrency().subtract(clearingTrans.getClearedAmount()));
            clearingTrans.setClearedAmount(clearingTrans.getAmountInLocalCurrency().subtract(clearingTrans.getClearedAmount().multiply(clearingTrans.getExchangeRate())));
            bo.addGLAccountItems(clearingTrans);
          }
          clearingTrans1 = new ARClearingTransactionItemValue();
          clearingTrans1.copyPropertiesFrom(glItem2);
          clearingTrans1.setTransactionDocumentNumber(clearingTrans1.getDocumentNumber());
          clearingTrans1.setTransactionAmount(clearingTrans1.getAmountInLocalCurrency().subtract(clearingTrans1.getClearedAmount()));
          if (clearingTrans1.getTransactionAmount().compareTo(new BigDecimal(0)) == 0) {
            clearingTrans1.setTransactionAmount(clearingTrans1.getAmountInLocalCurrency().subtract(glItem2.getClearedAmount()));
          }
          clearingTrans1.setClearedAmount(currentAmountInLocalCurrency.add(clearingTrans1.getClearedAmount().multiply(clearingTrans1.getExchangeRate())));
          clearingTrans1.setPaidAmount(currentAmountInLocalCurrency);

          bo.addGLAccountItems(clearingTrans1);

          glItem2.setClearedAmount(glItem2.getClearedAmount().add((currentAmountInLocalCurrency).divide(
              glItem2.getExchangeRate(), 2, BigDecimal.ROUND_UP)));

          //reset the variable
          outStandingAmountInLocalCurrency = new BigDecimal(0);
          currentAmountInLocalCurrency = new BigDecimal(0);
          paidAmountInLocalCurrency = new BigDecimal(0);
          itemList.clear();

          if (glItem2.getClearedAmount().compareTo(glItem2.getAmount()) == 0) {
            creditList.remove(j);
            //Chee Seng 13th Jan 2005, bugId: 9320
            //if(j !=0){
            j--;
            //}
          }
          break;
        }
        else if (paidAmountInLocalCurrency.compareTo(outStandingAmountInLocalCurrency) < 0) {
          itemList.add(glItem2);
          creditList.remove(j);
          //Chee Seng 13th Jan 2005, bugId: 9320
          //if(j !=0){
          j--;
          //}
        }
      }
      if ((i == debitList.size() - 1) && (outStandingAmountInLocalCurrency.compareTo(new BigDecimal(0)) == 0)) {
        glItem3 = (IAbstractGLAccountItem) debitList.get(i);
        clearingTrans0 = new ARClearingTransactionItemValue();
        clearingTrans0.copyPropertiesFrom(glItem3);
        clearingTrans0.setTransactionDocumentNumber(clearingTrans0.getDocumentNumber());
        clearingTrans0.setPaidAmount((clearingTrans0.getAmount().subtract((clearingTrans0.getClearedAmount() != null ? clearingTrans0.getClearedAmount() : new BigDecimal(0)))).multiply(
            (clearingTrans0.getExchangeRate())));
        clearingTrans0.setClearedAmount((clearingTrans0.getClearedAmount() != null ? clearingTrans0.getClearedAmount() : new BigDecimal(0)).multiply(clearingTrans0.getExchangeRate()));
        clearingTrans0.setTransactionAmount(clearingTrans0.getAmountInLocalCurrency().subtract(clearingTrans0.getClearedAmount()));
        bo.addGLAccountItems(clearingTrans0);
      }

    }

    List sortClearingTransactionItem = bo.getGLAccountItems();

    Collections.sort(sortClearingTransactionItem,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              if (o1 != null && o2 != null &&
                  o1 instanceof IClearingTransactionItem && o2 instanceof IClearingTransactionItem) {
                IClearingTransactionItem gli1 = (IClearingTransactionItem) o1;
                IClearingTransactionItem gli2 = (IClearingTransactionItem) o2;

                int value;
                value = gli1.getTransactionDocumentNumber().compareTo(gli2.getTransactionDocumentNumber());
                if (value != 0) {
                  return value;
                }
              }
              return 0;
            }
          });

    for (int x = 0; x < bo.getGLAccountItems().size(); x++) {
      IClearingTransactionItem gg = (IClearingTransactionItem) bo.getGLAccountItems().get(x);

      for (int y = x + 1; y < bo.getGLAccountItems().size(); y++) {
        IClearingTransactionItem next = (IClearingTransactionItem) bo.getGLAccountItems().get(y);

        BigDecimal totalTransactionAmount = new BigDecimal(0);
        BigDecimal totalPaidAmount = new BigDecimal(0);
        BigDecimal totalClearedAmount = new BigDecimal(0);

        if (next.getTransactionDocumentNumber().compareTo(gg.getTransactionDocumentNumber()) == 0) {
          if (next.getTransactionAmount().compareTo(gg.getTransactionAmount()) > 0) {
            totalTransactionAmount = next.getTransactionAmount();
          }
          else {
            totalTransactionAmount = gg.getTransactionAmount();
          }
          totalPaidAmount = next.getPaidAmount().add(gg.getPaidAmount());
          totalClearedAmount = next.getClearedAmount().add(gg.getClearedAmount());

          next.setTransactionAmount(totalTransactionAmount);
          next.setPaidAmount(totalPaidAmount);
          next.setClearedAmount(totalClearedAmount);

          bo.getGLAccountItems().remove(x);
          ///Chee Seng 13th Jan 2005, bugId: 9320
          //if(x!=0){
          x--;
          //}
        }
      }
    }
    createClearingTransaction(bo, user);
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {ED7686E8-44C4-4CCD-9172-5613C28F4BAB}
   */
  public IClearingTransaction createClearingTransaction(IClearingTransaction bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    ClearingTransaction clearingTransaction = null;
    ClearingTransactionItem clearingTransactionItem = null;
    Long documentNumber = null;
    Integer postingPeriod = null;

    validateCreateClearingTransaction(bo, user);
    validateClearingTransaction(bo, user);

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      if (bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
        bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
      }

      postingPeriod = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user);
      /*
       * if(postingPeriod != null && !postingPeriod.equals("")) {
       * if(postingPeriod.intValue() == 12) {
       * if(bo.getPostingPeriod() == null || bo.getPostingPeriod().equals("")) {
       * bo.setPostingPeriod(postingPeriod);
       * }
       * }
       * else {
       * bo.setPostingPeriod(postingPeriod);
       * }
       * }
       */
      bo.setPostingPeriod(postingPeriod);
      Logger.getInstance().logDebug("bo.getPostingPeriod() === " + bo.getPostingPeriod());
	  	if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) { 
				documentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), TransactionDocumentType.CLEARING_TRANSACTION, user);
				bo.setDocumentNumber(documentNumber);
	  	}
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    clearARTransaction(bo, user);

    try {
      clearingTransaction = clearingTransactionHome.create(new ClearingTransactionPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 5th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(clearingTransaction, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    try {
      for (int i = 0; i < bo.getGLAccountItems().size(); i++) {
        IClearingTransactionItem clearingTransactionBO = (IClearingTransactionItem) bo.getGLAccountItems().get(i);
        validateClearingTransactionItem(clearingTransactionBO, user);
        //Chee Seng 03rd Aug 2004, bugId: 6790
        clearingTransactionItem = clearingTransactionItemHome.create(new ClearingTransactionItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), new Integer(i + 1)), clearingTransactionBO.getTransactionDocumentNumber(), clearingTransactionBO.getTransactionAmount(), clearingTransactionBO.getPaidAmount(), clearingTransactionBO.getTransactionNumber(), clearingTransactionBO.getTransactionOfficeCode(), clearingTransactionBO.getTransactionGLAccount(), clearingTransactionBO.getTransactionFiscalYear(), clearingTransactionBO.getTransactionItemNumber(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        //Chee Seng 5th July 2005, bugId: 11719
        ACRAuditTrail.insertLogAuditTrail(clearingTransactionItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{ClearingTransactionItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{ClearingTransactionItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //clearARTransaction(bo, user);

    //Chee Seng 30th June 2004, bugId: 6339
    IDebtorClearingTransaction debtorClearingTransactionBO = null;
    java.util.List debtorClearingTransactionList = new java.util.ArrayList();
    for (int i = 0; i < bo.getGLAccountItems().size(); i++) {
      IClearingTransactionItem clearingTransactionItemBO = (IClearingTransactionItem) bo.getGLAccountItems().get(i);
      if (clearingTransactionItemBO.getTransactionDocumentNumber() != null && clearingTransactionItemBO.getTransactionFiscalYear() != null) {
        debtorClearingTransactionBO = new DebtorClearingTransactionValue();
        debtorClearingTransactionBO.setOfficeCode(bo.getOfficeCode());
        debtorClearingTransactionBO.setFiscalYear(clearingTransactionItemBO.getTransactionFiscalYear());
        debtorClearingTransactionBO.setDocumentNumber(clearingTransactionItemBO.getTransactionDocumentNumber());
        debtorClearingTransactionBO.setItemNumber(clearingTransactionItemBO.getTransactionItemNumber());
        debtorClearingTransactionBO.setDocumentDate(clearingTransactionItemBO.getTransactionDocumentDate());
        debtorClearingTransactionBO.setDebitCreditType(clearingTransactionItemBO.getDebitCreditType());
        debtorClearingTransactionBO.setTransactionDebitCreditType(clearingTransactionItemBO.getTransactionDebitCreditType());
        debtorClearingTransactionBO.setClearedAmountInLocalCurrency(clearingTransactionItemBO.getAmountInLocalCurrency());
        debtorClearingTransactionList.add(debtorClearingTransactionBO);
      }
    }
    Logger.getInstance().logDebug("debtorClearingTransactionList.size = " + debtorClearingTransactionList.size());
    try {
      createDebtorClearingTransaction(debtorClearingTransactionList, bo, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }

    if (bo.isInterOfficePostingIndicator() != null && bo.isInterOfficePostingIndicator().equals(Boolean.TRUE)) {
      createJournalForClearingTransaction(bo, user);
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {235C5D30-534D-4DCE-8029-8941EA80F8FB}
   */
  public void clearARTransaction(IClearingTransaction bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    AccountPayableManager accountPayableManager = null;
    java.util.ArrayList glAccountItemList = null;
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    ICalculateExchangeRateAmount calculateExchangeRateAmountBO = new CalculateExchangeRateAmountValue();
    GLAccountItem glAccountItem = null;
    IClearingTransactionItem clearingTransactionItemBO = new ARClearingTransactionItemValue();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    String reconAccountType = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    BigDecimal provSum = new BigDecimal(0.00);
    boolean surchargeIndicator = false;
    int itemNumber = bo.getGLAccountItems().size();
    
	Logger.getInstance().logDebug("inside clearARTransaction");
    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      accountPayableManager = accountPayableHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateClearARTransaction(bo, user);
      glAccountItemBO = new AbstractGLAccountItemValue();
      glAccountItemBO.copyPropertiesFrom(bo);
      glAccountItemBO.setHeaderIndicator(new Boolean(true));
      glAccountItemBO.setClearingDocumentIndicator(new Boolean(true));
      glAccountItemBO.setAmount(new BigDecimal("0"));
      glAccountItemBO.setAmountInLocalCurrency(new BigDecimal("0"));
      postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

//    Get and validate the recon account type for credit line item
      for (int i = 0; i < bo.getGLAccountItems().size(); i++) {
        clearingTransactionItemBO = (IClearingTransactionItem) bo.getGLAccountItems().get(i);
        Logger.getInstance().logDebug("clearingTransactionItemBO.getDebitCreditType() " + clearingTransactionItemBO.getDebitCreditType());
        Logger.getInstance().logDebug("clearingTransactionItemBO.getDocumentType() " + clearingTransactionItemBO.getDocumentType());
        Logger.getInstance().logDebug("clearingTransactionItemBO.getSpecialGLIndicator() " + clearingTransactionItemBO.getSpecialGLIndicator());
        /*  if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue()) {
          if (clearingTransactionItemBO.getDocumentType() != null && TransactionDocumentType.DEBTOR_PAYMENT.equals(clearingTransactionItemBO.getDocumentType())
               && clearingTransactionItemBO.getSpecialGLIndicator() != null && (clearingTransactionItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.MISCELLANEOUS) || clearingTransactionItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.REVOLVING_FUND)
               || clearingTransactionItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.SUFFERENCE) || clearingTransactionItemBO.getSpecialGLIndicator().equals(SpecialGLIndicator.VESSEL_ACCOUNT))) {
            //if (DebitCreditType.CREDIT.equals(debtorPaymentItemBO.getDebitCreditType())) {
            if (reconAccountType == null) {
              if (clearingTransactionItemBO.getReconAccountType() != null && !clearingTransactionItemBO.getReconAccountType().equals("")) {
                reconAccountType = clearingTransactionItemBO.getReconAccountType();
              }
            }
            else {
              if (clearingTransactionItemBO.getReconAccountType() != null && !clearingTransactionItemBO.getReconAccountType().equals(reconAccountType)) {
                sessionContext.setRollbackOnly();
                throw new com.portrade.ipms.afms.exceptions.DoNotMatchException(new Object[]{DebtorReconAccountTypeLabelId.ACCOUNT_TYPE});
              }
            }
          }
        }*/
        clearingTransactionItemBO.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());
      }

      int i = 0;
      while (i < bo.getGLAccountItems().size()) {
      	Logger.getInstance().logDebug("In the While Loop");
      	String documentType = null;
        //for (int i = 0; i < bo.getGLAccountItems().size(); i++) {
        clearingTransactionItemBO = (IClearingTransactionItem) bo.getGLAccountItems().get(i);
        Logger.getInstance().logDebug("documentType = " + clearingTransactionItemBO.getDocumentType());
        documentType = clearingTransactionItemBO.getDocumentType();

        glAccountItem = gLAccountItemHome.findByPrimaryKey(clearingTransactionItemBO.getId());
        //Hui Mian, 14/05/2007
        reconAccountType = null;

        if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue()) {
          if (glAccountItem.getDocumentType() != null && TransactionDocumentType.DEBTOR_PAYMENT.equals(glAccountItem.getDocumentType())
              && glAccountItem.getSpecialGLIndicator() != null && (glAccountItem.getSpecialGLIndicator().equals(SpecialGLIndicator.MISCELLANEOUS) || glAccountItem.getSpecialGLIndicator().equals(SpecialGLIndicator.REVOLVING_FUND)
              || glAccountItem.getSpecialGLIndicator().equals(SpecialGLIndicator.SUFFERENCE) || glAccountItem.getSpecialGLIndicator().equals(SpecialGLIndicator.VESSEL_ACCOUNT))) {
            //if (DebitCreditType.CREDIT.equals(debtorPaymentItemBO.getDebitCreditType())) {
            if (reconAccountType == null) {
              if (glAccountItem.getReconAccountType() != null && !glAccountItem.getReconAccountType().equals("")) {
                reconAccountType = glAccountItem.getReconAccountType();
              }
            }
            else {
              if (glAccountItem.getReconAccountType() != null && !glAccountItem.getReconAccountType().equals(reconAccountType)) {
                sessionContext.setRollbackOnly();
                throw new com.portrade.ipms.afms.exceptions.DoNotMatchException(new Object[]{DebtorReconAccountTypeLabelId.ACCOUNT_TYPE});
              }
            }
          }
        }

        // karen 9 Nov 2006 BugId:18870
        clearingTransactionItemBO.setCostCenterOfficeCode(clearingTransactionItemBO.getTransactionOfficeCode());
        clearingTransactionItemBO.setTransactionGLAccount(glAccountItem.getGLAccount());

        /*calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(null, clearingTransactionItemBO.getPaidAmount(), glAccountItem.getExchangeRate(), glAccountItem.getCurrency(), glAccountItem.getOfficeCode(), glAccountItem.getDocumentDate(), user);
        //calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(null, clearingTransactionItemBO.getPaidAmount(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
        if (glAccountItem.getClearedAmount() == null) {
          glAccountItem.setClearedAmount(calculateExchangeRateAmountBO.getAmount());
        }
        else {
          glAccountItem.setClearedAmount(glAccountItem.getClearedAmount().add(calculateExchangeRateAmountBO.getAmount()));
        }
        //if full clearing, set full clearing flag to true
        if (glAccountItem.getAmount().compareTo(glAccountItem.getClearedAmount()) == 0) {
          glAccountItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
          glAccountItem.setClearedRefFiscalYear(bo.getFiscalYear());
          glAccountItem.setParentItemNumber(new Integer(i + 1));
        }
        glAccountItem.setClearingDocumentIndicator(new Boolean(false));
        //Chee Seng 04th Aug 2004, BugId: 6839
        glAccountItem.setLastUpdateBy(user.getId());
        glAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        //Chee Seng 05th July 2005, bugId: 11719
        AFMSAuditTrail.updateLogAuditTrail(glAccountItem, user);*/
        calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(null, clearingTransactionItemBO.getPaidAmount(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
        //glAccountItemBO = new AbstractGLAccountItemValue();
        //glAccountItemBO = commonFunction.retrieveGLAccountItem(clearingTransactionItemBO.getId(), user);

        if (clearingTransactionItemBO.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
          //Chee Seng 07th March 2005, bugId: 10044
          //clearingTransactionItemBO.setPostingKey(TransactionPostingKey.CASH_ADVANCE);
          clearingTransactionItemBO.setPostingKey(TransactionPostingKey.INCOMING_PAYMENT);
          clearingTransactionItemBO.setDebitCreditType(DebitCreditType.CREDIT);
        }
        else {
          //Chee Seng 07th March 2005, bugId: 10044
          //clearingTransactionItemBO.setPostingKey(TransactionPostingKey.INCOMING_PAYMENT);
          clearingTransactionItemBO.setPostingKey(TransactionPostingKey.CASH_ADVANCE);
          clearingTransactionItemBO.setDebitCreditType(DebitCreditType.DEBIT);
        }

        //Joseph 5/3/2004
        clearingTransactionItemBO.setFiscalYear(bo.getFiscalYear());
        clearingTransactionItemBO.setDocumentNumber(bo.getDocumentNumber());
        clearingTransactionItemBO.setItemNo(new Integer(i + 1));
        clearingTransactionItemBO.setHeaderIndicator(new Boolean(false));
//      glAccountItemBO.setDocumentType(glAccountItem.getDocumentType());

        clearingTransactionItemBO.setDocumentType(TransactionDocumentType.CLEARING_TRANSACTION);
        clearingTransactionItemBO.setDocumentDate(bo.getDocumentDate());
        clearingTransactionItemBO.setPostingDate(bo.getPostingDate());
        clearingTransactionItemBO.setPostingPeriod(bo.getPostingPeriod());
        clearingTransactionItemBO.setClearedAmount(calculateExchangeRateAmountBO.getAmount());
        clearingTransactionItemBO.setClearingDocumentIndicator(new Boolean(true));
        clearingTransactionItemBO.setClearedRefDocumentNumber(clearingTransactionItemBO.getTransactionDocumentNumber());
        clearingTransactionItemBO.setClearedRefFiscalYear(glAccountItem.getFiscalYear());
        clearingTransactionItemBO.setParentItemNumber(glAccountItem.getItemNumber());
        glAccountItemBO.setCurrency(bo.getCurrency());
        //calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(clearingTransactionItemBO.getPaidAmount(), null, glAccountItemBO.getExchangeRate(), glAccountItemBO.getCurrency(), glAccountItemBO.getOfficeCode(), glAccountItemBO.getDocumentDate(), user);
        clearingTransactionItemBO.setAmount(calculateExchangeRateAmountBO.getAmount());
        clearingTransactionItemBO.setAmountInLocalCurrency(calculateExchangeRateAmountBO.getAmountLocalCurrency());
        clearingTransactionItemBO.setExchangeRate(calculateExchangeRateAmountBO.getExchangeRate());

        Logger.getInstance().logDebug("clearingTransactionItemBO.getDebitCreditType() " + clearingTransactionItemBO.getDebitCreditType());
        Logger.getInstance().logDebug("reconAccountType " + reconAccountType);
        Logger.getInstance().logDebug("clearingTransactionItemBO.getReconAccountType() " + clearingTransactionItemBO.getReconAccountType());
        if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue()) {
          if (DebitCreditType.CREDIT.equals(clearingTransactionItemBO.getDebitCreditType()) && reconAccountType != null && clearingTransactionItemBO.getReconAccountType() != null && !clearingTransactionItemBO.getReconAccountType().equals(reconAccountType)) {
            List additionalGLAccountItemList = createAdditionalGLAccountItem(clearingTransactionItemBO, user);
            for (int j = 0; j < additionalGLAccountItemList.size(); j++) {
              //IClearingTransactionItem additionalClearingTransactionItem = (IClearingTransactionItem) additionalGLAccountItemList.get(j);
              IClearingTransactionItem additionalClearingTransactionItem = new ARClearingTransactionItemValue();
              additionalClearingTransactionItem.copyPropertiesFrom((IAbstractGLAccountItem) additionalGLAccountItemList.get(j));
              //additionalClearingTransactionItem.setReconAccountType(reconAccountType);
              additionalClearingTransactionItem.setPaidAmount(clearingTransactionItemBO.getPaidAmount());
              additionalClearingTransactionItem.setClearedAmount(clearingTransactionItemBO.getPaidAmount());
              //additionalClearingTransactionItem.setTransactionAmount(clearingTransactionItemBO.getTransactionAmount());
              //additionalClearingTransactionItem.setTransactionDocumentDate(clearingTransactionItemBO.getTransactionDocumentDate());
              //additionalClearingTransactionItem.setTransactionDocumentNumber(clearingTransactionItemBO.getTransactionDocumentNumber());
              //		additionalClearingTransactionItem.setTransactionOfficeCode(clearingTransactionItemBO.getTransactionOfficeCode());
              //additionalClearingTransactionItem.setCostCenterOfficeCode(clearingTransactionItemBO.getTransactionOfficeCode());
              bo.getGLAccountItems().add(i + 1, additionalClearingTransactionItem);
              postParkedDocumentBO.addGLAccountItems(additionalClearingTransactionItem);
              i = i + 1;
            }
          }
        }
		Logger.getInstance().logDebug("bo.getDocumentType()" + bo.getDocumentType());
				Logger.getInstance().logDebug("clearingtransitembo - " + clearingTransactionItemBO.getDocumentType());
        if (!bo.getOfficeCode().equals(clearingTransactionItemBO.getCostCenterOfficeCode())) {
          try {
            IOffice office = generalLedgerSetup.retrieveOffice(clearingTransactionItemBO.getCostCenterOfficeCode(), user);
            String postingKey = null;
            if (clearingTransactionItemBO.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              postingKey = TransactionPostingKey.JOURNAL_DEBIT;
            }
            else {
              postingKey = TransactionPostingKey.JOURNAL_CREDIT;
            }
            Logger.getInstance().logDebug("postingKey :" + postingKey);
            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), clearingTransactionItemBO.getCostCenterOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, postingKey, user);
            clearingTransactionItemBO.setGLAccount(automaticAccountAssignment.getGlAccount());
            clearingTransactionItemBO.setOfficeCode(bo.getOfficeCode());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
        else {
				clearingTransactionItemBO.setGLAccount(glAccountItem.getGLAccount());
				clearingTransactionItemBO.setOfficeCode(bo.getOfficeCode());
	  }
        
        if(documentType != null && documentType.equals(TransactionDocumentType.SURCHARGE_INVOICE)){
			provSum = provSum.add(clearingTransactionItemBO.getAmount());
			surchargeIndicator = true;
        }
        

        postParkedDocumentBO.addGLAccountItems(clearingTransactionItemBO);
        //commonFunction.createGLAccountItem(glAccountItemBO, user);
        //commonFunction.postGLAccountItem(glAccountItemBO, user);

        i = i + 1;
      }

    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    Logger.getInstance().logDebug("postParkedDocumentBO.getGLAccountItems() = " + postParkedDocumentBO.getGLAccountItems());
    
    if(surchargeIndicator == true){

    	IAbstractGLAccountItem glAccountItemDR = new AbstractGLAccountItemValue();
    	glAccountItemDR.setOfficeCode(bo.getOfficeCode());
		glAccountItemDR.setFiscalYear(bo.getFiscalYear());
		glAccountItemDR.setDocumentNumber(bo.getDocumentNumber());
		glAccountItemDR.setItemNo(new Integer(itemNumber + 1));
		glAccountItemDR.setHeaderIndicator(new Boolean(false));
		glAccountItemDR.setDocumentType(TransactionDocumentType.CLEARING_TRANSACTION);
		glAccountItemDR.setDocumentDate(bo.getDocumentDate());
		glAccountItemDR.setPostingDate(bo.getPostingDate());
		glAccountItemDR.setPostingPeriod(bo.getPostingPeriod());
		glAccountItemDR.setCurrency(bo.getCurrency());
		glAccountItemDR.setAmount(provSum);
		glAccountItemDR.setAmountInLocalCurrency(provSum);
		glAccountItemDR.setClearedAmount(provSum);
		glAccountItemDR.setExchangeRate(calculateExchangeRateAmountBO.getExchangeRate());
		glAccountItemDR.setDebitCreditType(DebitCreditType.DEBIT);
		glAccountItemDR.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);    	
		try{
			IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
			String postingKey = null;
			Logger.getInstance().logDebug("documenttype = " + bo.getDocumentType());
			if(glAccountItemDR.getDebitCreditType().equals(DebitCreditType.DEBIT)){
				postingKey = TransactionPostingKey.JOURNAL_DEBIT;
			}
			IAutomaticAccountAssignment automaticAccountAssignment2 = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), glAccountItemDR.getOfficeCode(), AutomaticAccountDetermination.PROVISION_FOR_SURCHARGE, postingKey, user);
			glAccountItemDR.setGLAccount(automaticAccountAssignment2.getGlAccount());	
		}catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
		sessionContext.setRollbackOnly();
		throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
		}
		catch (java.rmi.RemoteException ex) {
		sessionContext.setRollbackOnly();
		throw new javax.ejb.EJBException(ex.toString());
	  }	
	  glAccountItemDR.setAssignment("SI");
	  
	  postParkedDocumentBO.addGLAccountItems(glAccountItemDR);
	  itemNumber = itemNumber + 1;
    }
	if(surchargeIndicator == true){
		IAbstractGLAccountItem glAccountItemCR = new AbstractGLAccountItemValue();
		glAccountItemCR.setOfficeCode(bo.getOfficeCode());
		glAccountItemCR.setFiscalYear(bo.getFiscalYear());
		glAccountItemCR.setDocumentNumber(bo.getDocumentNumber());
		glAccountItemCR.setItemNo(new Integer(itemNumber + 1));
		glAccountItemCR.setHeaderIndicator(new Boolean(false));
		glAccountItemCR.setDocumentType(TransactionDocumentType.CLEARING_TRANSACTION);
		glAccountItemCR.setDocumentDate(bo.getDocumentDate());
		glAccountItemCR.setPostingDate(bo.getPostingDate());
		glAccountItemCR.setPostingPeriod(bo.getPostingPeriod());
		glAccountItemCR.setCurrency(bo.getCurrency());
		glAccountItemCR.setAmount(provSum);
		glAccountItemCR.setAmountInLocalCurrency(provSum);
		glAccountItemCR.setClearedAmount(provSum);
		glAccountItemCR.setExchangeRate(calculateExchangeRateAmountBO.getExchangeRate());
		glAccountItemCR.setDebitCreditType(DebitCreditType.CREDIT);
		glAccountItemCR.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);  
		try{
			IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
			String postingKey = null;
			Logger.getInstance().logDebug("documenttype = " + bo.getDocumentType());
			if(glAccountItemCR.getDebitCreditType().equals(DebitCreditType.CREDIT)){
				postingKey = TransactionPostingKey.JOURNAL_CREDIT;
			}
			IAutomaticAccountAssignment automaticAccountAssignment2 = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), glAccountItemCR.getOfficeCode(), AutomaticAccountDetermination.PROVISION_FOR_SURCHARGE, postingKey, user);
			glAccountItemCR.setGLAccount(automaticAccountAssignment2.getGlAccount());	
			}catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
			sessionContext.setRollbackOnly();
			throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
			}
			catch (java.rmi.RemoteException ex) {
			sessionContext.setRollbackOnly();
			throw new javax.ejb.EJBException(ex.toString());
		  }	
	  glAccountItemCR.setAssignment("SI");
	  postParkedDocumentBO.addGLAccountItems(glAccountItemCR);
	  itemNumber = itemNumber + 1;
		
	}
    
    
    /*
	// karen 9 Nov 2006 BugId:18870
	for(int j=0; j< postParkedDocumentBO.getGLAccountItems().size();j++){
		IAbstractGLAccountItem glItem =(IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(j);
	    if(! glItem.isHeaderIndicator().booleanValue()){
	      // loop items
	      if(! bo.getOfficeCode().equals(glItem.getCostCenterOfficeCode())){
					try {
						IOffice office = generalLedgerSetup.retrieveOffice(glItem.getCostCenterOfficeCode(), user);
						String postingKey = null;
						if(glItem.getDebitCreditType().equals(DebitCreditType.DEBIT)){
							postingKey = TransactionPostingKey.JOURNAL_DEBIT;
						}else{
							postingKey = TransactionPostingKey.JOURNAL_CREDIT;
						}
						Logger.getInstance().logDebug("postingKey :"+postingKey);
						Logger.getInstance().logDebug("glItem.getCostCenterOfficeCode() = " + glItem.getCostCenterOfficeCode());
						IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), glItem.getCostCenterOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, postingKey, user);
						glItem.setGLAccount(automaticAccountAssignment.getGlAccount());
						glItem.setOfficeCode(bo.getOfficeCode());
					}
					catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
						sessionContext.setRollbackOnly();
						throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
					}
					catch (java.rmi.RemoteException ex) {
					  sessionContext.setRollbackOnly();
					  throw new javax.ejb.EJBException(ex.toString());
					}
	      }
	    }
	}*/
    try {

      java.util.List parkGlAccountItemList = commonFunction.parkDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
      postParkedDocumentBO.setGLAccountItems(parkGlAccountItemList);
      bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {E94469CF-0792-40B7-9E9E-1F085B443CBE}
   */
  public IClearingTransaction retrieveClearingTransaction(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    IClearingTransaction bo = new ClearingTransactionValue();
    IClearingTransactionItem item = new ARClearingTransactionItemValue();
    CommonFunction commonFunction = null;

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    Logger.getInstance().logDebug("documentNumber = " + documentNumber);
    try {
      com.portrade.ipms.afms.dao.ClearingTransactionDAO dao = (com.portrade.ipms.afms.dao.ClearingTransactionDAO) DAOProxy.getDAO("clearingTransaction", user);
      if (dao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_OFFICECODE, "=", ClearingTransactionDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_FISCALYEAR, "=", ClearingTransactionDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_DOCUMENTNUMBER, "=", ClearingTransactionDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_GLACCOUNTITEM_DOCUMENTTYPE, "=", TransactionDocumentType.CLEARING_TRANSACTION),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_OFFICECODE, "=", ClearingTransactionDAO.FILTER_CLEARINGTRANSACTIONITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_FISCALYEAR, "=", ClearingTransactionDAO.FILTER_CLEARINGTRANSACTIONITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionDAO.FILTER_DOCUMENTNUMBER, "=", ClearingTransactionDAO.FILTER_CLEARINGTRANSACTIONITEM_DOCUMENTNUMBER)
            };

        java.util.List results = DAOProxy.list("clearingTransaction", user, filter);
        Logger.getInstance().logDebug("results.size() = " + results.size());
        if (results.size() > 0) {
          bo = (IClearingTransaction) results.get(0);
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      com.portrade.ipms.afms.dao.ClearingTransactionItemDAO itemDao = (com.portrade.ipms.afms.dao.ClearingTransactionItemDAO) DAOProxy.getDAO("clearingTransactionItem", user);
      if (itemDao != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_OFFICECODE, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_FISCALYEAR, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_DOCUMENTNUMBER, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_ITEMNO, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_ITEMNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
            new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false))
            };

        OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_ITEMNO)};

        java.util.List results = DAOProxy.list("clearingTransactionItem", user, filter, order);
        java.util.List glList = new ArrayList();
        IAbstractGLAccountItem clearedRef = new AbstractGLAccountItemValue();

        for (int i = 0; i < results.size(); i++) {
          item = (IClearingTransactionItem) results.get(i);
          //Hui Mian 21/11/2006, bugId: 18372
          Logger.getInstance().logDebug("item.getTransactionOfficeCode = " + item.getTransactionOfficeCode());
          Logger.getInstance().logDebug("item.getTransactionGLAccount = " + item.getTransactionGLAccount());
          Logger.getInstance().logDebug("item.getTransactionItemNumber = " + item.getTransactionItemNumber());
          if (item.getTransactionOfficeCode() != null && !item.getTransactionOfficeCode().equals("")) {
            item.setOfficeCode(item.getTransactionOfficeCode());
          }
          if (item.getTransactionGLAccount() != null && !item.getTransactionGLAccount().equals("")) {
            item.setGLAccount(item.getTransactionGLAccount());
          }
          com.portrade.ipms.afms.dao.GLAccountItemDAO glItemDAO = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
          glList = glItemDAO.listGlAccountItemByItemNumberWithoutOfficeCode(item.getClearedRefFiscalYear(), item.getClearedRefDocumentNumber(), new Integer(1));
          //karen BugId: 18333 27 September 2006 cater for interoffice posting
          //glList = commonFunction.retrieveGLAccountItemByItemNumber(item.getOfficeCode(), item.getClearedRefFiscalYear(), item.getClearedRefDocumentNumber(), new Integer(1), user);
          if (glList != null && glList.size() > 0) {
            clearedRef = (IAbstractGLAccountItem) glList.get(0);
            item.setDocumentType(clearedRef.getDocumentType());
            //Chee Seng 07th June 2004, BugId: 6022
            item.setTransactionDocumentDate(clearedRef.getDocumentDate());
            item.setTransactionPostingDate(clearedRef.getPostingDate());
            item.setTransactionOfficeCode(clearedRef.getOfficeCode());
          }
          bo.addGLAccountItems(item);
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    // catch (java.rmi.RemoteException ex) {
    //sessionContext.setRollbackOnly();
    //throw new javax.ejb.EJBException(ex.toString());
    //}

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {02B7291A-5EEF-439B-B733-91205F2EF318}
   */
  public void updateClearingTransaction(IClearingTransaction bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    java.util.ArrayList clearingTransactionList = new java.util.ArrayList();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Integer postingPeriod = null;

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      clearingTransactionList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);

      //update master
      if (clearingTransactionList.size() > 0) {
        glAccountItemBO = (IAbstractGLAccountItem) clearingTransactionList.get(0);
        glAccountItemBO.setReference(bo.getReference());
        glAccountItemBO.setReferenceType(bo.getReferenceType());
        glAccountItemBO.setRemark(bo.getRemark());

        if (glAccountItemBO.getProcessStatus().equals(ProcessStatus.PARK)) {
          for (int i = 0; i < clearingTransactionList.size(); i++) {
            IAbstractGLAccountItem glAccountItem = (IAbstractGLAccountItem) clearingTransactionList.get(i);
            glAccountItem.setDocumentDate(bo.getDocumentDate());
            glAccountItem.setPostingDate(bo.getPostingDate());
            Logger.getInstance().logDebug("updateClearingTransaction postingDate = " + bo.getPostingDate());
            validateYearOfPostingDate(bo.getPostingDate(), bo.getDocumentDate(), bo.getFiscalYear(), user);
            try {
              if (bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
                glAccountItem.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
              }
              Logger.getInstance().logDebug("bo.getPostingPeriod()1 === " + bo.getPostingPeriod());
              postingPeriod = commonFunction.derivePostingPeriod(bo.getOfficeCode(),null, bo.getPostingDate(), user);
              glAccountItem.setPostingPeriod(postingPeriod);
              Logger.getInstance().logDebug("bo.getPostingPeriod()2 === " + glAccountItem.getPostingPeriod());
            }
            catch (java.rmi.RemoteException ex) {
              sessionContext.setRollbackOnly();
              throw new javax.ejb.EJBException(ex.toString());
            }

          }

          commonFunction.updateDocument(clearingTransactionList, user);

        }
        else {
          commonFunction.updateGLAccountItem(glAccountItemBO, user);
        }
      }

    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {E3338923-1BA8-4866-826B-592CB2E0005F}
   */
  public IStaffAdvance createParkStaffAdvance(IStaffAdvance bo, IUser user) throws AFMSException {
    AccountPayableManager acp = null;
    CommonFunction cf = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    try {
      acp = accountPayableHome.create();
      cf = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    List glItemList = new ArrayList();
    try {
      // validatePostCheque(bo);
      validateCreateParkStaffAdvance(bo, user);
      setStaffAdvanceValue(bo, user);
      validateStaffAdvance(bo, user);

      CommonFunction commonFunction = null;
      try {
        commonFunction = commonFunctionHome.create();
        Integer fiscalYear = commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user);
        bo.setFiscalYear(fiscalYear);
      }
      catch (java.rmi.RemoteException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
      }
      catch (Throwable ex) {
        sessionContext.setRollbackOnly();
        throw new javax.ejb.EJBException(ex.toString());
      }

      /*
       * Create GL items for header and line item
       */
      for (int i = 0; i < 2; i++) {
        IAbstractGLAccountItem glItem = new AbstractGLAccountItemValue();
        glItem.setAmount(bo.getAmount());
        glItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
        glItem.setCurrency(bo.getCurrency());
        glItem.setDocumentDate(bo.getDocumentDate());
        glItem.setDocumentType(bo.getDocumentType());
        glItem.setExchangeRate(bo.getExchangeRate());
        glItem.setFiscalYear(bo.getFiscalYear());
        glItem.setDocumentNumber(bo.getDocumentNumber());
        glItem.setItemNo(new Integer(i));
        glItem.setOfficeCode(bo.getOfficeCode());
        glItem.setPostingDate(bo.getPostingDate());
        glItem.setPostingPeriod(bo.getPostingPeriod());

        Logger.getInstance().logDebug("SystemProfile.get(SystemProfile.CENTRAL_ADVANCE_PMT_FLAG)*********" + SystemProfile.get(SystemProfile.CENTRAL_ADVANCE_PMT_FLAG));
        if (SystemProfile.get(SystemProfile.CENTRAL_ADVANCE_PMT_FLAG).equals(Boolean.FALSE.toString())) {
          if (bo.isPrintChequeFlag() != null && bo.isPrintChequeFlag().equals(Boolean.FALSE)) {
            if (bo.getPvNumberAllocation() != null && bo.getPvNumberAllocation().equals(Boolean.TRUE)) {
              generatePvNumber(glItem, user);
            }
            else if (bo.getPvNumberAllocation() != null && bo.getPvNumberAllocation().equals(Boolean.FALSE)) {
              glItem.setPvNumber(bo.getPvNumber());
            }
          }
          else {
            //BugId: 11367 15 June 005 THC set empty instead of generatePVNumber. Generation of Pv Number will
            //              be done in Non-Invoice Payment if print cheque flag = true.
            glItem.setPvNumber("");
            //generatePvNumber(glItem,user);
          }
        }

        if (i == 0) {
          /*
           * set Debtor details
           */
          glItem.setChequeNumber(bo.getChequeNumber());
          glItem.setHeaderIndicator(Boolean.TRUE);
          glItem.setGLAccount(bo.getAdvanceGLAccount());
          glItem.setPostingKey(bo.getDebtorPostingKey());
          glItem.setReference(bo.getReference());
          glItem.setReferenceType(bo.getReferenceType());
          glItem.setRemark(bo.getHeaderText());
          glItem.setSpecialGLIndicator(bo.getSpecialGLIndicator());
          glItem.setSubledgerAccount(bo.getSubledgerAccount());
          glItem.setSubledgerName(bo.getSubledgerName());
          glItem.setTin(bo.getTin());
          //tml 15 May 2006, BugId: 16902
          glItem.setSubledgerOfficeCode(bo.getSubledgerOfficeCode());

          glItem.setPrintChequeFlag(bo.isPrintChequeFlag());
          Logger.getInstance().logDebug("______createParkStaffAdvance " + bo.getCostCenterId());
          glItem.setCostCenterId(bo.getCostCenterId());
        }
        else {
          /*
           * set Bank details
           */
          if (SystemProfile.get(SystemProfile.CENTRAL_ADVANCE_PMT_FLAG).equals(Boolean.TRUE.toString())) {
            IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.STAFF_ADVANCE_CENTRAL_PAYMENT, TransactionPostingKey.JOURNAL_CREDIT, user);
			
            glItem.setGLAccount(automaticAccountAssignment.getGlAccount());
            glItem.setPostingKey(automaticAccountAssignment.getPostingKey());

          }
          else {
            glItem.setGLAccount(bo.getGLAccount());
            glItem.setPostingKey(bo.getBankPostingKey());
          }
          glItem.setAssignment(bo.getAssignment());
          glItem.setHeaderIndicator(Boolean.FALSE);
          glItem.setRemark(bo.getBankText());
        }
        glItemList.add(glItem);
      }
      glItemList = cf.parkDocument(glItemList, user);

      /*
       * Set the derived values to CashAdvance's business object
       */
      IAbstractGLAccountItem newGlItem = (IAbstractGLAccountItem) glItemList.get(0);
      bo.setDocumentNumber(newGlItem.getDocumentNumber());
      bo.setFiscalYear(newGlItem.getFiscalYear());
      bo.setExchangeRate(newGlItem.getExchangeRate());
      bo.setPaidAmount(new BigDecimal("0"));
      bo.setPaidAmountInLocalCurrency(new BigDecimal("0"));
      bo.setTotalAmount(newGlItem.getAmount());
      bo.setTotalAmountInLocalCurrency(newGlItem.getAmountInLocalCurrency());
      bo.setPostingPeriod(newGlItem.getPostingPeriod());
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * Create Cash Advance Master
     */
     Logger.getInstance().logDebug("bo.getClearedRefDocumentNumber = " + bo.getClearedRefDocumentNumber());
     Logger.getInstance().logDebug("bo.getClearedAmount = " + bo.getClearedAmount());
     
    try {
      StaffAdvance staffAdvance = staffAdvanceHome.create(new StaffAdvancePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), user.getCurrentSiteCode(), bo.getBankCode(),
          bo.getGroupWideDebtorCode(), bo.getTranslationDate(), bo.getPaidAmount(), bo.getPaidAmountInLocalCurrency(), bo.getTotalAmount(),
          bo.getTotalAmountInLocalCurrency(), bo.getPaymentType(), user.getId(), AFMSUtilities.getCurrentTime(), bo.getClearedRefFiscalYear(), bo.getClearedRefDocumentNumber(), bo.getClearedAmount());
      //Chee Seng 7th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(staffAdvance, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * Create Budgetary Cash Advance Items
     */
    try {
      createParkStaffAdvanceBudgetItem(bo, user);

      //FIXME - Generate Journal Voucher
      //FIXME - Generate NOE
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {33849536-C4BD-486B-AB77-F598C7C1D398}
   */
  public void deleteParkStaffAdvance(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException cx) {
      Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateDeleteParkStaffAdvance();
      //Chee Seng 14th June 2004, bugId: 4295
      List glAccountItemList = cf.retrieveGLAccountItemByDocumentNumber(officeCode, fiscalYear, documentNumber, user);
      IAbstractGLAccountItem headerItem = (IAbstractGLAccountItem) glAccountItemList.get(0);
      cf.deleteParkedDocument(officeCode, fiscalYear, documentNumber, user);
      //deleteParkStaffAdvanceBudgetItem(officeCode, fiscalYear, documentNumber, headerItem.getPostingPeriod(), user);

      IStaffAdvance staffAdvance = retrieveStaffAdvance(officeCode, fiscalYear, documentNumber, user);

      List staffAdvanceItemList = staffAdvance.getItems();
      for (int i = 0; i < staffAdvanceItemList.size(); i++) {
        IStaffAdvanceBudgetItem staffAdvanceBudgetItemBO = (IStaffAdvanceBudgetItem) staffAdvanceItemList.get(i);
        //cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), "", "", staffAdvanceBudgetItemBO.getGlAccount(), headerItem.getPostingPeriod(), DebitCreditType.CREDIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), headerItem.getDocumentDate(), user);
        cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), "", "", staffAdvanceBudgetItemBO.getGlAccount(), headerItem.getPostingPeriod(), DebitCreditType.CREDIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), headerItem.getDocumentDate(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getDocumentNumber(), user);

      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {1472FBC0-B33D-4C66-8250-0115D0B1A82E}
   */
  public IStaffAdvance retrieveStaffAdvance(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException cx) {
      Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * Get main info from GLAccountItem
     */
    IStaffAdvance bo = new StaffAdvanceValue();
    List glItemList = new ArrayList();

    /*
     * Use DAO to joint StaffAdvance & GLAccountItem
     */
    try {
      StaffAdvanceDAO headerDAO = (StaffAdvanceDAO) DAOProxy.getDAO("staffAdvance", user);
      if (headerDAO != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(StaffAdvanceDAO.FILTER_OFFICECODE, "=", StaffAdvanceDAO.FILTER_GLOFFICECODE),
            new FieldCriteria(StaffAdvanceDAO.FILTER_FISCALYEAR, "=", StaffAdvanceDAO.FILTER_GLFISCALYEAR),
            new FieldCriteria(StaffAdvanceDAO.FILTER_DOCUMENTNUMBER, "=", StaffAdvanceDAO.FILTER_GLDOCUMENTNUMBER),
            new Criteria(StaffAdvanceDAO.FILTER_GLPROCESSSTATUS, "!=", ProcessStatus.DELETED),
            new Criteria(StaffAdvanceDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(StaffAdvanceDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(StaffAdvanceDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
            };

        glItemList = DAOProxy.list("staffAdvance", user, filter);

      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
			}
    }

    if (glItemList.size() == 0) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
    }

    for (int i = 0; i < glItemList.size(); i++) {
      IStaffAdvance glItem = (IStaffAdvance) glItemList.get(i);
      /*
       * Set Debtor details
       */
      if (glItem.isHeaderIndicator().booleanValue()) {
        bo.setAdvanceGLAccount(glItem.getGLAccount());
        bo.setAmount(glItem.getAmount());
        bo.setAmountInLocalCurrency(glItem.getAmountInLocalCurrency());
        bo.setChequeNumber(glItem.getChequeNumber());
        bo.setClearedAmount(glItem.getClearedAmount());
        bo.setClearedRefDocumentNumber(glItem.getClearedRefDocumentNumber());
        bo.setClearedRefFiscalYear(glItem.getClearedRefFiscalYear());
        bo.setClearingDocumentIndicator(glItem.isClearingDocumentIndicator());
        bo.setCostCenterId(glItem.getCostCenterId());
        bo.setCurrency(glItem.getCurrency());
        bo.setDebtorPostingKey(glItem.getPostingKey());
        bo.setDocumentDate(glItem.getDocumentDate());
        bo.setDocumentNumber(glItem.getDocumentNumber());
        bo.setDocumentType(glItem.getDocumentType());
        bo.setExchangeRate(glItem.getExchangeRate());
        bo.setFiscalYear(glItem.getFiscalYear());
        bo.setHeaderText(glItem.getRemark());
        bo.setOfficeCode(glItem.getOfficeCode());
        bo.setPostingDate(glItem.getPostingDate());
        bo.setPostingPeriod(glItem.getPostingPeriod());
        bo.setProcessStatus(glItem.getProcessStatus());
        bo.setReference(glItem.getReference());
        bo.setReferenceType(glItem.getReferenceType());
        bo.setReversedRefDocumentNumber(glItem.getReversedRefDocumentNumber());
        bo.setReversalDocumentIndicator(glItem.isReversalDocumentIndicator());
        bo.setSpecialGLIndicator(glItem.getSpecialGLIndicator());
        bo.setSubledgerAccount(glItem.getSubledgerAccount());
        bo.setSubledgerName(glItem.getSubledgerName());
        bo.setTin(glItem.getTin());
        //tml 15 May 2006, BugId: 16902
        bo.setSubledgerOfficeCode(glItem.getSubledgerOfficeCode());

        bo.setPrintChequeFlag(glItem.isPrintChequeFlag());
        bo.setPaymentType(glItem.getPaymentType());
        bo.setPvNumber(glItem.getPvNumber());

//        if(glItem.getChequeNumber() != null && !glItem.getChequeNumber().equals("")) {
//          AbstractCriteria[] filter = {
//            new Criteria(CheckItemDAO.FILTER_OFFICE_CODE, "=", glItem.getOfficeCode()),
//            new Criteria(CheckItemDAO.FILTER_CHECK_NUMBER, "=", glItem.getChequeNumber())
//          };
//
//          try {
//            List checkItemList = DAOProxy.list("checkItem", user, filter);
//            if(checkItemList.size() > 0) {
//              bo.setDvNumber(((ICheckItem)checkItemList.get(0)).getDvNumber());
//            }
//          }
//          catch (SQLException ex) {
//            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
//          }
//        }
      }
      /*
       * Set Bank details
       */
      else {
        bo.setAssignment(glItem.getAssignment());
        bo.setBankPostingKey(glItem.getPostingKey());
        bo.setBankText(glItem.getRemark());
        bo.setGLAccount(glItem.getGLAccount());
      }
    }

    /*
     * Set Budget items
     */
    try {
      //Chee Seng 13th Aug 2004, bugId: 6948
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceBudgetItemDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear()),
          new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceBudgetItemDAO.FILTER_DOCUMENTNUMBER, "=", bo.getDocumentNumber())
          };
      OrderBy[] orderBy = {new OrderBy(StaffAdvanceBudgetItemDAO.FILTER_ITEMNUMBER)};
      java.util.List budgetItemList = DAOProxy.list("staffAdvanceBudgetItem", bo.getOfficeCode(), user, filter, orderBy);

      for (int i = 0; i < budgetItemList.size(); i++) {
        IStaffAdvanceBudgetItem budgetItemBO = (IStaffAdvanceBudgetItem) budgetItemList.get(i);
        /*
        StaffAdvanceBudgetItem budgetItem = (StaffAdvanceBudgetItem) budgetItemList.get(i);
        IStaffAdvanceBudgetItem budgetItemBO = new StaffAdvanceBudgetItemValue();
        budgetItemBO.setAdvanceType(budgetItem.getAdvanceType());
        budgetItemBO.setAmount(budgetItem.getAmount());
        budgetItemBO.setAmountInLocalCurrency(budgetItem.getAmountInLocalCurrency());
        budgetItemBO.setReference(budgetItem.getReference());
        budgetItemBO.setReferenceType(budgetItem.getReferenceType());
        budgetItemBO.setAssignment(budgetItem.getAssignment());
        budgetItemBO.setCid(budgetItem.getCid());
        budgetItemBO.setCostCenterId(budgetItem.getCostCenterId());
        budgetItemBO.setDocumentNumber(budgetItem.getDocumentNumber());
        budgetItemBO.setFiscalYear(budgetItem.getFiscalYear());
        budgetItemBO.setGlAccount(budgetItem.getGlAccount());
        budgetItemBO.setItemNumber(budgetItem.getItemNumber());
        budgetItemBO.setOfficeCode(budgetItem.getOfficeCode());
        budgetItemBO.setRemark(budgetItem.getRemark());
        */
        bo.addItems(budgetItemBO);
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
			}
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {4D07117D-219B-4F28-97BE-CCC37B5602C1}
   */
  public void updateParkStaffAdvance(IStaffAdvance bo, IUser user) throws AFMSException {
    AccountPayableManager acp = null;
    CommonFunction cf = null;
    Integer postingPeriod = null;

    try {
      acp = accountPayableHome.create();
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateUpdateParkStaffAdvance();
      setStaffAdvanceValue(bo, user);
      validateStaffAdvance(bo, user);

      /*
       * Update GL Account Item for Debtor and Bank
       */
      List newGlItemList = new ArrayList();
      List glItemList = new ArrayList(cf.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user));
      for (int i = 0; i < glItemList.size(); i++) {
        IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(i);
        glItem.setAmount(bo.getAmount());
        glItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
        glItem.setDocumentDate(bo.getDocumentDate());
        glItem.setExchangeRate(bo.getExchangeRate());
        glItem.setPostingDate(bo.getPostingDate());
        Logger.getInstance().logDebug("update Park Staff Advance posting date = " + bo.getPostingDate());
        Logger.getInstance().logDebug("fiscalyear = " + bo.getFiscalYear());
        //erma bugId: 26539 Added validation for year of posting date
        validateYearOfPostingDate(bo.getPostingDate(), bo.getDocumentDate(), bo.getFiscalYear(), user);
        postingPeriod = glItem.getPostingPeriod();
        glItem.setPostingPeriod(bo.getPostingPeriod());

        if (glItem.isHeaderIndicator().booleanValue()) {
          glItem.setGLAccount(bo.getAdvanceGLAccount());
          glItem.setReference(bo.getReference());
          glItem.setReferenceType(bo.getReferenceType());
          glItem.setRemark(bo.getHeaderText());
          glItem.setSpecialGLIndicator(bo.getSpecialGLIndicator());
          glItem.setPrintChequeFlag(bo.isPrintChequeFlag());
          glItem.setCostCenterId(bo.getCostCenterId());
        }
        else {
          glItem.setCostCenterId(glItem.getCostCenterId());
          if (bo.getGLAccount() != null) {
            glItem.setGLAccount(bo.getGLAccount());
          }
          else {
            glItem.setGLAccount(glItem.getGLAccount());
          }
          glItem.setAssignment(bo.getAssignment());
          glItem.setRemark(bo.getBankText());
        }
        newGlItemList.add(glItem);
      }
      newGlItemList = cf.updateDocument(newGlItemList, user);

      IAbstractGLAccountItem newGlItem = (IAbstractGLAccountItem) newGlItemList.get(0);
      bo.setAmount(newGlItem.getAmount());
      bo.setAmountInLocalCurrency(newGlItem.getAmountInLocalCurrency());
      bo.setExchangeRate(newGlItem.getExchangeRate());
      bo.setTotalAmount(newGlItem.getAmount());
      bo.setTotalAmountInLocalCurrency(newGlItem.getAmountInLocalCurrency());
      bo.setPostingPeriod(newGlItem.getPostingPeriod());

      /*
       * Update Staff Advance Budget Items
       */
      //Chee Seng 18th Aug 2005, bugId: 13116
      deleteParkStaffAdvanceBudgetItem(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), postingPeriod, bo.getDocumentDate(), user);
      createParkStaffAdvanceBudgetItem(bo, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * Update Staff Advance Master
     */
    try {
      StaffAdvance staffAdvance = staffAdvanceHome.findByPrimaryKey(new StaffAdvancePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
      staffAdvance.setTotalAmount(bo.getTotalAmount());
      staffAdvance.setTotalAmountInLocalCurrency(bo.getTotalAmountInLocalCurrency());
      staffAdvance.setPaymentType(bo.getPaymentType());
      staffAdvance.setLastUpdateBy(user.getId());
      staffAdvance.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 7th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(staffAdvance, user);
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {DACDF458-918C-4A56-919C-29BF96322032}
   */
  public void updatePostedStaffAdvance(IStaffAdvance bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateUpdatePostedStaffAdvance();

      List newGlItemList = new ArrayList();
      List glItemList = new ArrayList(cf.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user));
      for (int i = 0; i < glItemList.size(); i++) {
        IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(i);
        if (glItem.isHeaderIndicator().booleanValue()) {
          glItem.setReference(bo.getReference());
          glItem.setReferenceType(bo.getReferenceType());
          glItem.setRemark(bo.getHeaderText());
        }
        else {
          glItem.setAssignment(bo.getAssignment());
          glItem.setRemark(bo.getBankText());
        }
        newGlItemList.add(glItem);
      }
      cf.updateDocument(newGlItemList, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      /*
       * Update Budget items
       */
      try {
        for (int i = 0; i < bo.getItems().size(); i++) {
          IStaffAdvanceBudgetItem budgetItemBO = (IStaffAdvanceBudgetItem) bo.getItems().get(i);
          StaffAdvanceBudgetItem budgetItem = staffAdvanceBudgetItemHome.findByPrimaryKey(new StaffAdvanceBudgetItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), budgetItemBO.getItemNumber()));
          budgetItem.setAssignment(budgetItemBO.getAssignment());
          budgetItem.setReference(budgetItemBO.getReference());
          budgetItem.setReferenceType(budgetItemBO.getReferenceType());
          budgetItem.setRemark(budgetItemBO.getRemark());
          budgetItem.setLastUpdateBy(user.getId());
          budgetItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          //Chee Seng 7th July 2005, bugId: 11719
          ACRAuditTrail.updateLogAuditTrail(budgetItem, user);
        }
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
      }
      /*
       * Update Cash Advance master
       */
      try {
        StaffAdvance staffAdvance = staffAdvanceHome.findByPrimaryKey(new StaffAdvancePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
        staffAdvance.setLastUpdateBy(user.getId());
        staffAdvance.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        //Chee Seng 7th July 2005, bugId: 11719
        ACRAuditTrail.updateLogAuditTrail(staffAdvance, user);
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param reversedDocumentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E3047EDE-6C92-433D-BC35-3D06854AE1A2}
   */
  public void reverseStaffAdvance(String officeCode, Integer fiscalYear, Long reversedDocumentNumber, IUser user) throws AFMSException {
    CommonFunction cf = null;
    IAbstractGLAccountItem glAccountItem = null;

    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      List l = new ArrayList();
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_REVERSEDREFDOCUMENTNUMBER, "=", reversedDocumentNumber),
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_HEADERINDICATOR, "=", Boolean.TRUE)
          };
      l = DAOProxy.list("GLAccountItem", user, filter);
      if (l.size() > 0) {
        glAccountItem = (IAbstractGLAccountItem) l.get(0);
      }

    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }

    try {

      IStaffAdvance staffAdvanceBO = retrieveStaffAdvance(glAccountItem.getOfficeCode(), glAccountItem.getFiscalYear(), glAccountItem.getDocumentNumber(), user);
      for (int i = 0; i < staffAdvanceBO.getItems().size(); i++) {
        IStaffAdvanceBudgetItem staffAdvanceBudgetItemBO = (IStaffAdvanceBudgetItem) staffAdvanceBO.getItems().get(i);
        //Chee Seng 18th Aug 2005, bugId: 13116
        //cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getCostCenterId(), "", staffAdvanceBudgetItemBO.getGlAccount(), staffAdvanceBO.getPostingPeriod(), DebitCreditType.CREDIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), staffAdvanceBO.getDocumentDate(), user);
        cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getCostCenterId(), "", staffAdvanceBudgetItemBO.getGlAccount(), staffAdvanceBO.getPostingPeriod(), DebitCreditType.CREDIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), staffAdvanceBO.getDocumentDate(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getDocumentNumber(), user);
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {B129177A-8C0B-44ED-B250-74F1DBBD9EB8}
   */
  public ILiquideStaffAdvance createLiquidateStaffAdvance(ILiquideStaffAdvance bo, IUser user) throws AFMSException {
    Logger.getInstance().logDebug("In createLiquidateStaffAdvance");

    CommonFunction cf = null;
    GeneralLedgerSetup glSetup = null;
    boolean interPosting = false;
    try {
      cf = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    validateCreateLiquidateStaffAdvance();
    calculateTaxForLiquidateStaffAdvanceItems(bo, user);
    validateLiquidateStaffAdvance(bo, user);

    List glItemList = new ArrayList();
    BigDecimal totalItemAmount = new BigDecimal(0);
    int counter = 0;

    try {
      /*
       * Create Header for GL Acccount Item
       */
      IAbstractGLAccountItem glItemBO = new AbstractGLAccountItemValue();
      glItemBO.setAmount(bo.getAmount());
      glItemBO.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
      glItemBO.setCurrency(bo.getCurrency());
      glItemBO.setDocumentDate(bo.getDocumentDate());
      glItemBO.setDocumentType(bo.getDocumentType());
      glItemBO.setExchangeRate(bo.getExchangeRate());
      glItemBO.setFiscalYear(bo.getFiscalYear());
      glItemBO.setDocumentNumber(bo.getDocumentNumber());
      glItemBO.setGLAccount(bo.getGLAccount());
      glItemBO.setHeaderIndicator(Boolean.TRUE);
      glItemBO.setItemNo(new Integer(0));
      glItemBO.setOfficeCode(bo.getOfficeCode());
      glItemBO.setPostingDate(bo.getPostingDate());
      glItemBO.setPostingKey(bo.getPostingKey());
      glItemBO.setPostingPeriod(bo.getPostingPeriod());
      glItemBO.setReference(bo.getReference());
      glItemBO.setReferenceType(bo.getReferenceType());
      glItemBO.setRemark(bo.getRemark());
      glItemBO.setSubledgerAccount(bo.getSubledgerAccount());
      glItemBO.setSubledgerName(bo.getSubledgerName());
      glItemBO.setTin(bo.getTin());
      //tml 15 May 2006, BugId: 16902
      glItemBO.setSubledgerOfficeCode(bo.getSubledgerOfficeCode());
      if (bo.getSubledgerAccount() != null && bo.getSubledgerOfficeCode() == null) {
        ICustomer debtorBo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
        glItemBO.setSubledgerOfficeCode(debtorBo.getOfficeCode());
      }

      /*Hui Mian, 11/07/2007, bugid: 22780
      glItemBO.setClearedAmount(bo.getAmount());
      glItemBO.setClearedRefDocumentNumber(bo.getClearedRefDocumentNumber());
      glItemBO.setClearedRefFiscalYear(bo.getClearedRefFiscalYear());
      */
      glItemBO.setTaxIndicator(bo.isTaxIndicator());
      glItemBO.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());

      glItemList.add(glItemBO);

      /*
       * Create Items for GL Acccount Item
       */
      for (int i = 0; i < bo.getItems().size(); i++) {
        ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(i);
        glItemBO = new AbstractGLAccountItemValue();
        if (item.getAmount() != null && item.getAmount().compareTo(new BigDecimal("0")) != 0) {
          glItemBO.setAmount(item.getAmount());
          glItemBO.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
          glItemBO.setCurrency(bo.getCurrency());
          glItemBO.setDocumentDate(bo.getDocumentDate());
          glItemBO.setDocumentType(bo.getDocumentType());
          glItemBO.setFiscalYear(bo.getFiscalYear());
          glItemBO.setDocumentNumber(bo.getDocumentNumber());
          glItemBO.setHeaderIndicator(Boolean.FALSE);
          glItemBO.setItemNo(new Integer(i + 1));
          glItemBO.setOfficeCode(bo.getOfficeCode());
          glItemBO.setParentItemNumber(item.getParentItemNumber());
          glItemBO.setPostingDate(bo.getPostingDate());
          glItemBO.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          glItemBO.setPostingPeriod(bo.getPostingPeriod());
          glItemBO.setRemark(item.getRemark());
          glItemBO.setTaxCode(item.getTaxCode());
          glItemBO.setTaxIndicator(item.isTaxIndicator());
          glItemBO.setTin(item.getTin());

          if (item.getBudgetItemOfficeCode() != null && !bo.getOfficeCode().equals(item.getBudgetItemOfficeCode())) {
            interPosting = true;
            glItemBO.setCostCenterId(null);
            IOffice office = glSetup.retrieveOffice(bo.getOfficeCode(), user);
            IAutomaticAccountAssignment automaticAccountAssignment = glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getBudgetItemOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, glItemBO.getPostingKey(), user);
            glItemBO.setGLAccount(automaticAccountAssignment.getGlAccount());
            item.setBudgetItemGLAccount(item.getGLAccount());
            glItemBO.setInterOfficePostingIndicator(new Boolean(true));
          }
          else {
            glItemBO.setCostCenterId(item.getCostCenterId());
            glItemBO.setGLAccount(item.getGLAccount());
          }

          glItemList.add(glItemBO);
          counter++;
          totalItemAmount = totalItemAmount.add(item.getAmount());
        }
      }

      if (interPosting == true) {
        bo.setFiscalYear(cf.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
				if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) { 
	        bo.setDocumentNumber(cf.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType(), user));
				}
        //bo.setCrossOfficeNumber(bo.getOfficeCode() + bo.getFiscalYear().toString() + bo.getDocumentNumber().toString());
        bo.setInterOfficePostingIndicator(new Boolean(true));

        for (int j = 0; j < glItemList.size(); j++) {
          IAbstractGLAccountItem interOfficeGLItem = (IAbstractGLAccountItem) glItemList.get(j);
          interOfficeGLItem.setDocumentNumber(bo.getDocumentNumber());
          interOfficeGLItem.setFiscalYear(bo.getFiscalYear());
          interOfficeGLItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          interOfficeGLItem.setInterOfficePostingIndicator(new Boolean(true));
        }

      }
      if (bo.getStaffAdvanceAmount().compareTo(totalItemAmount) < 0) {
        IAbstractGLAccountItem glItem = new AbstractGLAccountItemValue();
        glItem.setDocumentNumber(bo.getDocumentNumber());
        glItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
        glItem.setCurrency(bo.getCurrency());
        glItem.setPostingDate(bo.getPostingDate());
        glItem.setPostingPeriod(bo.getPostingPeriod());
        glItem.setDocumentDate(bo.getDocumentDate());
        glItem.setDocumentType(bo.getDocumentType());
        glItem.setFiscalYear(bo.getFiscalYear());
        glItem.setDocumentNumber(bo.getDocumentNumber());
        glItem.setOfficeCode(bo.getOfficeCode());
        glItem.setExchangeRate(bo.getExchangeRate());
        glItem.setHeaderIndicator(new Boolean(false));
        glItem.setItemNo(new Integer(counter + 1));
        glItem.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());

        ISpecialGLIndicator specialGLBO = glSetup.retrieveSpecialGLIndicator(bo.getOfficeCode(), SpecialGLIndicator.STAFF_ADVANCE_LIQ, user);

        //if(bo.getStaffAdvanceAmount().compareTo(totalItemAmount) < 0){
        glItem.setAmount(totalItemAmount.subtract(bo.getStaffAdvanceAmount()));
        glItem.setGLAccount(specialGLBO.getGLAccount());
        glItem.setDebitCreditType(DebitCreditType.CREDIT);
        glItem.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
        //Hui Mian, 07/07/07 bugid:22787
        glItem.setSpecialGLIndicator(specialGLBO.getCode());
        //}

        /*if(bo.getStaffAdvanceAmount().compareTo(totalItemAmount) > 0){
			glItem.setAmount(bo.getStaffAdvanceAmount().subtract(totalItemAmount));
			glItem.setGLAccount(specialGLBO.getGLAccount());
			glItem.setDebitCreditType(DebitCreditType.DEBIT);
			glItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
			glItem.setSpecialGLIndicator(specialGLBO.getCode());
		}*/
        glItemList.add(glItem);
      }

      glItemList = cf.parkDocument(glItemList, user);

      IAbstractGLAccountItem glItemHeader = (IAbstractGLAccountItem) glItemList.get(0);
      bo.setCrossOfficeNumber(glItemHeader.getCrossOfficeNumber());

      /*
       * Derive the value of the fields that are created in postDocument
       */
      if (interPosting == false) {
        IAbstractGLAccountItem newGlItem = new AbstractGLAccountItemValue();
        newGlItem = (IAbstractGLAccountItem) glItemList.get(0);
        bo.setDocumentNumber(newGlItem.getDocumentNumber());
        bo.setFiscalYear(newGlItem.getFiscalYear());
      }

    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      /*
       * Set clearAmount, clearedRefDocumentNumber and clearedRefFiscalYear for liquidated Cash Advance
       */
      //Chee Seng 07th June 2005, bugId: 10296

      /* Hui Mian, 12/07/2007 bugid:22780
      List staffAdvanceList = new ArrayList(gLAccountItemHome.findByItemNumber(bo.getOfficeCode(), bo.getClearedRefFiscalYear(), bo.getClearedRefDocumentNumber(), new Integer(0)));
      if (staffAdvanceList.size() <= 0) {
        sessionContext.setRollbackOnly();
        throw new RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.CASH_ADVANCE_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      GLAccountItem staffAdvanceHeader = (GLAccountItem) staffAdvanceList.get(0);
      if (staffAdvanceHeader.getClearedAmount() == null || staffAdvanceHeader.getClearedAmount().equals("")) {
        staffAdvanceHeader.setClearedAmount(bo.getAmount());
      }
      else {
        staffAdvanceHeader.setClearedAmount(staffAdvanceHeader.getClearedAmount().add(bo.getAmount()));
      }
      staffAdvanceHeader.setClearedRefDocumentNumber(bo.getDocumentNumber());
      staffAdvanceHeader.setClearedRefFiscalYear(bo.getFiscalYear());
      staffAdvanceHeader.setLastUpdateBy(user.getId());
      staffAdvanceHeader.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 6th July 2005, bugId: 11719
	  	AFMSAuditTrail.updateLogAuditTrail(staffAdvanceHeader, user);
	  	*/
//      StaffAdvance staffAdvance = staffAdvanceHome.findByPrimaryKey(
//          new StaffAdvancePK(bo.getOfficeCode(), bo.getAdvanceFiscalYear(), bo.getAdvanceDocumentNumber()));
//          
//		//IStaffAdvance staffAdvanceBO = retrieveStaffAdvance(bo.getOfficeCode(), bo.getAdvanceFiscalYear(), bo.getAdvanceDocumentNumber(), user);
//			 Logger.getInstance().logDebug("staffAdvance = " + staffAdvance);
//			 Logger.getInstance().logDebug("staffadvance documentnumber = " + staffAdvance.getDocumentNumber());
//			 Logger.getInstance().logDebug("staffadvance fiscalyear = " + staffAdvance.getFiscalYear());
//
//		//		08/01/2010 erma: 27861 - get amount from glaccountitem for nondebtorpayment
//		  BigDecimal nonDebtorPaymentAmount = new BigDecimal("0.00");
//		  BigDecimal newAdvancedAmount = new BigDecimal("0.00");
//     
//		try{
//			NonDebtorPaymentDAO dao = (NonDebtorPaymentDAO) DAOProxy.getDAO("nonDebtorPayment", user);
//			if(dao != null){
//				if(staffAdvance.getDocumentNumber() != null){
//					INonDebtorPayment nonDebPymt = dao.findByStaffAdvanceDocNum(staffAdvance.getOfficeCode(), staffAdvance.getFiscalYear(), staffAdvance.getDocumentNumber());
//						Logger.getInstance().logDebug("nondebpyment.getdocumentnumber = " + nonDebPymt.getDocumentNumber());
//							List glList = new ArrayList();
//								glList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(nonDebPymt.getOfficeCode(), nonDebPymt.getFiscalYear(), nonDebPymt.getDocumentNumber()));
//								  if (glList != null && !glList.isEmpty()) {
//									GLAccountItem  glAItem = (GLAccountItem) glList.get(0);
//									Logger.getInstance().logDebug("amount = " + glAItem.getAmount());
//									nonDebtorPaymentAmount = glAItem.getAmount();
//								  }	
//				}
//			}
//		}
//		catch (java.sql.SQLException ex) {
//		sessionContext.setRollbackOnly();
//		throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
//		}
//		catch (javax.ejb.FinderException ex) {
//		throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
//		}

		//08/01/2010 erma: 27861 - if nondebtorpayment is not 0 then plus the advanceamount else get the advanceamount
//			if(nonDebtorPaymentAmount != null && !nonDebtorPaymentAmount.equals(new BigDecimal("0.00"))){
//				Logger.getInstance().logDebug("if not 0");
//				Logger.getInstance().logDebug("nonDebtorPaymentAmount - " + nonDebtorPaymentAmount);
//				newAdvancedAmount = bo.getAmountInLocalCurrency().add(nonDebtorPaymentAmount);
//			}else{
//				Logger.getInstance().logDebug("else");
//				newAdvancedAmount = bo.getAmountInLocalCurrency();
//			}
//		
//			Logger.getInstance().logDebug("newAdvancedAmount = " + newAdvancedAmount);
//			Logger.getInstance().logDebug("bo.getAmountInLocalCurrency() = " + bo.getAmountInLocalCurrency());
//
//			 staffAdvance.setClearedRefFiscalYear(bo.getFiscalYear());
//			 staffAdvance.setClearedRefDocumentNumber(bo.getDocumentNumber());
//			 staffAdvance.setClearedAmount(newAdvancedAmount);
//			 staffAdvance.setLastUpdateBy(user.getId());
//			 staffAdvance.setLastUpdateOn(AFMSUtilities.getCurrentTime());
//			 Logger.getInstance().logDebug("staffAdvance.getClearedAmount = " + staffAdvance.getClearedAmount());

      /*;
      //Chee Seng 14th June 2004, bugId: 4395
      //Chee Seng 17th Feb 2004, BugId: 4362
      IStaffAdvance staffAdvanceBO = retrieveStaffAdvance(staffAdvanceHeader.getOfficeCode(), staffAdvanceHeader.getFiscalYear(), staffAdvanceHeader.getDocumentNumber(), user);
      //Jason 18th May 2004, BugId: 5433
      for (int i = 0; i < staffAdvanceBO.getItems().size(); i++) {
        IStaffAdvanceBudgetItem staffAdvanceBudgetItemBO = (IStaffAdvanceBudgetItem) staffAdvanceBO.getItems().get(i);
        //Chee Seng 18th Aug 2005, bugId: 13116
        cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getCostCenterId(), "", staffAdvanceBudgetItemBO.getGlAccount(), staffAdvanceBO.getPostingPeriod(), DebitCreditType.CREDIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), staffAdvanceBO.getDocumentDate(), user);
      }
      //Chee Seng 12th Aug 2004, bugId: 6948
      java.util.List bGLAccountItems = cf.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);
      //Collection bGLAccountItems = gLAccountItemHome.findByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), new Integer(bo.getDocumentNumber().toString()));
      Iterator iterators = bGLAccountItems.iterator();
      while (iterators.hasNext()) {
        //Chee Seng 12th Aug 2004, bugId: 6948
        IAbstractGLAccountItem bGlaccitem = (IAbstractGLAccountItem) iterators.next();
        if (Boolean.FALSE.equals(bGlaccitem.isHeaderIndicator())) {
          String projectId = (bGlaccitem.getProjectId() == null) ? "" : bGlaccitem.getProjectId();
          String costCenterId = (bGlaccitem.getCostCenterId() == null) ? "" : bGlaccitem.getCostCenterId();
          //BugId: 5072
          ICompanyAccount acc = glSetup.retrieveCompanyAccount(bGlaccitem.getGLAccount(), bGlaccitem.getOfficeCode(), user);
          if (acc.isBudgetAvailabilityCheck() != null && acc.isBudgetAvailabilityCheck().booleanValue() == true) {
            //Chee Seng 17th Feb 2004, BugId: 4362
            cf.actualizeBudget(bGlaccitem.getOfficeCode(), bGlaccitem.getFiscalYear(), costCenterId, projectId, bGlaccitem.getGLAccount(), bGlaccitem.getPostingPeriod(), DebitCreditType.DEBIT, bGlaccitem.getAmountInLocalCurrency(), user);
          }
        }
      }
*/
      //*
      //* Create Staff Advance Liquidation
      //*
      
      StaffAdvanceLiquidation staffAdvanceLiquidate = staffAdvanceLiquidateHome.create(new StaffAdvanceLiquidationPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()),
          user.getCurrentSiteCode(), bo.getTaxAmount(), bo.getBudgetPeriod(), user.getId(), AFMSUtilities.getCurrentTime(), bo.getAdvanceFiscalYear(), bo.getAdvanceDocumentNumber(), bo.getAdvanceAmount());
      ACRAuditTrail.insertLogAuditTrail(staffAdvanceLiquidate, user);
    }
    catch (AFMSException ax) {
      sessionContext.setRollbackOnly();
      throw ax;
    }
//    catch (javax.ejb.FinderException ex) {
//      sessionContext.setRollbackOnly();
//      throw new RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.CASH_ADVANCE_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
//    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      createLiquidateStaffAdvanceItems(bo, user);
      Logger.getInstance().logDebug("bo.getItems = " + bo.getItems().size());
      Logger.getInstance().logDebug("interpostin = " + interPosting);
      if (interPosting == true) {
        createJournalForLiquidateStaffAdvance(bo,IConstants.RECORD_INDICATOR.INSERT, user);
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {E5D02F22-F56B-4BC0-9231-79351979CFA4}
   */
  public ILiquideStaffAdvance retrieveLiquidateStaffAdvance(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    ILiquideStaffAdvance bo = new LiquideStaffAdvanceValue();
    List glHeaderList = new ArrayList();
    List glItemList = new ArrayList();

    /*
     * Get Header
     */
    try {
      StaffAdvanceLiquidationDAO headerDAO = (StaffAdvanceLiquidationDAO) DAOProxy.getDAO("staffAdvanceLiquidation", user);
      if (headerDAO != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(StaffAdvanceLiquidationDAO.FILTER_OFFICECODE, "=", StaffAdvanceLiquidationDAO.FILTER_GLOFFICECODE),
            new FieldCriteria(StaffAdvanceLiquidationDAO.FILTER_FISCALYEAR, "=", StaffAdvanceLiquidationDAO.FILTER_GLFISCALYEAR),
            new FieldCriteria(StaffAdvanceLiquidationDAO.FILTER_DOCUMENTNUMBER, "=", StaffAdvanceLiquidationDAO.FILTER_GLDOCUMENTNUMBER),
            new Criteria(StaffAdvanceLiquidationDAO.FILTER_GLPROCESSSTATUS, "!=", ProcessStatus.DELETED),
            new Criteria(StaffAdvanceLiquidationDAO.FILTER_GLHEADERINDICATOR, "=", new Boolean(true)),
            new Criteria(StaffAdvanceLiquidationDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(StaffAdvanceLiquidationDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(StaffAdvanceLiquidationDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
            };

        glHeaderList = DAOProxy.list("staffAdvanceLiquidation", user, filter);

      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }

    if (glHeaderList.size() == 0) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    /*
     * Get Items
     */
    try {
      StaffAdvanceLiquidationItemDAO itemDAO = (StaffAdvanceLiquidationItemDAO) DAOProxy.getDAO("staffAdvanceLiquidationItem", user);
      if (itemDAO != null) {
        AbstractCriteria[] filter = {
            new FieldCriteria(StaffAdvanceLiquidationItemDAO.FILTER_OFFICECODE, "=", StaffAdvanceLiquidationItemDAO.FILTER_GLOFFICECODE),
            new FieldCriteria(StaffAdvanceLiquidationItemDAO.FILTER_FISCALYEAR, "=", StaffAdvanceLiquidationItemDAO.FILTER_GLFISCALYEAR),
            new FieldCriteria(StaffAdvanceLiquidationItemDAO.FILTER_DOCUMENTNUMBER, "=", StaffAdvanceLiquidationItemDAO.FILTER_GLDOCUMENTNUMBER),
            new FieldCriteria(StaffAdvanceLiquidationItemDAO.FILTER_ITEMNUMBER, "=", StaffAdvanceLiquidationItemDAO.FILTER_GLITEMNUMBER),
            new Criteria(StaffAdvanceLiquidationItemDAO.FILTER_GLPROCESSSTATUS, "!=", ProcessStatus.DELETED),
            new Criteria(StaffAdvanceLiquidationItemDAO.FILTER_GLHEADERINDICATOR, "=", new Boolean(false)),
            new Criteria(StaffAdvanceLiquidationItemDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(StaffAdvanceLiquidationItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(StaffAdvanceLiquidationItemDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
            };

        glItemList = DAOProxy.list("staffAdvanceLiquidationItem", user, filter);
        for (int i = 0; i < glItemList.size(); i++) {
          ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) glItemList.get(i);
          if (item.getBudgetItemCostCenter() != null) {
            item.setCostCenterId(item.getBudgetItemCostCenter());
          }
          if (item.getBudgetItemGLAccount() != null) {
            item.setGLAccount(item.getBudgetItemGLAccount());
          }
        }

      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
			}
    }

    /*
     * Set Staff Advance Liquidation's business object
     */
    bo = (ILiquideStaffAdvance) glHeaderList.get(0);
    bo.setItems(glItemList);

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {C0D1BDB7-A06F-42FD-8256-7F61B95C9870}
   */
  public void updatePostedLiquidateStaffAdvance(ILiquideStaffAdvance bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    List glItemList = new ArrayList();
    try {
      validateUpdateLiquidateStaffAdvance();

      List glAccountItemList = cf.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);

      for (int i = 0; i < glAccountItemList.size(); i++) {
        IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glAccountItemList.get(i);

        if (glItem.isHeaderIndicator().booleanValue()) {
          glItem.setReference(bo.getReference());
          glItem.setReferenceType(bo.getReferenceType());
          glItem.setRemark(bo.getRemark());
        }
        else {
          for (int j = 0; j < bo.getItems().size(); j++) {
            ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(j);
            if (glItem.getItemNo().intValue() == item.getItemNo().intValue()) {
              glItem.setRemark(item.getRemark());
              break;
            }
          }
        }
      }

      cf.updateDocument(glItemList, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      StaffAdvanceLiquidation saLiquidate = staffAdvanceLiquidateHome.findByPrimaryKey(new StaffAdvanceLiquidationPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
      saLiquidate.setLastUpdateBy(user.getId());
      saLiquidate.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 6th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(saLiquidate, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.FinderException fx) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  //Chee Seng 14 June 2004, bugId:6069
  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param reversedDocumentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {6EB6D728-D265-488D-B6AA-F69E2758A321}
   */
  public void reverseLiquidateStaffAdvance(String officeCode, Integer fiscalYear, Long reversedDocumentNumber, IUser user) throws AFMSException {
    CommonFunction cf = null;
    IAbstractGLAccountItem glAccountItem = null;
		ILiquideStaffAdvance staffAdvanceLiquidation = null;
		
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      //Get StaffAdvanceLiquidation documentNumber from the reversalDocumentNumber
      List l = new ArrayList();
      Logger.getInstance().logDebug("reversedDocumentNumber = " + reversedDocumentNumber);
/*      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_REVERSEDREFDOCUMENTNUMBER, "=", reversedDocumentNumber),
          new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_HEADERINDICATOR, "=", Boolean.TRUE)
          }; */
			AbstractCriteria[] filter = {
					new FieldCriteria(StaffAdvanceLiquidationDAO.FILTER_OFFICECODE, "=", StaffAdvanceLiquidationDAO.FILTER_GLOFFICECODE),
					new FieldCriteria(StaffAdvanceLiquidationDAO.FILTER_FISCALYEAR, "=", StaffAdvanceLiquidationDAO.FILTER_GLFISCALYEAR),
					new FieldCriteria(StaffAdvanceLiquidationDAO.FILTER_DOCUMENTNUMBER, "=", StaffAdvanceLiquidationDAO.FILTER_GLDOCUMENTNUMBER),
					new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceLiquidationDAO.FILTER_OFFICECODE, "=", officeCode),
					new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceLiquidationDAO.FILTER_FISCALYEAR, "=", fiscalYear),
					new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceLiquidationDAO.FILTER_DOCUMENTNUMBER, "=", reversedDocumentNumber),
					new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceLiquidationDAO.FILTER_GLHEADERINDICATOR, "=", Boolean.TRUE)
					};

      l = DAOProxy.list("StaffAdvanceLiquidation", user, filter);
			Logger.getInstance().logDebug("l.size() = " + l.size());
			
      if (l.size() > 0) {
				staffAdvanceLiquidation = (ILiquideStaffAdvance) l.get(0);
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }

    try {
      //reserve back budget with total cashAdvance amount
      IStaffAdvance staffAdvanceBO = retrieveStaffAdvance(staffAdvanceLiquidation.getOfficeCode(), staffAdvanceLiquidation.getAdvanceFiscalYear(), staffAdvanceLiquidation.getAdvanceDocumentNumber(), user);
      Logger.getInstance().logDebug("staffAdvanceBO.getItems().size() = " + staffAdvanceBO.getItems().size());
      
      for (int i = 0; i < staffAdvanceBO.getItems().size(); i++) {
        IStaffAdvanceBudgetItem staffAdvanceBudgetItemBO = (IStaffAdvanceBudgetItem) staffAdvanceBO.getItems().get(i);
        //Chee Seng 18th Aug 2005, bugId: 13116
        //cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getCostCenterId(), "", staffAdvanceBudgetItemBO.getGlAccount(), staffAdvanceBO.getPostingPeriod(), DebitCreditType.DEBIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), staffAdvanceBO.getDocumentDate(), user);
        cf.checkAndReserveBudget(staffAdvanceBudgetItemBO.getOfficeCode(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getCostCenterId(), "", staffAdvanceBudgetItemBO.getGlAccount(), staffAdvanceBO.getPostingPeriod(), DebitCreditType.DEBIT, staffAdvanceBudgetItemBO.getAmountInLocalCurrency(), staffAdvanceBO.getDocumentDate(), staffAdvanceBudgetItemBO.getFiscalYear(), staffAdvanceBudgetItemBO.getDocumentNumber(), user);
      }

      //reset clearedAmount/documentNumber/fiscalYear fields
      //Chee Seng 07th June 2005, bugId: 10296
//      List staffAdvanceList = new ArrayList(gLAccountItemHome.findByItemNumber(staffAdvanceLiquidation.getOfficeCode(), staffAdvanceLiquidation.getAdvanceFiscalYear(), staffAdvanceLiquidation.getAdvanceDocumentNumber(), new Integer(0)));
			StaffAdvance staffAdvanceHeader = staffAdvanceHome.findByPrimaryKey(new StaffAdvancePK(staffAdvanceLiquidation.getOfficeCode(), staffAdvanceLiquidation.getAdvanceFiscalYear(), staffAdvanceLiquidation.getAdvanceDocumentNumber()));
/*      if (staffAdvanceList.size() <= 0) {
        sessionContext.setRollbackOnly();
        throw new RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.CASH_ADVANCE_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      GLAccountItem staffAdvanceHeader = (GLAccountItem) staffAdvanceList.get(0);
*/
//      staffAdvanceHeader.setClearedAmount(null);
      staffAdvanceHeader.setClearedRefDocumentNumber(null);
      staffAdvanceHeader.setClearedRefFiscalYear(null);
      staffAdvanceHeader.setLastUpdateBy(user.getId());
      staffAdvanceHeader.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 6th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(staffAdvanceHeader, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.GLACCOUNTITEM});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }



  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param accountNumber Description of the Parameter
   * @param totalInvoiceAmount Description of the Parameter
   * @param invoiceDate Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {EEF49A5D-B75E-4DBC-B18C-DC43341D3AEE}
   */
  public BigDecimal checkCreditLimit(String officeCode, String accountNumber, BigDecimal totalInvoiceAmount, java.sql.Date invoiceDate, IUser user) throws AFMSException {
    BigDecimal overRideAmount = null;
    Integer fiscalYear = null;
    ICustomer bo = null;
    CommonFunction commonFunction = null;
    Logger.getInstance().logDebug("officeCode = " + officeCode);
    Logger.getInstance().logDebug("accountNumber = " + accountNumber);
    bo = retrieveDebtorAccount(officeCode, accountNumber, user);

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      fiscalYear = commonFunction.deriveFiscalYear(officeCode, invoiceDate, user);
    }
    catch (RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Chee Seng 16th Aug 2005, bugId: 13103
    IOverridingApproval overridingApprovalBO = checkCreditLimit(bo, totalInvoiceAmount, fiscalYear, true, null, user);
    overRideAmount = overridingApprovalBO.getAmount();
    return overRideAmount;
  }


  //Chee Seng 22nd June 2004, bugId: 6259
  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param aInvoiceAmount Description of the Parameter
   * @param aFiscalYear Description of the Parameter
   * @param aCheckAccrualAmountFlag Description of the Parameter
   * @param aVesselCode Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {9B34DB73-5F4E-4EBF-8D41-FA4094C9550E}
   */
  public com.portrade.ipms.afms.IOverridingApproval checkCreditLimit(com.portrade.ipms.afms.ICustomer bo, java.math.BigDecimal aInvoiceAmount, Integer aFiscalYear, boolean aCheckAccrualAmountFlag, String aVesselCode, IUser user) throws AFMSException {
  	Logger.getInstance().logDebug("checkCreditLimit");
    DebtorAccount debtorAccount = null;

    //Chee Seng 15th Aug 2005, bugId: 13103
    BigDecimal zero = new BigDecimal("0.00");
    BigDecimal aAccountBalance = zero;
    BigDecimal aTotalGuarantee = zero;
    BigDecimal aOverrideAmount = zero;
    BigDecimal aAccrualAmount = zero;
    BigDecimal aTotalCashDeposit = zero;
    BigDecimal aVesselAccrualAmount = null;
    BigDecimal aCargoAccrualAmount = null;
    BigDecimal aAvailableBalanceAmount = zero;
    BigDecimal aExceededAmount = zero;
    BigDecimal aGuarantee = zero;

    IOverridingApproval overridingApprovalBO = new OverridingApprovalValue();
    overridingApprovalBO.setAmount(aOverrideAmount);

    if (bo == null) {
      bo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getAccountNumber(), user);
    }

    /*
	 * karen 14th Feb 2006, bugId:15980
	 * If account category = SPECIAL, do not need to check the credit limit
	 */
    if (bo.getAccountCategory().equals(AccCategory.CASH) || bo.getAccountCategory().equals(AccCategory.SPECIAL)) {
      return overridingApprovalBO;
    }
    Logger.getInstance().logDebug("aInvoiceAmount = " + aInvoiceAmount);
    aAccountBalance = getAccountBalance(bo, aFiscalYear, user);
    Logger.getInstance().logDebug("aAccountBalance = " + aAccountBalance);
    BigDecimal percentage = new BigDecimal(0);
    aGuarantee = getTotalGuarantee(bo, user);
    Logger.getInstance().logDebug("aGuarantee = " + aGuarantee);

    //Chee Seng 09th July 2004, bugId: 6533
    //aTotalGuarantee = getTotalGuarantee(bo, user).multiply(new BigDecimal(IConstants.GuaranteePercentage.DEBTOR_GUARANTEE_PERCENTAGE)).divide(new BigDecimal(IConstants.GuaranteePercentage.HUNDRED), IConstants.ROUNDING_MODE.DIVISION);
    //THC 28 June Change for BPSB
    if (aGuarantee.compareTo(new BigDecimal(0)) > 0) {
      try {
        //THC 28 June 2006 Added for BPSB to get the configurable bank guarantee Percentage
        percentage = retrieveBankGuaranteePercentage(aGuarantee, user);
        //karen 10 July 2006 BugId:17530 cater if the user din setup the bank guarantee percentage in UI

      }
      catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.BankGuaranteePercentageLabelId.BANK_GUARANTEE_PERCENTAGE});
      }
    }
    Logger.getInstance().logDebug("percentage = " + percentage);
    aTotalGuarantee = aGuarantee.multiply(percentage).divide(new BigDecimal(IConstants.GuaranteePercentage.HUNDRED), IConstants.ROUNDING_MODE.DIVISION);

    Logger.getInstance().logDebug("aTotalGuarantee = " + aTotalGuarantee);
    //ffgan
    aTotalCashDeposit = getTotalCashDeposit(bo, user);
    Logger.getInstance().logDebug("aTotalCashDeposit = " + aTotalCashDeposit);

    //Chee Seng 22nd June 2004, bugId: 6259
    Logger.getInstance().logDebug("aCheckAccrualAmountFlag = " + aCheckAccrualAmountFlag);
    Logger.getInstance().logDebug(" bo.getAccountNumber= " + bo.getAccountNumber());
    if (aCheckAccrualAmountFlag) {
      try {
        aVesselAccrualAmount = ICMSConnector.getVesselAccrualAmount(user.getIcmsSession(), bo.getAccountNumber(), aVesselCode);
        if (aVesselAccrualAmount == null) {
          aVesselAccrualAmount = zero;
        }
        aAccrualAmount = aAccrualAmount.add(aVesselAccrualAmount);
        Logger.getInstance().logDebug("before aAccrualAmount = " + aAccrualAmount);
        aCargoAccrualAmount = ICMSConnector.getCargoAccrualAmount(user.getIcmsSession(), bo.getAccountNumber());
        if (aCargoAccrualAmount == null) {
          aCargoAccrualAmount = zero;
        }

        aAccrualAmount = aAccrualAmount.add(aCargoAccrualAmount);
        Logger.getInstance().logDebug("aAccrualAmount = " + aAccrualAmount);
      }
      catch (SQLException ex) {
        Logger.getInstance().logDebug("exception " + ex.getMessage());
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
				}
      }
    }
    Logger.getInstance().logDebug("aAccrualAmount = " + aAccrualAmount);

    if (aTotalGuarantee.add(aTotalCashDeposit).subtract(aAccountBalance).subtract(aInvoiceAmount).subtract(aAccrualAmount).compareTo(new BigDecimal("0")) >= 0) {
      return overridingApprovalBO;
    }
    else {
      //Chee Seng 15th Aug 2005, bugId: 13103
      overridingApprovalBO.setAccountBalanceAmount(aAccountBalance);
      overridingApprovalBO.setBankGuaranteeAmount(aTotalGuarantee);
      overridingApprovalBO.setCashDepositAmount(aTotalCashDeposit);
      overridingApprovalBO.setCargoEstimateAmount(aCargoAccrualAmount);
      overridingApprovalBO.setVesselEstimateAmount(aVesselAccrualAmount);
      aAvailableBalanceAmount = aTotalGuarantee.add(aTotalCashDeposit).subtract(aAccountBalance).subtract(aAccrualAmount);
      Logger.getInstance().logDebug("aAvailableBalanceAmount = " + aAvailableBalanceAmount);
      //aExceededAmount = aAvailableBalanceAmount.subtract(aInvoiceAmount);
      //Logger.getInstance().logDebug("aExceededAmount = " + aExceededAmount);
      //overridingApprovalBO.setExceededAmount(aExceededAmount.negate());

      //Chee Seng 18th July 2005, bugId: 12431
      BigDecimal aCreditLimitAmount = aAccountBalance.add(aAccrualAmount).subtract(aTotalGuarantee).subtract(aTotalCashDeposit);
      //Chee Seng 1st Aug 2005, bugId: 12800
      if (aCreditLimitAmount.compareTo(new BigDecimal("0.00")) < 0) {
        aOverrideAmount = aInvoiceAmount.add(aCreditLimitAmount);
      }
      else {
        aOverrideAmount = aInvoiceAmount;
      }
      /*
      if(aCreditLimitAmount.compareTo(aInvoiceAmount) > 0) {
				aOverrideAmount = aInvoiceAmount;
      }
      else {
				aOverrideAmount = aInvoiceAmount.subtract(aCreditLimitAmount);
      }
      */
      aOverrideAmount = aOverrideAmount.negate();
      //aOverrideAmount = aTotalGuarantee.add(aTotalCashDeposit).subtract(aAccountBalance).subtract(aInvoiceAmount).subtract(aAccrualAmount);
      Logger.getInstance().logDebug("aOverrideAmount = " + aOverrideAmount);
      overridingApprovalBO.setAmount(aOverrideAmount);
      return overridingApprovalBO;
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {6B54D02A-800B-411E-B8A3-19504937F8E2}
   */
  public IInterOfficeCollection createInterOfficeCollection(IInterOfficeCollection bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    GeneralLedgerSetup glSetup = null;
    try {
      try {
        cf = commonFunctionHome.create();
        glSetup = generalLedgerSetupHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      setInterOfficeCollectionValue(bo, user);
      validateCreateInterOfficeCollection(bo, user);

      InterOfficeCollection interOfficeCollection = null;
      try {
        interOfficeCollection = interOfficeCollectionHome.create(new InterOfficeCollectionPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()),
            bo.getReceiptNumber(), bo.getCrossOfficeNumber(), bo.getCrossOfficeCode(), bo.getInvoiceNumber(), bo.getCrossOfficeTransitAccount(),
            bo.getInvoiceAmount(), bo.getCollectionAccount(), bo.getPaymentType(), bo.getChequeNumber(), bo.getChequeDate(), bo.getDebtorCode(), bo.getDebtorName(), bo.getTin(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      }
      catch (javax.ejb.DuplicateKeyException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InterOfficeCollectionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      catch (javax.ejb.CreateException ex) {
        sessionContext.setRollbackOnly();
        throw new CannotCreateRecordException(new Object[]{InterOfficeCollectionLabelId.INTEROFFICECOLLECTION});
      }

      Long invoiceDocumentNumber = null;
      Integer invoiceFiscalYear = null;
      IAbstractGLAccountItem glAccountItem = null;
      // Clear invoice
      /*
       * Jason 07th Aug 2003
       * if (bo.getInvoiceNumber() != null) {
       * glAccountItem = cf.GLAccountItem(bo.getId(), user);
       * invoiceDocumentNumber = glAccountItem.getDocumentNumber();
       * invoiceFiscalYear = glAccountItem.getFiscalYear();
       * if (glAccountItem.getClearedAmount() == null) {
       * glAccountItem.setClearedAmount(new BigDecimal(0.00));
       * }
       * glAccountItem.setClearedAmount(glAccountItem.getClearedAmount().add(bo.getAmount()));
       * if (glAccountItem.getClearedAmount().compareTo(glAccountItem.getAmount()) == 0) {
       * glAccountItem.setClearedRefDocumentNumber(bo.getCrossOfficeDocumentNumber());
       * glAccountItem.setClearedRefFiscalYear(bo.getFiscalYear());
       * glAccountItem.setClearingDocumentIndicator(new Boolean(false));
       * glAccountItem.setParentItemNumber(new Integer(0));
       * }
       * cf.updateSpecialDocumentGLAccountItem(glAccountItem, user);
       * }
       */
      // set GLAccountItem
      List glAccountItems1 = new java.util.ArrayList();
      List glAccountItems2 = new java.util.ArrayList();

      for (int i = 0; i < 4; i++) {
        glAccountItem = new AbstractGLAccountItemValue();
        // set common attributes
        glAccountItem.setFiscalYear(bo.getFiscalYear());
        glAccountItem.setAmount(bo.getAmount());
        glAccountItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
        glAccountItem.setDocumentDate(bo.getDocumentDate());
        glAccountItem.setPostingDate(bo.getPostingDate());
        glAccountItem.setPostingPeriod(bo.getPostingPeriod());
        glAccountItem.setChequeNumber(bo.getChequeNumber());
        glAccountItem.setCurrency(bo.getCurrency());
        glAccountItem.setExchangeRate(bo.getExchangeRate());
        glAccountItem.setAssignment(bo.getAssignment());
        glAccountItem.setRemark(bo.getRemark());
        glAccountItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
        glAccountItem.setTaxIndicator(bo.isTaxIndicator());

        if (i == 0) {
          // Debit Collection office for office code
          glAccountItem.setOfficeCode(bo.getOfficeCode());
          glAccountItem.setDocumentNumber(bo.getDocumentNumber());
          glAccountItem.setDocumentType(bo.getDocumentType());

          glAccountItem.setHeaderIndicator(new Boolean(true));
          glAccountItem.setPostingKey(bo.getDebitPostingKey());
          glAccountItem.setCostCenterId(bo.getCostCenterId());
          glAccountItem.setGLAccount(bo.getCollectionAccount());

          glAccountItems1.add(glAccountItem);
        }
        else if (i == 1) {
          // Credit Collection office for office code
          glAccountItem.setOfficeCode(bo.getOfficeCode());
          glAccountItem.setDocumentNumber(bo.getDocumentNumber());
          glAccountItem.setDocumentType(bo.getDocumentType());

          glAccountItem.setHeaderIndicator(new Boolean(false));
          glAccountItem.setPostingKey(bo.getCreditPostingKey());
          glAccountItem.setCostCenterId(bo.getCostCenterId());

          try {
            IOffice office = glSetup.retrieveOffice(glAccountItem.getOfficeCode(), user);
            IAutomaticAccountAssignment automaticAccountAssignment = glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getCrossOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, glAccountItem.getPostingKey(), user);

            glAccountItem.setGLAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

          glAccountItems1.add(glAccountItem);
        }
        else if (i == 2) {
          // Debit clearing account for Cross office code
          glAccountItem.setOfficeCode(bo.getCrossOfficeCode());
          glAccountItem.setDocumentNumber(bo.getCrossOfficeDocumentNumber());
          glAccountItem.setDocumentType(bo.getCrossOfficeDocumentType());

          glAccountItem.setHeaderIndicator(new Boolean(true));
          glAccountItem.setPostingKey(bo.getDebitPostingKey());
          glAccountItem.setCostCenterId(bo.getCrossOfficeCostCenterId());
          try {
            IOffice office = glSetup.retrieveOffice(glAccountItem.getOfficeCode(), user);
            IAutomaticAccountAssignment automaticAccountAssignment = glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, glAccountItem.getPostingKey(), user);

            glAccountItem.setGLAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }
          if (bo.getInvoiceNumber() != null) {
            glAccountItem.setClearingDocumentIndicator(new Boolean(true));
            glAccountItem.setClearedAmount(bo.getAmount());
            glAccountItem.setClearedRefDocumentNumber(invoiceDocumentNumber);
            glAccountItem.setClearedRefFiscalYear(invoiceFiscalYear);
            glAccountItem.setParentItemNumber(new Integer(0));
          }

          glAccountItems2.add(glAccountItem);
        }
        else if (i == 3) {
          // Credit transit account for Cross office code
          glAccountItem.setOfficeCode(bo.getCrossOfficeCode());
          glAccountItem.setDocumentNumber(bo.getCrossOfficeDocumentNumber());
          glAccountItem.setDocumentType(bo.getCrossOfficeDocumentType());
          glAccountItem.setPostingKey(bo.getCreditPostingKey());
          glAccountItem.setHeaderIndicator(new Boolean(false));
          glAccountItem.setCostCenterId(bo.getCrossOfficeCostCenterId());

          //Jason 07th Aug 2003
          if (bo.getDebtorCode() != null && !bo.getDebtorCode().equals("")) {
            try {
              glAccountItem.setSubledgerAccount(bo.getDebtorCode());

              ICustomer customer = retrieveDebtorAccount(glAccountItem.getOfficeCode(), glAccountItem.getSubledgerAccount(), user);

              glAccountItem.setPostingKey(IConstants.TransactionPostingKey.INCOMING_PAYMENT);
              bo.setDebtorName(customer.getDebtorName());
              bo.setTin(customer.getTaxIdentificationNumber());
              //tml 15 May 2006, BugId: 16902
              bo.setSubledgerOfficeCode(customer.getOfficeCode());
              glAccountItem.setSubledgerOfficeCode(bo.getSubledgerOfficeCode());

              glAccountItem.setSubledgerName(bo.getDebtorName());
              glAccountItem.setTin(bo.getTin());
              glAccountItem.setGLAccount(customer.getReconAccountId());
              glAccountItem.setClearedAmount(new BigDecimal(0));
            }
            catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
            }
          }
          else {
            glAccountItem.setGLAccount(bo.getCrossOfficeTransitAccount());
          }

          glAccountItems2.add(glAccountItem);
        }
      }
      List documentList = new ArrayList();
      documentList.add(glAccountItems1);
      documentList.add(glAccountItems2);

      documentList = cf.parkDocuments(documentList, bo.getBudgetActionType(), user);
    }
    catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {D0E08073-0B5D-4B20-BD9C-4E1646FD18DA}
   */
  public IInterOfficeCollection retrieveInterOfficeCollection(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    CommonFunction cf = null;
    IInterOfficeCollection bo = new InterOfficeCollectionValue();
    try {
      InterOfficeCollection interOfficeCollection = interOfficeCollectionHome.findByPrimaryKey(new InterOfficeCollectionPK(officeCode, fiscalYear, documentNumber));

      bo.setOfficeCode(interOfficeCollection.getOfficeCode());
      bo.setFiscalYear(interOfficeCollection.getFiscalYear());
      bo.setDocumentNumber(interOfficeCollection.getDocumentNumber());
      bo.setReceiptNumber(interOfficeCollection.getReceiptNumber());
      bo.setCrossOfficeNumber(interOfficeCollection.getCrossOfficeNumber());
      bo.setCrossOfficeCode(interOfficeCollection.getCrossOfficeCode());
      bo.setInvoiceNumber(interOfficeCollection.getInvoiceNumber());
      bo.setCrossOfficeTransitAccount(interOfficeCollection.getCrossOfficeTransitAccount());
      bo.setInvoiceAmount(interOfficeCollection.getInvoiceAmount());
      bo.setCollectionAccount(interOfficeCollection.getCollectionAccount());
      bo.setPaymentType(interOfficeCollection.getPaymentType());
      bo.setChequeNumber(interOfficeCollection.getChequeNumber());
      bo.setChequeDate(interOfficeCollection.getChequeDate());
      bo.setDebtorCode(interOfficeCollection.getDebtorCode());
      bo.setDebtorName(interOfficeCollection.getDebtorName());
      bo.setTin(interOfficeCollection.getTin());

      try {
        AbstractCriteria[] itemFilter = {
            new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_CROSSOFFICENUMBER, "=", bo.getCrossOfficeNumber()),
            };

        OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_ITEMNUMBER, true)};

        java.util.List itemResults = DAOProxy.list("GLAccountItem", user, itemFilter, order);

        for (int i = 0; i < itemResults.size(); i++) {
          IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) itemResults.get(i);
          IInterOfficeCollectionGLTransaction item = new InterOfficeCollectionGLTransactionValue();

          item.setDocumentNumber(glItem.getDocumentNumber());
          item.setItemNumber(glItem.getItemNo());
          item.setCrossOfficeNumber(glItem.getCrossOfficeNumber());
          item.setPostingDate(glItem.getPostingDate());
          item.setPostingKey(glItem.getPostingKey());
          item.setGlAccount(glItem.getGLAccount());
          item.setAmountInLocalCurrency(glItem.getAmountInLocalCurrency());
          item.setCostCenterId(glItem.getCostCenterId());
          item.setTaxCode(glItem.getTaxCode());
          item.setCreatedBy(glItem.getCreatedBy());

          if (glItem.getDocumentNumber().equals(bo.getDocumentNumber())) {
            bo.addGLTransactionForCollection(item);

            bo.setProcessStatus(glItem.getProcessStatus());

            if (glItem.isHeaderIndicator().booleanValue()) {
              bo.setDocumentType(glItem.getDocumentType());
              bo.setDocumentDate(glItem.getDocumentDate());
              bo.setPostingDate(glItem.getPostingDate());
              bo.setPostingPeriod(glItem.getPostingPeriod());
              bo.setDebitPostingKey(glItem.getPostingKey());
              bo.setCollectionAccount(glItem.getGLAccount());
              bo.setTaxIndicator(glItem.isTaxIndicator());
              bo.setCurrency(glItem.getCurrency());
              bo.setExchangeRate(glItem.getExchangeRate());
              bo.setAmount(glItem.getAmount());
              bo.setAmountInLocalCurrency(glItem.getAmountInLocalCurrency());
              bo.setCostCenterId(glItem.getCostCenterId());
              bo.setAssignment(glItem.getAssignment());
              bo.setRemark(glItem.getRemark());
            }
            else {
              bo.setCreditPostingKey(glItem.getPostingKey());
            }
          }
          else {
            bo.addGLTransactionForCrossOffice(item);

            bo.setProcessStatus(glItem.getProcessStatus());

            if (glItem.isHeaderIndicator().booleanValue()) {
              bo.setCrossOfficeCode(glItem.getOfficeCode());
              bo.setCrossOfficeCostCenterId(glItem.getCostCenterId());
            }
            else {
              bo.setCrossOfficeTransitAccount(glItem.getGLAccount());
            }
          }
        }
      }
      catch (java.sql.SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InterOfficeCollectionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
				}
      }
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InterOfficeCollectionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {C1403504-0623-4EF5-AC21-33B9B2B02EF2}
   */
  public IInterOfficeCollection deleteInterOfficeCollection(String officeCode, Integer fiscalYear, Long documentNumber, String budgetActionIndicator, com.portrade.ipms.icms.IUser user) throws AFMSException {
    java.util.ArrayList interOfficeCollectionList = null;
    java.util.ArrayList glAccountItemList = null;

    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    InterOfficeCollection interOfficeCollection = null;
    CommonFunction commonFunction = null;
    com.portrade.ipms.afms.IInterOfficeCollection bo = new InterOfficeCollectionValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      commonFunction.deleteParkedDocument(officeCode, fiscalYear, documentNumber, budgetActionIndicator, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param invoiceList Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {63B5BE28-F02A-49EE-9DD6-B41D5C0D0E3B}
   */
  public IARDocument createRemsBilling(java.util.ArrayList invoiceList, IUser user) throws AFMSException {
    AccountReceivableManager accountReceivableManager = null;
    IARDocument bo = new DebtorInvoiceValue();
    IARDocument invoiceBO = new DebtorInvoiceValue();

    try {
      accountReceivableManager = accountReceivableManagerHome.create();
    }
    catch (javax.ejb.CreateException cx) {
      Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    for (int j = 0; j < invoiceList.size(); j++) {
      invoiceBO = (IARDocument) invoiceList.get(j);
      try {
        invoiceBO = accountReceivableManager.createRemsBillingWithSession(invoiceBO, user);
        bo.addOkItem(new Object[]{invoiceBO.getDocumentNumber(), invoiceBO.getGLAccount(), invoiceBO.getAmount(), invoiceBO.getAmountInLocalCurrency()});
      }
      catch (com.portrade.ipms.afms.exceptions.ExtraInfoException ex) {
        Object[] obj = ex.getParameters();
        bo.addErrorItem(new Object[]{new Long(j), obj[1], obj[2], obj[3], ex.getEx()});

      }
      catch (com.portrade.ipms.afms.exceptions.AFMSListException ex) {
        List warningList = ex.getExceptions();
        for (int i = 0; i < warningList.size(); i++) {
          com.portrade.ipms.afms.exceptions.ExtraInfoException warning = (com.portrade.ipms.afms.exceptions.ExtraInfoException) warningList.get(i);
          Object[] obj = warning.getParameters();
          bo.addWarningItem(new Object[]{new Long(j), obj[1], obj[2], obj[3], warning.getEx(), invoiceBO.getId()});
        }
      }
      // end for budgeting
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {8CE5D6B5-BDF3-4F7B-9C97-EED7D463B0D8}
   */
  public IARDocument createRemsBillingWithSession(IARDocument bo, IUser user) throws AFMSException {
    calculateTaxForInvoiceItemWithRems(bo, user);

    bo = createDebtorInvoiceWithRems(bo, user);
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param invoiceList Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {827F1657-CE43-4284-A54B-14E84A34C94D}
   */
  public IARDocument deleteRemsBilling(java.util.ArrayList invoiceList, IUser user) throws AFMSException {
    AccountReceivableManager accountReceivableManager = null;
    IARDocument bo = new DebtorInvoiceValue();
    IARDocument invoiceBO = new DebtorInvoiceValue();

    try {
      accountReceivableManager = accountReceivableManagerHome.create();
    }
    catch (javax.ejb.CreateException cx) {
      Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    for (int j = 0; j < invoiceList.size(); j++) {
      try {
        invoiceBO = (IARDocument) invoiceList.get(j);
        accountReceivableManager.deleteRemsBillingWithSession(invoiceBO, user);
        bo.addOkItem(new Object[]{null, ((IInvoiceItem) invoiceBO.getItems().get(0)).getGLAccount(), invoiceBO.getAmount(), invoiceBO.getAmountInLocalCurrency()});
      }
      catch (com.portrade.ipms.afms.exceptions.ExtraInfoException ex) {
        Object[] obj = ex.getParameters();
        bo.addErrorItem(new Object[]{new Long(j), obj[1], obj[2], obj[3], ex.getEx()});
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSListException ex) {
        List warningList = ex.getExceptions();
        for (int i = 0; i < warningList.size(); i++) {
          com.portrade.ipms.afms.exceptions.ExtraInfoException warning = (com.portrade.ipms.afms.exceptions.ExtraInfoException) warningList.get(i);
          Object[] obj = warning.getParameters();
          bo.addWarningItem(new Object[]{new Long(j), obj[1], obj[2], obj[3], warning.getEx(), bo.getId()});
        }
      }
      // end for budgeting
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A818945F-B97F-4877-8A2F-F247E563DE5B}
   */
  public void deleteRemsBillingWithSession(IARDocument bo, IUser user) throws AFMSException {
    //deleteRemsBilling(bo.getId(), user);
  }


  /**
   * Description of the Method
   *
   * @param glItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {B27D469F-A6FF-43A1-94DD-9B6E160A208E}
   */
  public void postNotesReceivable(IAbstractGLAccountItem glItem, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException cx) {
        Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
      }
      java.util.List notesInvoiceList = new java.util.ArrayList();

      try {
        if (glItem.getOfficeCode() != null && glItem.getFiscalYear() != null && glItem.getDocumentNumber() != null) {
          notesInvoiceList = new java.util.ArrayList(notesReceivableInvoiceItemHome.findByDocumentNumber(glItem.getOfficeCode(), glItem.getFiscalYear(), new Integer(glItem.getDocumentNumber().intValue())));
        }
        else {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableInvoiceItemLabelId.INVOICE});
        }
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableInvoiceItemLabelId.INVOICE});
      }

      if (notesInvoiceList.size() <= 0) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableInvoiceItemLabelId.INVOICE});
      }

      for (int i = 0; i < notesInvoiceList.size(); i++) {
        NotesReceivableInvoiceItem item = (NotesReceivableInvoiceItem) notesInvoiceList.get(i);
        List invoiceList = cf.retrieveGLAccountItemByItemNumber(item.getOfficeCode(), item.getInvoiceFiscalYear(), item.getInvoiceDocumentNumber(), new Integer(0), user);
        if (invoiceList.size() > 0) {
          IAbstractGLAccountItem invoice = (IAbstractGLAccountItem) invoiceList.get(0);
          BigDecimal amount = (invoice.getAmount() == null) ? new BigDecimal(0.00) : invoice.getAmount();
          BigDecimal clearedAmount = (invoice.getClearedAmount() == null) ? new BigDecimal(0.00) : invoice.getClearedAmount();
          if (amount.subtract(clearedAmount).compareTo(item.getInvoiceAmount()) != 0) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.InvoiceHasBeenPaidException(new Object[]{NotesReceivableInvoiceItemLabelId.INVOICE});
          }
        }
        else {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableInvoiceItemLabelId.INVOICE});
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param debtorInvoiceList Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @exception ValidationException Description of the Exception
   * @modelguid {9F8C9649-8C6F-4BFC-A39B-065414EB47A8}
   */
  public List createMultipleDebtorInvoice(List debtorInvoiceList, IUser user) throws AFMSException, ValidationException {
    Logger.getInstance().logDebug("createMultipleDebtorInvoice");
    CommonFunction commonFunction = null;
    BigDecimal zero = new BigDecimal("0.00");

    List boList = new ArrayList();
    
    if (debtorInvoiceList != null && debtorInvoiceList.size() > 0) {
      Logger.getInstance().logDebug("debtorInvoiceList.size() = " + debtorInvoiceList.size());

      for (int i = 0; i < debtorInvoiceList.size(); i++) {
        IARDocument bo = (IARDocument) debtorInvoiceList.get(i);
        try {
          //IARDocument debtorInvoice = createParkDebtorInvoice(bo, user);
          Logger.getInstance().logDebug("bo.getImportExportFlag() "+bo.getImportExportFlag());
          List invoiceList = confirmParkDebtorInvoice(bo, user);

          for (int j = 0; j < invoiceList.size(); j++) {
            IARDocument debtorInvoice = (IARDocument) invoiceList.get(j);
            boList.add(debtorInvoice);

            if (debtorInvoice.getOverrideAmount() != null && debtorInvoice.getOverrideAmount().compareTo(zero) < 0) {
              com.portrade.ipms.afms.IOverridingApproval overridingApprovalBO = new OverridingApprovalValue();
              overridingApprovalBO.setOfficeCode(debtorInvoice.getOfficeCode());
              overridingApprovalBO.setFiscalYear(debtorInvoice.getFiscalYear());
              overridingApprovalBO.setDocumentNumber(debtorInvoice.getDocumentNumber());
              overridingApprovalBO.setDebtorCode(debtorInvoice.getSubledgerAccount());
              overridingApprovalBO.setInvoiceType(debtorInvoice.getInvoiceType());
              overridingApprovalBO.setInvoiceDate(debtorInvoice.getDocumentDate());
              overridingApprovalBO.setScn(debtorInvoice.getSCN());
              overridingApprovalBO.setInvoiceNumber(debtorInvoice.getInvoiceNumber());
              //Fix me: will pass in the list to the dao
              OverridingApprovalDAO dao = (OverridingApprovalDAO) DAOProxy.getDAO("overridingApproval", user);
              dao.updateOverridingApproval(overridingApprovalBO, user);
            }
          }

        }
        catch (AFMSException ex) {
          sessionContext.setRollbackOnly();
          throw ex;
        }
        catch (SQLException ex) {
          sessionContext.setRollbackOnly();
					if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new RecordNotFoundException(new Object[]{OverridingApprovalLabelId.OVERRIDINGAPPROVAL});
					}
        }
        catch (ValidationException ex) {
          sessionContext.setRollbackOnly();
          throw ex;
        }
      }

    }
    return boList;
  }


  //Chee Seng 09th June 2004, BugId: 5816
  /**
   * Description of the Method
   *
   * @param gLItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {2C154576-12E2-49EB-B073-F3D60A49621D}
   */
  public void reversedDepositToBank(IAbstractGLAccountItem gLItem, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    List depositToBankGLAccountItemList = new ArrayList();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      //Chee Seng 13th Aug 2004, bugId: 6849
      //depositToBankGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(gLItem.getOfficeCode(), gLItem.getFiscalYear(), new Integer(gLItem.getReversedRefDocumentNumber().intValue())));
      depositToBankGLAccountItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(gLItem.getOfficeCode(), gLItem.getFiscalYear(), gLItem.getReversedRefDocumentNumber(), user);

      if (depositToBankGLAccountItemList.size() <= 0) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{gLItem.getReversedRefDocumentNumber().toString()});
      }
      else {
        //Chee Seng 13th Aug 2004, bugId: 6849
        IAbstractGLAccountItem depositToBankGLAccountItem = (IAbstractGLAccountItem) depositToBankGLAccountItemList.get(0);
        //GLAccountItem depositToBankGLAccountItem = (GLAccountItem) depositToBankGLAccountItemList.get(0);

        IDepositToBank depositToBank = retrieveDepositToBank(depositToBankGLAccountItem.getOfficeCode(), depositToBankGLAccountItem.getFiscalYear(), depositToBankGLAccountItem.getDocumentNumber(), user);

        if (depositToBank.getReceipts().size() <= 0) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{depositToBankGLAccountItem.getDocumentNumber()});
        }
        else {
          for (int i = 0; i < depositToBank.getReceipts().size(); i++) {
            IDepositToBankReceipt depositToBankReceipt = (IDepositToBankReceipt) depositToBank.getReceipts().get(i);
            //Chee Seng 07th June 2005, bugId: 10296
            //List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(depositToBankReceipt.getOrOfficeCode(), depositToBankReceipt.getOrFiscalYear(), depositToBankReceipt.getOrDocumentNumber()));
            // Erma BugId: 26200 21/10/08
            List collectionGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByFiscalYearAndDocumentNumber(depositToBankReceipt.getOrFiscalYear(), depositToBankReceipt.getOrDocumentNumber()));

            if (collectionGLAccountItemList.size() <= 0) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{depositToBankReceipt.getOrDocumentNumber()});
            }
            else {
              GLAccountItem collectionGLAccountItem = (GLAccountItem) collectionGLAccountItemList.get(0);
              collectionGLAccountItem.setDepositToBankIndicator(null);
              collectionGLAccountItem.setLastUpdateBy(user.getId());
              collectionGLAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
            }
          }
        }
      }
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }
  
  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A7F63621-FCD7-4D26-968E-6682C37F110C}
   */
  public void createARAccountBalance(com.portrade.ipms.afms.IAccountBalance bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    // Get the remote interface
    ARAccountBalance arAccountBalance = null;

    try {
      arAccountBalance = arAccountBalanceHome.create(new ARAccountBalancePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getAccount(), bo.getPostingPeriod()),
          bo.getTotalDebit(), bo.getTotalCredit(), bo.getFiscalYearOpeningBalance(),
          user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 20th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(arAccountBalance, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param debtorAccount Description of the Parameter
   * @param postingPeriod Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {C8128B16-36EB-4A3F-B8B4-F7ABA1F72DED}
   */
  public com.portrade.ipms.afms.IAccountBalance retrieveARAccountBalance(String officeCode, Integer fiscalYear, String debtorAccount, Integer postingPeriod, com.portrade.ipms.icms.IUser user) throws AFMSException {
    IAccountBalance arAccountBalance = null;
    com.portrade.ipms.afms.IAccountBalance bo = new ARAccountBalanceValue();

    try {
      ARAccountBalanceDAO dao = (ARAccountBalanceDAO) DAOProxy.getDAO("ARAccountBalance", user);

      List arAccountBalanceList = dao.listARAccountBalance(officeCode, fiscalYear, debtorAccount, postingPeriod);

      if (arAccountBalanceList.size() > 0) {
        bo = (IAccountBalance) arAccountBalanceList.get(0);
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
			}
    }

    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param debtorAccount Description of the Parameter
   * @param postingPeriod Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {177D0936-0C18-4097-8E01-9024A264426D}
   */
  public void deleteARAccountBalance(String officeCode, Integer fiscalYear, String debtorAccount, Integer postingPeriod, com.portrade.ipms.icms.IUser user) throws AFMSException {
    ARAccountBalance arAccountBalance = null;
    try {
      arAccountBalance = arAccountBalanceHome.findByPrimaryKey(new ARAccountBalancePK(officeCode, fiscalYear, debtorAccount, postingPeriod));
      //Chee Seng 20th July 2005, bugId: 11719
      ACRAuditTrail.deleteLogAuditTrail(arAccountBalance, user);
      /*
      AbstractCriteria[] filter = {new Criteria(ARAccountBalanceDAO.FILTER_OFFICECODE, "=", officeCode), new Criteria(ARAccountBalanceDAO.FILTER_FISCALYEAR, "=", fiscalYear), new Criteria(ARAccountBalanceDAO.FILTER_DEBTORACCOUNT, "=", debtorAccount), new Criteria(ARAccountBalanceDAO.FILTER_POSTINGPERIOD, "=", postingPeriod)};
      DAOProxy.setAuditUserInformation("afmsARAccountBalance", "ARAccountBalance", filter, user);
			*/
      arAccountBalance.remove();
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {1C164164-A581-48F4-AB3B-BE967F1A0314}
   */
  public void updateARAccountBalance(com.portrade.ipms.afms.IAccountBalance bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    ARAccountBalance arAccountBalance = null;
    try {
      arAccountBalance = arAccountBalanceHome.findByPrimaryKey(new ARAccountBalancePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getAccount(), bo.getPostingPeriod()));
      arAccountBalance.setTotalDebit(bo.getTotalDebit());
      arAccountBalance.setTotalCredit(bo.getTotalCredit());
      arAccountBalance.setFiscalYearOpeningBalance(bo.getFiscalYearOpeningBalance());
      arAccountBalance.setLastUpdateBy(user.getId());
      arAccountBalance.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 20th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(arAccountBalance, user);
    }
    catch (javax.ejb.FinderException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ARAccountBalanceLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DEBTOR_ACCOUNT_AND_POSTING_PERIOD});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Update the last suspend date and account status in the debtor master file.
   *
   * @param debtorList Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {20A3C686-04B4-4EFD-8122-18FFC6327D65}
   */
  public void suspendDebtor(java.util.List debtorList, IUser user) throws AFMSException {

    if (debtorList != null && debtorList.size() > 0) {

      try {
        DebtorAccount debtorAccount = null;
        int debtorSize = debtorList.size();
        ICustomer iCustObj = null;
        for (int i = 0; i < debtorSize; i++) {
          iCustObj = (ICustomer) debtorList.get(i);
          validateSuspendDebtor(iCustObj, user);
          debtorAccount = debtorAccountHome.findByPrimaryKey(
              new DebtorAccountPK(iCustObj.getAccountNumber(), iCustObj.getOfficeCode()));

          debtorAccount.setAccountStatus(AccStatus.SUSPENDED);
          debtorAccount.setLastSuspendDate(AFMSUtilities.getCurrentDate());
          debtorAccount.setLastUpdateBy(user.getId());
          debtorAccount.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        }
      }
      catch (javax.ejb.FinderException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

    }

  }


  /**
   * Retrieves oustanding and overdue invoices for master page.
   *
   * @param officeCode Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {965E85F2-61CE-449D-B5DE-0CEDA6C3D938}
   */
  public List retrieveOutstandingDebtor(String officeCode, IUser user) throws AFMSException {
    List debtorList = null;

    try {
      GLAccountItemDAO dao = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
      debtorList = dao.listOutstandingDebtor(officeCode, AccStatus.ACTIVE, AccCategory.CREDIT);

    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
			}
    }

    return debtorList;
  }


  /**
   * Retrieves summary of debtor accounts
   *
   * @param officeCode Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {5A4D1358-1145-4E6D-955C-036C1B529777}
   */
  public List retrieveTotalDebtorAccount(String officeCode, IUser user) throws AFMSException {

    List totalDebtorAccount = new ArrayList();
    try {
      DebtorAccountDAO dao = (DebtorAccountDAO) DAOProxy.getDAO("DebtorAccount", user);

      if (dao != null) {
        int totalActive = dao.retrieveTotalDebtorAccount(officeCode, AccStatus.ACTIVE, AccCategory.CREDIT);
        int totalSuspended = dao.retrieveTotalDebtorAccount(officeCode, AccStatus.SUSPENDED, AccCategory.CREDIT);
        totalDebtorAccount.add(new Integer(totalActive));
        totalDebtorAccount.add(new Integer(totalSuspended));
      }

    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
			}
    }
    return totalDebtorAccount;
  }


  /**
   * Retrieve extra information of the debtor code selected by the users in
   * Suspended debtor account details page.
   *
   * @param officeCode Description of the Parameter
   * @param accountNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {ADC53D64-4625-446E-82C4-2858B90CB47A}
   */
  public List retrieveDebtorInvoiceDetail(String officeCode, String accountNumber, IUser user) throws AFMSException {
    List debtorList = null;

    try {
      //Chee Seng 04th Oct 2005, bugId: 13933
      InvoiceDAO dao = (com.portrade.ipms.afms.dao.InvoiceDAO) DAOProxy.getDAO("invoice", user);
      debtorList = dao.listDebtorInvoiceDetail(officeCode, accountNumber,
          AccStatus.ACTIVE, AccCategory.CREDIT, TransactionDocumentType.DEBTOR_INVOICE, TransactionDocumentType.SURCHARGE_INVOICE);
      /*
			GLAccountItemDAO dao = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
			debtorList = dao.listDebtorInvoiceDetail(officeCode, accountNumber,
					AccStatus.ACTIVE, AccCategory.CREDIT, TransactionDocumentType.DEBTOR_INVOICE, TransactionDocumentType.SURCHARGE_INVOICE);
			*/
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
			}
    }

    return debtorList;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {9D7C1BE4-180A-4FA0-85F4-A45362F607B9}
   */
  public IDebtorCashDeposit createDebtorCashDeposit(IDebtorCashDeposit bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DebtorCashDeposit debtorCashDeposit = null;
    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    setDebtorCashDepositValue(bo, user);
    validateCreateDebtorCashDeposit(bo, user);
    validateDebtorCashDeposit(bo, user);

    IAbstractGLAccountItem glAccountHeaderItem = new AbstractGLAccountItemValue();
    glAccountHeaderItem.setOfficeCode(bo.getOfficeCode());
    glAccountHeaderItem.setFiscalYear(bo.getFiscalYear());
    glAccountHeaderItem.setDocumentNumber(bo.getDocumentNumber());
    glAccountHeaderItem.setAccountType(PostingAccountType.GL);
    glAccountHeaderItem.setDocumentType(TransactionDocumentType.DEBTOR_CASH_DEPOSIT);
    glAccountHeaderItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
    glAccountHeaderItem.setPostingDate(bo.getPostingDate());
    glAccountHeaderItem.setDocumentDate(bo.getDocumentDate());
    glAccountHeaderItem.setPostingPeriod(bo.getPostingPeriod());
    glAccountHeaderItem.setReference(bo.getReference());
    glAccountHeaderItem.setReferenceType(bo.getReferenceType());
    glAccountHeaderItem.setCurrency(bo.getCurrency());
    glAccountHeaderItem.setExchangeRate(bo.getExchangeRate());
    glAccountHeaderItem.setHeaderIndicator(Boolean.TRUE);
    glAccountHeaderItem.setCostCenterId(bo.getCostCenterId());
    glAccountHeaderItem.setSubledgerAccount(null);
    glAccountHeaderItem.setGLAccount(bo.getBankGLAccount());
    glAccountHeaderItem.setAmount(bo.getAmount());
    glAccountHeaderItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
    glAccountHeaderItem.setProjectId(bo.getProjectId());
    glAccountHeaderItem.setAssignment(bo.getBankAssignment());
    Logger.getInstance().logDebug("bankRem : " + bo.getBankRemark());
    glAccountHeaderItem.setRemark(bo.getBankRemark());
    glAccountHeaderItem.setSubledgerName(bo.getSubledgerName());
    glAccountHeaderItem.setTin(bo.getTin());
    glAccountHeaderItem.setChequeNumber(bo.getChequeNumber());
    glAccountHeaderItem.setCid(bo.getCid());
    glAccountHeaderItem.setChequeType(bo.getChequeType());

    List glItemList = new ArrayList();
    glItemList.add(glAccountHeaderItem);

    IAbstractGLAccountItem glAccountItem = new AbstractGLAccountItemValue();
    glAccountItem.setOfficeCode(bo.getOfficeCode());
    glAccountItem.setFiscalYear(bo.getFiscalYear());
    glAccountItem.setDocumentNumber(bo.getDocumentNumber());
    glAccountItem.setAccountType(PostingAccountType.GL);
    glAccountItem.setDocumentType(TransactionDocumentType.DEBTOR_CASH_DEPOSIT);
    glAccountItem.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
    glAccountItem.setPostingDate(bo.getPostingDate());
    glAccountItem.setDocumentDate(bo.getDocumentDate());
    glAccountItem.setPostingPeriod(bo.getPostingPeriod());
    glAccountItem.setCurrency(bo.getCurrency());
    glAccountItem.setExchangeRate(bo.getExchangeRate());
    glAccountItem.setHeaderIndicator(Boolean.FALSE);
    glAccountItem.setCostCenterId(bo.getCostCenterId());
    glAccountItem.setSubledgerAccount(null);
    glAccountItem.setGLAccount(bo.getGLAccount());
    glAccountItem.setAmount(bo.getAmount());
    glAccountItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
    glAccountItem.setProjectId(bo.getProjectId());
    glAccountItem.setAssignment(bo.getAssignment());
    Logger.getInstance().logDebug("rem = " + bo.getRemark());
    glAccountItem.setRemark(bo.getRemark());
    glAccountItem.setSubledgerName(null);
    glAccountItem.setTin(null);
    glAccountItem.setChequeNumber(null);
    glAccountItem.setCid(bo.getCid());
    Logger.getInstance().logDebug("CD3");
    glItemList.add(glAccountItem);
    Logger.getInstance().equals("b4 try");
    try {
      Logger.getInstance().logDebug("CD4");
      glItemList = commonFunction.postDocument(glItemList, BudgetActionType.CHECK_AND_EXECUTE, user);
      Logger.getInstance().logDebug("CD5");
      Logger.getInstance().logDebug("bo.getOfficeCode ###= " + bo.getOfficeCode());
      Logger.getInstance().logDebug("bo.getFiscalYear ###= " + bo.getFiscalYear());
      Logger.getInstance().logDebug("bo.getDocumentNumber ###= " + bo.getDocumentNumber());
      Logger.getInstance().logDebug("CD6.1");
      IAbstractGLAccountItem temp = (IAbstractGLAccountItem) glItemList.get(0);
      bo.setFiscalYear(temp.getFiscalYear());
      bo.setDocumentNumber(temp.getDocumentNumber());
      Logger.getInstance().logDebug("bo.getDocumentNumber Item= " + temp.getDocumentNumber());

      debtorCashDeposit = debtorCashDepositHome.create(new DebtorCashDepositPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getDebtorCode(),
          bo.getStatus(), bo.getOrNumber(), bo.getPaymentType(), bo.getCheckDate(),
          user.getId(), AFMSUtilities.getCurrentTime());
      Logger.getInstance().logDebug("CD7");
      ACRAuditTrail.insertLogAuditTrail(debtorCashDeposit, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorCashDepositLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{DebtorCashDepositLabelId.DEBTOR_CASH_DEPOSIT});
    }
    catch (RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    return bo;
  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {270373DA-5D50-42B0-9801-2066F039FFA1}
   */
  public void deleteDebtorCashDeposit(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException { }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {AD1275FF-4147-4DE4-8646-5061DE3957F9}
   */
  public IDebtorCashDeposit retrieveDebtorCashDeposit(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    com.portrade.ipms.afms.IDebtorCashDeposit bo = new com.portrade.ipms.afms.bo.DebtorCashDepositValue();
    Logger.getInstance().logDebug("officeCode = " + officeCode);
    Logger.getInstance().logDebug("fiscalYear = " + fiscalYear);
    Logger.getInstance().logDebug("documentNumber = " + documentNumber);

    try {
      DebtorCashDepositDAO dao = (DebtorCashDepositDAO) DAOProxy.getDAO("DebtorCashDeposit", user);
      if (dao != null) {
        bo = dao.getDebtorCashDeposit(officeCode, fiscalYear, documentNumber);

        if (bo == null) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
        }

      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_ACCOUNTNUMBER});
			}
    }

    return bo;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {85C8704B-56FD-43D1-AE62-51C0FA6B6F62}
   */
  public void updateDebtorCashDeposit(IDebtorCashDeposit bo, IUser user) throws AFMSException {

    validateUpdateDebtorCashDeposit(bo, user);
    validateDebtorCashDeposit(bo, user);

    CommonFunction commonFunction = null;

    try {
      commonFunction = commonFunctionHome.create();

      List glItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);

      for (int x = 0; x < glItemList.size(); x++) {
        IAbstractGLAccountItem glAccountItem = (IAbstractGLAccountItem) glItemList.get(x);
        if (glAccountItem.isHeaderIndicator().booleanValue()) {
          glAccountItem.setReference(bo.getReference());
          glAccountItem.setReferenceType(bo.getReferenceType());
          glAccountItem.setAssignment(bo.getBankAssignment());
          glAccountItem.setRemark(bo.getBankRemark());
        }
        else {
          glAccountItem.setAssignment(bo.getAssignment());
          glAccountItem.setRemark(bo.getRemark());
        }
      }

      commonFunction.updatePostedDocument(glItemList, user);

    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * @modelguid {0D06209A-D880-43B3-BA4A-6F6058DEB52B}
   */
  /**
   * @param bo Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {2F7BE4DE-521B-444E-8DE8-564A00F9076F}
   */
  public void deleteDebtorCashDepositRefund(IDebtorCashDepositRefund bo, String budgetActionIndicator, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    try {
      commonFunction = commonFunctionHome.create();
      validateDeleteDebtorCashDepositRefund(bo, user);

      commonFunction.deleteParkedDocument(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), budgetActionIndicator, user);
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {0D06209A-D880-43B3-BA4A-6F6058DEB52B}
   */
  public IDebtorCashDepositRefund createDebtorCashDepositRefund(IDebtorCashDepositRefund bo, String budgetActionIndicator, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DebtorCashDepositRefund debtorCashDepositRefund = null;
    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    setDebtorCashDepositRefundValue(bo, user);
    validateCreateDebtorCashDepositRefund(bo, user);
    validateDebtorCashDepositRefund(bo, user);
    java.util.List glItemList = createDebtorCashDepositRefundGLAccountItem(bo, user);

    try {
      List boList = commonFunction.parkDocument(glItemList, budgetActionIndicator, user);
      bo.copyPropertiesFrom((IAbstractGLAccountItem) boList.get(0));
      debtorCashDepositRefund = debtorCashDepositRefundHome.create(new DebtorCashDepositRefundPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()),
          bo.getPaymentType(),
          user.getId(), AFMSUtilities.getCurrentTime());
      ACRAuditTrail.insertLogAuditTrail(debtorCashDepositRefund, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorCashDepositRefundLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT_REFUND});
    }
    catch (RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {9AFD793D-BB40-4E99-AA6A-C8F54BDF93B7}
   */
  public void updateDebtorCashDepositRefund(IDebtorCashDepositRefund bo, String budgetActionIndicator, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DebtorCashDepositRefund debtorCashDepositRefund = null;
    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    validateUpdateDebtorCashDepositRefund(bo, user);
    validateDebtorCashDepositRefund(bo, user);

    try {
      if (bo.getProcessStatus().equals(ProcessStatus.PARK)) {
        List glItemList = createDebtorCashDepositRefundGLAccountItem(bo, user);
        commonFunction.updateDocument(glItemList, budgetActionIndicator, user);
      }
      else if (bo.getProcessStatus().equals(ProcessStatus.POST)) {
        //Chee Seng 07th June 2005, bugId: 10296
        List glAccountItemList = new ArrayList(gLAccountItemHome.findByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));

        for (int i = 0; i < glAccountItemList.size(); i++) {
          GLAccountItem glItem = (GLAccountItem) glAccountItemList.get(i);
          if (glItem.getHeaderIndicator().equals(Boolean.TRUE)) {
            glItem.setReferenceType(bo.getReferenceType());
            glItem.setReference(bo.getReference());
            glItem.setRemark(bo.getRemark());
          }
          else {
            glItem.setAssignment(bo.getAssignment());
            glItem.setRemark(bo.getBankRemark());
          }
          //Chee Seng 6th July 2005, bugId: 10179
          glItem.setLastUpdateBy(user.getId());
          glItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          AFMSAuditTrail.updateLogAuditTrail(glItem, user);
        }
      }
      debtorCashDepositRefund = debtorCashDepositRefundHome.findByPrimaryKey(new DebtorCashDepositRefundPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
      if (bo.getProcessStatus().equals(ProcessStatus.PARK)) {
        debtorCashDepositRefund.setPaymentType(bo.getPaymentType());
      }
      debtorCashDepositRefund.setLastUpdateBy(user.getId());
      debtorCashDepositRefund.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 6th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(debtorCashDepositRefund, user);
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {61FA4CE7-D8DD-4F72-B537-DD71E4F08FD2}
   */
  public IDebtorCashDepositRefund retrieveDebtorCashDepositRefund(String officeCode, Integer fiscalYear, Long documentNumber, com.portrade.ipms.icms.IUser user) throws AFMSException {
    com.portrade.ipms.afms.IDebtorCashDepositRefund bo = new com.portrade.ipms.afms.bo.DebtorCashDepositRefundValue();
    IDebtorCashDepositRefund bankDetailsBO = new DebtorCashDepositRefundValue();

    try {
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositRefundDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositRefundDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositRefundDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositRefundDAO.FILTER_OFFICECODE, "=", DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositRefundDAO.FILTER_FISCALYEAR, "=", DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositRefundDAO.FILTER_DOCUMENTNUMBER, "=", DebtorCashDepositRefundDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER)
          };
      java.util.List results = DAOProxy.list("debtorCashDepositRefund", user, filter);
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositRefundLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      bo = (IDebtorCashDepositRefund) results.get(0);
      bankDetailsBO = (IDebtorCashDepositRefund) results.get(1);
      bo.setBankRemark(bankDetailsBO.getRemark());
      bo.setAssignment(bankDetailsBO.getAssignment());
      bo.setBankGLAccount(bankDetailsBO.getGLAccount());
      bo.setBankPostingKey(bankDetailsBO.getPostingKey());

      AbstractCriteria[] filter2 = {
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_OFFICE_CODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_FISCAL_YEAR, "=", bo.getClearedRefFiscalYear()),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_DOCUMENT_NUMBER, "=", bo.getClearedRefDocumentNumber()),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_OFFICE_CODE, "=", DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_FISCAL_YEAR, "=", DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositDAO.FILTER_DOCUMENT_NUMBER, "=", DebtorCashDepositDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER)
          };
      java.util.List results2 = DAOProxy.list("debtorCashDeposit", user, filter2);
      if (results2.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT});
      }
      bo.setCashDeposit((IDebtorCashDeposit) results2.get(0));
      Logger.getInstance().logDebug("bo.getCashDeposit().getProcessStatus() = " + bo.getCashDeposit().getProcessStatus());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositRefundLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    return bo;
  }


  /**
   * @param glItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {6D87807E-0869-4AF9-9605-C0B36F1C33CE}
   */
  public void postDebtorCashDepositRefund(IAbstractGLAccountItem glItem, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DebtorCashDepositRefund debtorCashDepositRefund = null;
    Integer clearedRefFiscalYear = new Integer(0);
    Long clearedRefDocumentNumber = new Long(0);

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    try {
      if (glItem.isReversalDocumentIndicator() == null) {
        clearedRefFiscalYear = glItem.getClearedRefFiscalYear();
        clearedRefDocumentNumber = glItem.getClearedRefDocumentNumber();
      }
      else if (glItem.isReversalDocumentIndicator().equals(Boolean.TRUE)) {
        List reversalGLList = commonFunction.retrieveGLAccountItemByItemNumber(glItem.getOfficeCode(), glItem.getFiscalYear(), glItem.getReversedRefDocumentNumber(), new Integer(0), user);
        if (reversalGLList != null && reversalGLList.size() > 0) {
          IAbstractGLAccountItem reversalGLItem = (IAbstractGLAccountItem) reversalGLList.get(0);
          clearedRefFiscalYear = reversalGLItem.getClearedRefFiscalYear();
          clearedRefDocumentNumber = reversalGLItem.getClearedRefDocumentNumber();
        }
      }
      //Chee Seng 07th June 2005, bugId: 10296
      List cashDepositGLList = new ArrayList(gLAccountItemHome.findByItemNumber(glItem.getOfficeCode(), clearedRefFiscalYear, clearedRefDocumentNumber, new Integer(0)));
      BigDecimal clearedAmount = new BigDecimal(0);
      BigDecimal amount = new BigDecimal(0);
      GLAccountItem cashDepositGLItem = null;
      if (cashDepositGLList != null && cashDepositGLList.size() > 0) {
        cashDepositGLItem = (GLAccountItem) cashDepositGLList.get(0);
        clearedAmount = (cashDepositGLItem.getClearedAmount() == null) ? clearedAmount : cashDepositGLItem.getClearedAmount();
        amount = cashDepositGLItem.getAmount();

        if (glItem.isReversalDocumentIndicator() == null) {
          if (clearedAmount.add(glItem.getAmount()).compareTo(amount) > 0) {
            throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorCashDepositRefundLabelId.REFUND_AMOUNT, DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT_AMOUNT});
          }
          cashDepositGLItem.setClearedAmount(clearedAmount.add(glItem.getAmount()));
          Logger.getInstance().logDebug("clearedAmount = " + clearedAmount);
          Logger.getInstance().logDebug("amount = " + amount);
          if (clearedAmount.compareTo(amount) == 0) {
            cashDepositGLItem.setClearedRefDocumentNumber(glItem.getClearedRefDocumentNumber());
            cashDepositGLItem.setClearedRefFiscalYear(glItem.getClearedRefFiscalYear());
          }
        }
        else if (glItem.isReversalDocumentIndicator().equals(Boolean.TRUE)) {
          if (clearedAmount.subtract(amount).compareTo(new BigDecimal(0)) < 0) {
            throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorCashDepositRefundLabelId.REFUND_AMOUNT, DebtorCashDepositRefundLabelId.CLEARED_AMOUNT});
          }
          cashDepositGLItem.setClearedAmount(clearedAmount.subtract(amount));
          if (glItem.getClearedRefDocumentNumber() != null) {
            cashDepositGLItem.setClearedRefDocumentNumber(null);
            cashDepositGLItem.setClearedRefFiscalYear(null);
          }
        }
        cashDepositGLItem.setLastUpdateBy(user.getId());
        cashDepositGLItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        //Chee Seng 6th July 2005, bugId: 10179
        AFMSAuditTrail.updateLogAuditTrail(cashDepositGLItem, user);
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT_REFUND});
    }
  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param budgetActionIndicator Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {9EF8E1B6-102E-43A3-9974-265F58E6E408}
   */
  public void deleteDebtorCashDepositToCOA(String officeCode, Integer fiscalYear, Long documentNumber, String budgetActionIndicator, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    validateDeleteDebtorCashDepositToCOA();

    try {
      commonFunction = commonFunctionHome.create();

      commonFunction.deleteParkedDocument(officeCode, fiscalYear, documentNumber, budgetActionIndicator, user);

    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {921FBE75-CF9C-4AE0-9BF5-DA8F6B3CF2F4}
   */
  public IDebtorCashDepositToCOA createDebtorCashDepositToCOA(IDebtorCashDepositToCOA bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DebtorCashDepositToCOA debtorCashDepositToCOA = null;
    try {
      commonFunction = commonFunctionHome.create();

      setDebtorCashDepositToCOAValue(bo, user);
      validateCreateDebtorCashDepositToCOA(bo, user);
      validateDebtorCashDepositToCOA(bo, user);

      List coaGLItemList = createDebtorCashDepositToCOAGLAccountItem(bo, user);

      coaGLItemList = commonFunction.parkDocument(coaGLItemList, BudgetActionType.CHECK_AND_EXECUTE, user);

      IAbstractGLAccountItem newGlItem = (IAbstractGLAccountItem) coaGLItemList.get(0);
      bo.setDocumentNumber(newGlItem.getDocumentNumber());
      bo.setFiscalYear(newGlItem.getFiscalYear());

      Logger.getInstance().logDebug("bo.getOfficeCode()=" + bo.getOfficeCode());
      Logger.getInstance().logDebug("bo.getFiscalYear()=" + bo.getFiscalYear());
      Logger.getInstance().logDebug("bo.getDocumentNumber()=" + bo.getDocumentNumber());
      debtorCashDepositToCOA = debtorCashDepositToCOAHome.create(new DebtorCashDepositToCOAPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getCashDepositFiscalYear(), bo.getCashDepositDocumentNumber(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 6th July 2005, bugId: 10179
      ACRAuditTrail.insertLogAuditTrail(debtorCashDepositToCOA, user);

    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorCashDepositLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (AFMSListException ex) {
      List warningList = ex.getExceptions();
      Logger.getInstance().logDebug("warning list size : " + warningList.size());
      for (int i = 0; i < warningList.size(); i++) {
        com.portrade.ipms.afms.exceptions.ExtraInfoException warning = (com.portrade.ipms.afms.exceptions.ExtraInfoException) warningList.get(i);
        Object[] obj = warning.getParameters();
        bo.addWarningItem(new Object[]{obj[0], obj[1], obj[2], obj[3], warning.getEx()});
      }
    }
    catch (AFMSException ex) {
      Logger.getInstance().logDebug("AFMSException ++++++");
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    Logger.getInstance().logDebug("bo.getErrorList()====" + bo.getErrorList().size());
    Logger.getInstance().logDebug("bo.getWarningList()==" + bo.getWarningList().size());
    return bo;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {1CB6707F-6DAD-4BB6-9E01-9925C0E3846A}
   */
  public void updateDebtorCashDepositToCOA(IDebtorCashDepositToCOA bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    try {
      commonFunction = commonFunctionHome.create();

      setDebtorCashDepositToCOAValue(bo, user);
      validateUpdateDebtorCashDepositToCOA(bo, user);
      validateDebtorCashDepositToCOA(bo, user);

      if (bo.getProcessStatus().equals(ProcessStatus.PARK)) {

        List documentList = createDebtorCashDepositToCOAGLAccountItem(bo, user);

        commonFunction.updateDocument(documentList, bo.getBudgetActionType(), user);

      }
      else if (bo.getProcessStatus().equals(ProcessStatus.POST)) {
        List newGlItemList = new ArrayList();
        List glItemList = new ArrayList(commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user));

        for (int i = 0; i < glItemList.size(); i++) {
          IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(i);
          if (glItem.isHeaderIndicator().booleanValue()) {
            glItem.setReference(bo.getReference());
            glItem.setReferenceType(bo.getReferenceType());
            glItem.setRemark(bo.getRemark());
          }
          else {
            glItem.setAssignment(bo.getAssignment());
            glItem.setRemark(bo.getCoaRemark());
          }
          glItem.setLastUpdateBy(user.getId());
          glItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          newGlItemList.add(glItem);
        }

        commonFunction.updateDocument(newGlItemList, bo.getBudgetActionType(), user);

      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {174298CB-C213-4679-B7C7-8ECB0FDB3C1F}
   */
  public IDebtorCashDepositToCOA retrieveDebtorCashDepositToCOA(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    com.portrade.ipms.afms.IDebtorCashDepositToCOA bo = new com.portrade.ipms.afms.bo.DebtorCashDepositToCOAValue();
    List resultsList = new ArrayList();
    Logger.getInstance().logDebug("officeCodeCOA = " + officeCode);
    Logger.getInstance().logDebug("fiscalYearCOA = " + fiscalYear);
    Logger.getInstance().logDebug("documentNumberCOA = " + documentNumber);
    try {
      AbstractCriteria[] filter = {
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositToCOADAO.FILTER_OFFICE_CODE, "=", DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_OFFICE_CODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositToCOADAO.FILTER_FISCAL_YEAR, "=", DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_FISCAL_YEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.DebtorCashDepositToCOADAO.FILTER_DOCUMENT_NUMBER, "=", DebtorCashDepositToCOADAO.FILTER_GLACCOUNTITEM_DOCUMENT_NUMBER),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositToCOADAO.FILTER_OFFICE_CODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositToCOADAO.FILTER_FISCAL_YEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.DebtorCashDepositToCOADAO.FILTER_DOCUMENT_NUMBER, "=", documentNumber)
          };

      resultsList = DAOProxy.list("debtorCashDepositToCOA", user, filter);

      if (resultsList.size() == 0) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositToCOALabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      for (int i = 0; i < resultsList.size(); i++) {
        IDebtorCashDepositToCOA dep = (IDebtorCashDepositToCOA) resultsList.get(i);
        //need to set each attribute because the system will return at least two same records which do not have the item number
        if (dep.isHeaderIndicator().booleanValue()) {
          bo.setOfficeCode(officeCode);
          bo.setDocumentNumber(documentNumber);
          bo.setFiscalYear(fiscalYear);
          bo.setAccountType(dep.getAccountType());
          bo.setDocumentType(dep.getDocumentType());
          bo.setPostingDate(dep.getPostingDate());
          bo.setDocumentDate(dep.getDocumentDate());
          bo.setPostingPeriod(dep.getPostingPeriod());
          bo.setReference(dep.getReference());
          bo.setReferenceType(dep.getReferenceType());
          bo.setCurrency(dep.getCurrency());
          bo.setExchangeRate(dep.getExchangeRate());
          bo.setHeaderIndicator(dep.isHeaderIndicator());
          bo.setAmount(dep.getAmount());
          bo.setAmountInLocalCurrency(dep.getAmountInLocalCurrency());
          bo.setCostCenterId(dep.getCostCenterId());
          bo.setGLAccount(dep.getGLAccount());
          bo.setClearedAmount(dep.getClearedAmount());
          bo.setProjectId(dep.getProjectId());
          bo.setAssignment(dep.getAssignment());
          bo.setChequeNumber(dep.getChequeNumber());
          bo.setClearedRefDocumentNumber(dep.getClearedRefDocumentNumber());
          bo.setClearedRefFiscalYear(dep.getClearedRefFiscalYear());
          bo.setRemark(dep.getRemark());
          bo.setSpecialGLIndicator(dep.getSpecialGLIndicator());
          bo.setProcessStatus(dep.getProcessStatus());
          bo.setSubledgerName(dep.getSubledgerName());
          bo.setCashDepositFiscalYear(dep.getCashDepositFiscalYear());
          bo.setCashDepositDocumentNumber(dep.getCashDepositDocumentNumber());
        }
        else {
          // retrieve coa remark from item
          bo.setPostingKey(dep.getPostingKey());
          bo.setSubledgerAccount(dep.getSubledgerAccount());
          bo.setTin(dep.getTin());
          //tml 15 May 2006, BugId: 16902
          bo.setSubledgerOfficeCode(dep.getSubledgerOfficeCode());
          bo.setCoaRemark(dep.getRemark());
        }
      }
      Logger.getInstance().logDebug("officeCodedbt = " + officeCode);
      Logger.getInstance().logDebug("fiscalYeardbt = " + fiscalYear);
      Logger.getInstance().logDebug("documentNumberdbt = " + documentNumber);

//      IDebtorCashDeposit debtorCashDeposit = retrieveDebtorCashDeposit(officeCode, bo.getClearedRefFiscalYear(), bo.getClearedRefDocumentNumber(), user);
      IDebtorCashDeposit debtorCashDeposit = retrieveDebtorCashDeposit(officeCode, bo.getCashDepositFiscalYear(), bo.getCashDepositDocumentNumber(), user);

      bo.setCashDeposit(debtorCashDeposit);
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorCashDepositToCOALabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }

    return bo;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {5D80551C-6321-405B-81CB-7F13F43FD220}
   */
  public List createDebtorCashDepositToCOAGLAccountItem(IDebtorCashDepositToCOA bo, IUser user) throws AFMSException {
    List glItemList = new ArrayList();
    IAbstractGLAccountItem glItem = new AbstractGLAccountItemValue();
    CommonFunction commonFunction = null;
    GeneralLedgerSetup glSetup = null;
    List tempList = new ArrayList();
    int itemNumber = 1;
    try {
      commonFunction = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();

      IAbstractGLAccountItem glAccountHeaderItem = new AbstractGLAccountItemValue();
      glAccountHeaderItem.setOfficeCode(bo.getOfficeCode());
      glAccountHeaderItem.setFiscalYear(bo.getFiscalYear());
      glAccountHeaderItem.setDocumentNumber(bo.getDocumentNumber());
      glAccountHeaderItem.setAccountType(PostingAccountType.DEBTOR);
      glAccountHeaderItem.setDocumentType(bo.getDocumentType());
      //Chee Seng 2nd Aug 2005, bugId: 12820
      glAccountHeaderItem.setPostingKey(TransactionPostingKey.INCOMING_PAYMENT);
      //glAccountHeaderItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
      glAccountHeaderItem.setPostingDate(bo.getPostingDate());
      glAccountHeaderItem.setDocumentDate(bo.getDocumentDate());
      glAccountHeaderItem.setPostingPeriod(bo.getPostingPeriod());
      glAccountHeaderItem.setReference(bo.getReference());
      glAccountHeaderItem.setReferenceType(bo.getReferenceType());
      glAccountHeaderItem.setCurrency(bo.getCurrency());
      glAccountHeaderItem.setExchangeRate(bo.getExchangeRate());
      glAccountHeaderItem.setHeaderIndicator(Boolean.TRUE);
      //Chee Seng 2nd Aug 2005, bugId: 12820
      //glAccountHeaderItem.setCostCenterId(bo.getCostCenterId());
      glAccountHeaderItem.setCostCenterId(bo.getCashDeposit().getCostCenterId());
      glAccountHeaderItem.setSubledgerAccount(bo.getCashDeposit().getDebtorCode());
      Logger.getInstance().logDebug("bo.getGLAccount() " + bo.getGLAccount());
      glAccountHeaderItem.setGLAccount(bo.getGLAccount());
      glAccountHeaderItem.setSubledgerName(bo.getCashDeposit().getSubledgerName());
      glAccountHeaderItem.setTin(bo.getCashDeposit().getTin());
      //tml 15 May 2006, BugId: 16902
      glAccountHeaderItem.setSubledgerOfficeCode(bo.getCashDeposit().getSubledgerOfficeCode());
      if (glAccountHeaderItem.getSubledgerAccount() != null && glAccountHeaderItem.getSubledgerOfficeCode() == null) {
        ICustomer debtorBo = retrieveDebtorAccount(bo.getOfficeCode(), glAccountHeaderItem.getSubledgerAccount(), user);
        glAccountHeaderItem.setSubledgerOfficeCode(debtorBo.getOfficeCode());
      }

      glAccountHeaderItem.setSpecialGLIndicator(bo.getSpecialGLIndicator());
      //glAccountHeaderItem.setSubledgerAccount(null);
      //glAccountHeaderItem.setGLAccount(bo.getCashDeposit().getGLAccount());
      glAccountHeaderItem.setReconAccountType(bo.getReconAccountType());
      glAccountHeaderItem.setAmount(bo.getAmount());
      glAccountHeaderItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
      glAccountHeaderItem.setClearedAmount(bo.getClearedAmount());
      glAccountHeaderItem.setProjectId(bo.getProjectId());
      glAccountHeaderItem.setAssignment(bo.getAssignment());
      glAccountHeaderItem.setRemark(bo.getRemark());
      glAccountHeaderItem.setClearingDocumentIndicator(Boolean.TRUE);
      glAccountHeaderItem.setClearedRefDocumentNumber(bo.getClearedRefDocumentNumber());
      glAccountHeaderItem.setClearedRefFiscalYear(bo.getClearedRefFiscalYear());
      glAccountHeaderItem.setChequeNumber(bo.getChequeNumber());
      glAccountHeaderItem.setCid(bo.getCid());
      glAccountHeaderItem.setItemNo(new Integer(0));
      glAccountHeaderItem.setProcessStatus(ProcessStatus.PARK);
      glItemList.add(glAccountHeaderItem);

      IAbstractGLAccountItem glAccountItem = new AbstractGLAccountItemValue();
      glAccountItem.setOfficeCode(bo.getOfficeCode());
      glAccountItem.setFiscalYear(bo.getFiscalYear());
      glAccountItem.setDocumentNumber(bo.getDocumentNumber());
      glAccountItem.setAccountType(PostingAccountType.DEBTOR);
      glAccountItem.setDocumentType(bo.getDocumentType());
      //Chee Seng 2nd Aug 2005, bugId: 12820
      glAccountItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
      //glAccountItem.setPostingKey(TransactionPostingKey.INCOMING_PAYMENT);
      glAccountItem.setDocumentDate(bo.getDocumentDate());
      glAccountItem.setPostingDate(bo.getPostingDate());
      glAccountItem.setPostingPeriod(bo.getPostingPeriod());
      glAccountItem.setCurrency(bo.getCurrency());
      glAccountItem.setExchangeRate(bo.getExchangeRate());
      glAccountItem.setHeaderIndicator(Boolean.FALSE);
      //Chee Seng 2nd Aug 2005, bugId: 12820
      glAccountItem.setCostCenterId(bo.getCashDeposit().getCostCenterId());
      glAccountItem.setSubledgerAccount(null);
      Logger.getInstance().logDebug("bo.getCashDeposit().getGLAccount() " + bo.getCashDeposit().getGLAccount());
      glAccountItem.setGLAccount(bo.getCashDeposit().getGLAccount());
      //glAccountItem.setSubledgerAccount(bo.getCashDeposit().getDebtorCode());
      //glAccountItem.setGLAccount(bo.getGLAccount());
      glAccountItem.setAmount(bo.getAmount());
      glAccountItem.setAmountInLocalCurrency(null);
      glAccountItem.setProjectId(bo.getProjectId());
      glAccountItem.setAssignment(bo.getAssignment());
      glAccountItem.setRemark(bo.getCoaRemark());
      glAccountItem.setCid(bo.getCid());
      glAccountItem.setProcessStatus(ProcessStatus.PARK);
      glAccountItem.setSpecialGLIndicator(null);
      glAccountItem.setItemNo(new Integer(itemNumber));
      itemNumber++;

      glItemList.add(glAccountItem);
      if (bo.getExchangeRate() == null) {
        try {
          com.portrade.ipms.afms.IOffice office = new com.portrade.ipms.afms.bo.OfficeValue();
          office.setCode(bo.getOfficeCode());
          office = glSetup.retrieveOffice(office.getCode(), user);

          IExchangeRate exc = commonFunction.retrieveEffectiveExchangeRate(bo.getCurrency(), office.getCurrency(), bo.getDocumentDate());
          bo.setExchangeRate(exc.getValue());
        }
        catch (java.rmi.RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }
        Logger.getInstance().logDebug("convert coa : bo.getExchangeRate() = " + bo.getExchangeRate());

      }
      if (bo.getExchangeRate().compareTo(bo.getCashDeposit().getExchangeRate()) != 0) {
        BigDecimal calAmount = commonFunction.calculateGainAndLoss((IAbstractGLAccountItem) bo.getCashDeposit(), tempList, user);
        if (calAmount.compareTo(new BigDecimal(0)) != 0) {
          IAbstractGLAccountItem gainAndLossGLItem = new AbstractGLAccountItemValue();
          gainAndLossGLItem.setOfficeCode(bo.getOfficeCode());
          gainAndLossGLItem.setFiscalYear(bo.getFiscalYear());
          gainAndLossGLItem.setDocumentNumber(bo.getDocumentNumber());
          gainAndLossGLItem.setAccountType(PostingAccountType.GL);
          gainAndLossGLItem.setDocumentType(bo.getDocumentType());
          //Chee Seng 2nd Aug 2005, bugId: 12820
          gainAndLossGLItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
          gainAndLossGLItem.setPostingDate(bo.getPostingDate());
          gainAndLossGLItem.setPostingPeriod(bo.getPostingPeriod());
          gainAndLossGLItem.setCurrency(bo.getCurrency());
          gainAndLossGLItem.setExchangeRate(bo.getExchangeRate());
          gainAndLossGLItem.setHeaderIndicator(Boolean.FALSE);
          gainAndLossGLItem.setCostCenterId(bo.getCostCenterId());
          gainAndLossGLItem.setSubledgerAccount(null);
          gainAndLossGLItem.setAmount(new BigDecimal(0));
          gainAndLossGLItem.setAmountInLocalCurrency(calAmount);
          gainAndLossGLItem.setProjectId(bo.getProjectId());
          gainAndLossGLItem.setAssignment(bo.getAssignment());
          gainAndLossGLItem.setRemark(bo.getRemark());
          gainAndLossGLItem.setChequeNumber(null);
          gainAndLossGLItem.setCid(bo.getCid());
          gainAndLossGLItem.setProcessStatus(ProcessStatus.PARK);

          if (calAmount.compareTo(new BigDecimal(0)) < 0) {
            gainAndLossGLItem.setAmountInLocalCurrency(new BigDecimal(1));
            //Chee Seng 2nd Aug 2005, bugId: 12820
            gainAndLossGLItem.setDebitCreditType(TransactionPostingKey.JOURNAL_CREDIT);
          }

          IOffice officeBO = glSetup.retrieveOffice(bo.getOfficeCode(), user);
          IAutomaticAccountAssignment glAccount = glSetup.retrieveAutomaticAccountAssignment(officeBO.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.EXCHANGE_GAIN_LOSS, bo.getPostingKey(), user);

          glItemList.add(gainAndLossGLItem);
        }
      }
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    return glItemList;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {9082B49D-7306-4EA3-B59C-CFCED1A7F2D6}
   */
  public IProtestInvoice createProtestInvoice(IProtestInvoice bo, IUser user) throws AFMSException {
    try {
      ProtestInvoice protestInvoice = null;
      com.portrade.ipms.afms.business.entity.invoice.Invoice invoice = null;
      Invoice invoiceMaster = null;
      List invoiceList = new ArrayList();
      List debitCreditMemoList = new ArrayList();
      CommonFunction commonFunction = null;
      IARDocument docObj = null;
      String transactionOfficeCode = null;
      validateCreateProtestInvoice(bo, user);

      if (bo.getCreditNoteNumber() != null && !bo.getCreditNoteNumber().equals("")) {
        //cater for inter office debit note
        AbstractCriteria[] filter = {
            new Criteria(DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber()),
            new Criteria(DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", "1"),
            new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

        java.util.List debitList = DAOProxy.list("debtorDebitCreditMemo", user, filter);

        if (debitList != null && debitList.size() > 0) {
          IDebtorDebitCreditMemo obj = (IDebtorDebitCreditMemo) debitList.get(0);
          transactionOfficeCode = obj.getOfficeCode();
        }

        debitCreditMemoList = new java.util.ArrayList(debtorDebitCreditMemoHome.findByCreditNoteNumber(transactionOfficeCode, bo.getCreditNoteNumber()));

        if (debitCreditMemoList != null && debitCreditMemoList.size() > 0) {
          DebtorDebitCreditMemo debitCreditMemo = (DebtorDebitCreditMemo) debitCreditMemoList.get(0);
          debitCreditMemo.setProtestStatus(bo.getProtestStatus());
          debitCreditMemo.setProtestStartDate(bo.getProtestStartDate());
          debitCreditMemo.setProtestEndDate(bo.getProtestEndDate());
          debitCreditMemo.setLastUpdateBy(user.getId());
          debitCreditMemo.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          ACRAuditTrail.updateLogAuditTrail(debitCreditMemo, user);
        }

      }
      else {
        // cater for inter office invoice
        AbstractCriteria[] filter = {
            new Criteria(InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber()),
            new Criteria(InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", "1"),
            new FieldCriteria(InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new FieldCriteria(InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

        java.util.List invoiceDataList = DAOProxy.list("invoice", user, filter);

        if (invoiceDataList != null && invoiceDataList.size() > 0) {
          docObj = (IARDocument) invoiceDataList.get(0);
          transactionOfficeCode = docObj.getOfficeCode();
        }
        invoiceList = new java.util.ArrayList(invoiceHome.findByOfficeCodeInvoiceNumber(transactionOfficeCode, bo.getInvoiceNumber()));
        int invoiceSize = invoiceList.size();
        //update afmsInvoice
        if (invoiceList != null && invoiceList.size() > 0) {
          invoiceMaster = (Invoice) invoiceList.get(0);
          invoice = invoiceHome.findByPrimaryKey(new InvoicePK(invoiceMaster.getCustomerType(), invoiceMaster.getOfficeCode(), invoiceMaster.getFiscalYear(), invoiceMaster.getDocumentNumber()));

          invoice.setProtestStatus(bo.getProtestStatus());
          invoice.setLastUpdateBy(user.getId());
          invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          //Chee Seng 21st July 2005, bugId: 11341
          ACRAuditTrail.updateLogAuditTrail(invoice, user);
        }
        //karen already set in validateCreateProtestInvoiceMethod
        /*AbstractCriteria[] filter = {
			 new Criteria(InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
			 new Criteria(InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber()),
			 new Criteria(InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", "1"),
			 new FieldCriteria(InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
			 new FieldCriteria(InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
			 new FieldCriteria(InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};
		 java.util.List invoiceDataList = DAOProxy.list("invoice", user, filter);
		 if (invoiceDataList != null && invoiceDataList.size() > 0) {
		   docObj = (IARDocument) invoiceDataList.get(0);
		   fiscalYear = docObj.getFiscalYear();
		   if (accountNumber == null || "".equals(accountNumber)) {
			 Logger.getInstance().logDebug("getSubledgerAccount in SB =" + docObj.getSubledgerAccount());
			 accountNumber = docObj.getSubledgerAccount();
		   }
		 }*/
      }

      commonFunction = commonFunctionHome.create();
      Logger.getInstance().logDebug("SpecialDocumentNumberId.PROTEST_INVOICE =" + SpecialDocumentNumberId.PROTEST_INVOICE);
      bo.setReferenceNumber(commonFunction.getNextCustomDocumentNumber(
          SpecialDocumentNumberId.PROTEST_INVOICE, AFMSUtilities.getCurrentDate(), user));

      Logger.getInstance().logDebug("bo.getFiscalYear() in SB =" + bo.getFiscalYear());
      Logger.getInstance().logDebug("bo.getAccountNumber() in SB =" + bo.getAccountNumber());
      protestInvoice = protestInvoiceHome.create(new ProtestInvoicePK(bo.getOfficeCode(), bo.getFiscalYear(),
          bo.getReferenceNumber()), bo.getInvoiceNumber(), bo.getAccountNumber(), bo.getProtestStartDate(),
          bo.getProtestEndDate(), bo.getProtestReasons(), bo.getProtestResolution(), bo.getRemark(),
          bo.getProtestStatus(), bo.getDocumentId(), bo.getCreditNoteNumber(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime(),
          bo.getLetterReceivedDate(), bo.getInvestigateRemarks(), bo.getActionRemarks(),bo.getProtestAmount());
      //Chee Seng 21st July 2005, bugId: 11341
      ACRAuditTrail.insertLogAuditTrail(protestInvoice, user);
      //Update PCAS
      if (bo.getDocumentId() != null && bo.getDocumentId().length() > 0) {
        Connection conn = null;

        try {
          conn = ConnectionPool.getConnection();
          user.getIcmsSession().setConnection(conn);
          user.getIcmsSession().setInCMT(true);

          ACRToPCASConnector.updatePcasInvoiceDispute(user.getIcmsSession(), bo.getInvoiceNumber(), bo.getDocumentId(), bo.getReferenceNumber());
        }
        finally {
          user.getIcmsSession().setConnection(null);
          user.getIcmsSession().setInCMT(false);
          ConnectionPool.returnConnection(conn);
        }
      }
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]
          {ProtestInvoiceLabelId.PROTEST_INVOICE});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param boList Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   */
  public List createProtestInvoice(List boList, IUser user) throws AFMSException {
    List boCompleteList = new ArrayList();
    user = User.getSystemUser();
    for (int i = 0; i < boList.size(); i++) {
      try {
        IProtestInvoice bo = (IProtestInvoice) boList.get(i);
        ProtestInvoice protestInvoice = null;
        com.portrade.ipms.afms.business.entity.invoice.Invoice invoice = null;
        Invoice invoiceMaster = null;
        List invoiceList = new ArrayList();
        List debitCreditMemoList = new ArrayList();
        CommonFunction commonFunction = null;
        IARDocument docObj = null;
        String transactionOfficeCode = null;
        validateCreateProtestInvoice(bo, user);

        if (bo.getCreditNoteNumber() != null && !bo.getCreditNoteNumber().equals("")) {
          //cater for inter office debit note
          AbstractCriteria[] filter = {
              new Criteria(DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber()),
              new Criteria(DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", "1"),
              new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
              new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
              new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

          java.util.List debitList = DAOProxy.list("debtorDebitCreditMemo", user, filter);

          if (debitList != null && debitList.size() > 0) {
            IDebtorDebitCreditMemo obj = (IDebtorDebitCreditMemo) debitList.get(0);
            transactionOfficeCode = obj.getOfficeCode();
          }

          debitCreditMemoList = new java.util.ArrayList(debtorDebitCreditMemoHome.findByCreditNoteNumber(transactionOfficeCode, bo.getCreditNoteNumber()));

          if (debitCreditMemoList != null && debitCreditMemoList.size() > 0) {
            DebtorDebitCreditMemo debitCreditMemo = (DebtorDebitCreditMemo) debitCreditMemoList.get(0);
            debitCreditMemo.setProtestStatus(bo.getProtestStatus());
            debitCreditMemo.setProtestStartDate(bo.getProtestStartDate());
            debitCreditMemo.setProtestEndDate(bo.getProtestEndDate());
            debitCreditMemo.setLastUpdateBy(user.getId());
            debitCreditMemo.setLastUpdateOn(AFMSUtilities.getCurrentTime());
            ACRAuditTrail.updateLogAuditTrail(debitCreditMemo, user);
          }

        }
        else {
          // cater for inter office invoice
          AbstractCriteria[] filter = {
              new Criteria(InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber()),
              new Criteria(InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", "1"),
              new FieldCriteria(InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
              new FieldCriteria(InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
              new FieldCriteria(InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

          java.util.List invoiceDataList = DAOProxy.list("invoice", user, filter);

          if (invoiceDataList != null && invoiceDataList.size() > 0) {
            docObj = (IARDocument) invoiceDataList.get(0);
            transactionOfficeCode = docObj.getOfficeCode();
          }
          invoiceList = new java.util.ArrayList(invoiceHome.findByOfficeCodeInvoiceNumber(transactionOfficeCode, bo.getInvoiceNumber()));
          int invoiceSize = invoiceList.size();
          //update afmsInvoice
          if (invoiceList != null && invoiceList.size() > 0) {
            invoiceMaster = (Invoice) invoiceList.get(0);
            invoice = invoiceHome.findByPrimaryKey(new InvoicePK(invoiceMaster.getCustomerType(), invoiceMaster.getOfficeCode(), invoiceMaster.getFiscalYear(), invoiceMaster.getDocumentNumber()));

            invoice.setProtestStatus(bo.getProtestStatus());
            invoice.setLastUpdateBy(user.getId());
            invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
            //Chee Seng 21st July 2005, bugId: 11341
            ACRAuditTrail.updateLogAuditTrail(invoice, user);
          }
        }

        commonFunction = commonFunctionHome.create();
        Logger.getInstance().logDebug("SpecialDocumentNumberId.PROTEST_INVOICE =" + SpecialDocumentNumberId.PROTEST_INVOICE);
        bo.setReferenceNumber(commonFunction.getNextCustomDocumentNumber(
            SpecialDocumentNumberId.PROTEST_INVOICE, AFMSUtilities.getCurrentDate(), user));

        Logger.getInstance().logDebug("bo.getFiscalYear() in SB =" + bo.getFiscalYear());
        Logger.getInstance().logDebug("bo.getAccountNumber() in SB =" + bo.getAccountNumber());
        protestInvoice = protestInvoiceHome.create(new ProtestInvoicePK(bo.getOfficeCode(), bo.getFiscalYear(),
            bo.getReferenceNumber()), bo.getInvoiceNumber(), bo.getAccountNumber(), bo.getProtestStartDate(),
            bo.getProtestEndDate(), bo.getProtestReasons(), bo.getProtestResolution(), bo.getRemark(),
            bo.getProtestStatus(), bo.getDocumentId(), bo.getCreditNoteNumber(), bo.getCid(), user.getId(), AFMSUtilities.getCurrentTime(),
            bo.getLetterReceivedDate(), bo.getInvestigateRemarks(), bo.getActionRemarks(), bo.getProtestAmount());
        //Chee Seng 21st July 2005, bugId: 11341
        ACRAuditTrail.insertLogAuditTrail(protestInvoice, user);
        //22233
        com.portrade.ipms.afms.IProtestInvoice newVO = new ProtestInvoiceValue();
        newVO.setReferenceNumber(protestInvoice.getReferenceNumber());
        newVO.setDocumentId(protestInvoice.getDocumentId());
        newVO.setInvoiceNumber(protestInvoice.getInvoiceNumber());
        boCompleteList.add(newVO);
      }
      catch (javax.ejb.CreateException ex) {
        sessionContext.setRollbackOnly();
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]
            {ProtestInvoiceLabelId.PROTEST_INVOICE});
      }
      catch (AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      catch (java.sql.SQLException ex) {
        sessionContext.setRollbackOnly();
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
        	throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
				}
      }

    }
    //Update PCAS
    /*if (bo.getDocumentId() != null && bo.getDocumentId().length() > 0) {
	  Connection conn = null;
	  try {
		conn = ConnectionPool.getConnection();
		user.getIcmsSession().setConnection(conn);
		user.getIcmsSession().setInCMT(true);
		ACRToPCASConnector.updatePcasInvoiceDispute(user.getIcmsSession(), bo.getInvoiceNumber(), bo.getDocumentId(), bo.getReferenceNumber());
	  }
	  finally {
		user.getIcmsSession().setConnection(null);
		user.getIcmsSession().setInCMT(false);
		ConnectionPool.returnConnection(conn);
	  }
	} */
    return boCompleteList;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {B50E81E8-A0AB-4A81-A798-313A8F97DC9E}
   */
  public void updateProtestInvoice(IProtestInvoice bo, IUser user) throws AFMSException {

    try {
      ProtestInvoice protestInvoice = null;
      com.portrade.ipms.afms.business.entity.invoice.Invoice invoice = null;
      Invoice invoiceMaster = null;
      List invoiceList = null;

      //validateSuspendDebtor(iCustObj, user );
      Logger.getInstance().logDebug("updateProtestInvoice IN BO getOfficeCode= " + bo.getOfficeCode());
      Logger.getInstance().logDebug("updateProtestInvoice IN BO getFiscalYear= " + bo.getFiscalYear());
      Logger.getInstance().logDebug("updateProtestInvoice IN BO getReferenceNumber= " + bo.getReferenceNumber());
      Logger.getInstance().logDebug("updateProtestInvoice IN BO getInvoiceNumber= " + bo.getInvoiceNumber());

      protestInvoice = protestInvoiceHome.findByPrimaryKey(
          new ProtestInvoicePK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getReferenceNumber()));

      protestInvoice.setProtestStartDate(bo.getProtestStartDate());
      protestInvoice.setProtestEndDate(bo.getProtestEndDate());
      protestInvoice.setProtestReasons(bo.getProtestReasons());
      protestInvoice.setProtestResolution(bo.getProtestResolution());
      protestInvoice.setRemark(bo.getRemark());
      protestInvoice.setProtestStatus(bo.getProtestStatus());
      protestInvoice.setLastUpdateBy(user.getId());
      protestInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      protestInvoice.setLetterReceivedDate(bo.getLetterReceivedDate());
      protestInvoice.setInvestigateRemarks(bo.getInvestigateRemarks());
      protestInvoice.setActionRemarks(bo.getActionRemarks());
      //Chee Seng 21st July 2005, bugId: 11341
      ACRAuditTrail.updateLogAuditTrail(protestInvoice, user);

      invoiceList = new java.util.ArrayList(
          invoiceHome.findByOfficeCodeInvoiceNumber(bo.getOfficeCode(), bo.getInvoiceNumber()));
      int invoiceSize = invoiceList.size();

      for (int i = 0; i < invoiceSize; i++) {
        invoiceMaster = (Invoice) invoiceList.get(0);
        //Chee Seng 28th June 2005, bugId: 10822
        /*
              invoice = invoiceHome.findByPrimaryKey( new InvoicePK ( invoiceMaster.getCustomerType(),
                  invoiceMaster.getOfficeCode(), invoiceMaster.getFiscalYear(), invoiceMaster.getDocumentNumber() ) ) ;
              Logger.getInstance().logDebug("updateProtestInvoice IN BO invoiceMaster.getDocumentNumber()= " + invoiceMaster.getDocumentNumber());
              invoice.setProtestStatus(  bo.getProtestStatus() );
              invoice.setLastUpdateBy(user.getId());
              invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
              */
        invoiceMaster.setProtestStatus(bo.getProtestStatus());
        invoiceMaster.setLastUpdateBy(user.getId());
        invoiceMaster.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        //Chee Seng 21st July 2005, bugId: 11341
        ACRAuditTrail.updateLogAuditTrail(invoiceMaster, user);
      }

    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]
          {ProtestInvoiceLabelId.PROTEST_INVOICE});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param referenceNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {26BD7CE3-B8C8-4F3C-9F83-1C10C544FB13}
   */
  public IProtestInvoice retrieveProtestInvoice(String officeCode, Integer fiscalYear, String referenceNumber, IUser user) throws AFMSException {
    IProtestInvoice bo = new ProtestInvoiceValue();
    List items = null;
    Logger.getInstance().logDebug("officecode = "+officeCode);
    Logger.getInstance().logDebug("fiscal year = "+ fiscalYear);
    Logger.getInstance().logDebug("referencenumber = " +referenceNumber);
    try {

      com.portrade.ipms.afms.dao.ProtestInvoiceDAO dao = (com.portrade.ipms.afms.dao.ProtestInvoiceDAO) DAOProxy.getDAO("protestInvoice", user);
      if (dao != null) {
        AbstractCriteria[] filter = {
            new Criteria(com.portrade.ipms.afms.dao.ProtestInvoiceDAO.FILTER_OFFICECODE, "=", officeCode),
            new Criteria(com.portrade.ipms.afms.dao.ProtestInvoiceDAO.FILTER_FISCALYEAR, "=", fiscalYear),
            new Criteria(com.portrade.ipms.afms.dao.ProtestInvoiceDAO.FILTER_REFERENCETNUMBER, "=", referenceNumber)
            };

        java.util.List results = DAOProxy.list("protestInvoice", user, filter);

        if (results.size() > 0) {
          bo = (IProtestInvoice) results.get(0);
          Logger.getInstance().logDebug("invoicenumber = " +bo.getInvoiceNumber());
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
      }

      if (bo.getInvoiceNumber() != null) {
        com.portrade.ipms.afms.dao.InvoiceDAO invoiceDao = (com.portrade.ipms.afms.dao.InvoiceDAO) DAOProxy.getDAO("invoice", user);
        if (invoiceDao != null) {
          AbstractCriteria[] filter = {
              new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
              new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
              new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", officeCode),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", fiscalYear),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber())
              };

          java.util.List results = DAOProxy.list("invoice", user, filter);
          Logger.getInstance().logDebug("result size = " + results.size());
          if (results.size() > 0) {
            IARDocument invoiceBo = (IARDocument) results.get(0);
            bo.addInvoiceItem(invoiceBo);
          }
          else {
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
          }
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }
      else {
        com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO debtorDebitCreditMemoDao = (com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO) DAOProxy.getDAO("debtorDebitCreditMemo", user);
        if (debtorDebitCreditMemoDao != null) {
          AbstractCriteria[] filter = {
              new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
              new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
              new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
              new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
              new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
              new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", officeCode),
              new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", fiscalYear),
              new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber())
              };

          java.util.List results = DAOProxy.list("debtorDebitCreditMemo", user, filter);

          if (results.size() > 0) {
            IDebtorDebitCreditMemo debtorDebitCreditMemoBo = (IDebtorDebitCreditMemo) results.get(0);
            bo.addDebitNoteItem(debtorDebitCreditMemoBo);
          }
          else {
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
          }
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }

    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
			}
    }

    return bo;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {9799EE3D-22EB-41B9-91CE-11A691FA6869}
   */
  public java.util.List createDebtorCashDepositRefundGLAccountItem(IDebtorCashDepositRefund bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    List glItemList = new ArrayList();
    List newGlItemList = new ArrayList();

    try {
      if (bo.getExchangeRate() == null) {
        ICalculateExchangeRateAmount exchangeRate = commonFunction.calculateExchangeRateAmount(bo.getAmount(), bo.getAmountInLocalCurrency(), null, bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
        bo.setExchangeRate(exchangeRate.getExchangeRate());
        bo.setAmountInLocalCurrency(exchangeRate.getAmountLocalCurrency());
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    IAbstractGLAccountItem glAccountHeaderItem = new AbstractGLAccountItemValue();
    IDebtorCashDeposit cashDeposit = bo.getCashDeposit();

    glAccountHeaderItem.setOfficeCode(bo.getOfficeCode());
    glAccountHeaderItem.setFiscalYear(bo.getFiscalYear());
    glAccountHeaderItem.setDocumentNumber(bo.getDocumentNumber());
    glAccountHeaderItem.setAccountType(PostingAccountType.GL);
    glAccountHeaderItem.setDocumentType(bo.getDocumentType());
    //Chee Seng 1st Aug 2005, bugId: 12820
    glAccountHeaderItem.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
    glAccountHeaderItem.setDocumentDate(bo.getDocumentDate());
    glAccountHeaderItem.setPostingDate(bo.getPostingDate());
    glAccountHeaderItem.setPostingPeriod(bo.getPostingPeriod());
    glAccountHeaderItem.setReference(bo.getReference());
    glAccountHeaderItem.setReferenceType(bo.getReferenceType());
    glAccountHeaderItem.setCurrency(bo.getCurrency());
    glAccountHeaderItem.setExchangeRate(bo.getExchangeRate());
    glAccountHeaderItem.setHeaderIndicator(Boolean.TRUE);
    //Chee Seng 1st Aug 2005, bugId: 12820
    glAccountHeaderItem.setCostCenterId(cashDeposit.getCostCenterId());
    //glAccountHeaderItem.setCostCenterId(bo.getCostCenterId());
    //Hui Mian 24/11/2006, bugId: 19308 set the subledgeraccount
    //glAccountHeaderItem.setSubledgerAccount(null);
    glAccountHeaderItem.setSubledgerAccount(bo.getSubledgerAccount());
    glAccountHeaderItem.setSubledgerName(bo.getSubledgerName());
    Logger.getInstance().logDebug("cashDeposit.getDocumentNumber() = " + cashDeposit.getDocumentNumber());
    //Chee Seng 1st Aug 2005, bugId: 12820
    //tml 17 Oct 2006, BugId: 18607
    if (SystemProfile.get(SystemProfile.CENTRAL_CD_REFUND_FLAG).equals(Boolean.FALSE.toString()) || SystemProfile.get(SystemProfile.CENTRAL_CD_REFUND_FLAG).equals("false")) {
      glAccountHeaderItem.setGLAccount(bo.getBankGLAccount());
    }
    else {
      try {
        IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
        IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.CASH_DEPOSIT_REFUND_CENTRAL_PAYMENT, TransactionPostingKey.JOURNAL_CREDIT, user);

        glAccountHeaderItem.setGLAccount(automaticAccountAssignment.getGlAccount());
        glAccountHeaderItem.setPostingKey(automaticAccountAssignment.getPostingKey());
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
    }

    glAccountHeaderItem.setAmount(bo.getAmount());
    glAccountHeaderItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
    glAccountHeaderItem.setProjectId(bo.getProjectId());
    glAccountHeaderItem.setAssignment(bo.getAssignment());
    glAccountHeaderItem.setRemark(bo.getRemark());
    glAccountHeaderItem.setSubledgerName(bo.getSubledgerName());
    glAccountHeaderItem.setTin(bo.getTin());
    glAccountHeaderItem.setChequeNumber(bo.getChequeNumber());
    glAccountHeaderItem.setPvNumber(bo.getPvNumber());
    glAccountHeaderItem.setCid(bo.getCid());
    glAccountHeaderItem.setClearedRefFiscalYear(cashDeposit.getFiscalYear());
    glAccountHeaderItem.setClearedRefDocumentNumber(cashDeposit.getDocumentNumber());
    glAccountHeaderItem.setClearedAmount(bo.getAmount());
    glAccountHeaderItem.setPrintChequeFlag(bo.isPrintChequeFlag());
    glAccountHeaderItem.setProcessStatus(bo.getProcessStatus());

    glItemList.add(glAccountHeaderItem);

    IAbstractGLAccountItem glAccountItem = new AbstractGLAccountItemValue();
    glAccountItem.setOfficeCode(bo.getOfficeCode());
    glAccountItem.setFiscalYear(bo.getFiscalYear());
    glAccountItem.setDocumentNumber(bo.getDocumentNumber());
    glAccountItem.setAccountType(PostingAccountType.GL);
    glAccountItem.setDocumentType(bo.getDocumentType());
    //Chee Seng 1st Aug 2005, bugId: 12820
    glAccountItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
    glAccountItem.setDocumentDate(bo.getDocumentDate());
    glAccountItem.setPostingDate(bo.getPostingDate());
    glAccountItem.setPostingPeriod(bo.getPostingPeriod());
    glAccountItem.setCurrency(bo.getCurrency());
    glAccountItem.setExchangeRate(bo.getExchangeRate());
    glAccountItem.setHeaderIndicator(Boolean.FALSE);
    //Chee Seng 1st Aug 2005, bugId: 12820
    glAccountItem.setCostCenterId(cashDeposit.getCostCenterId());
    glAccountItem.setSubledgerAccount(null);
    //Chee Seng 1st Aug 2005, bugId: 12820
    glAccountItem.setGLAccount(cashDeposit.getGLAccount());
    //glAccountItem.setGLAccount(bo.getBankGLAccount());
    Logger.getInstance().logDebug("bo.getBankGLAccount() = " + bo.getBankGLAccount());
    glAccountItem.setAmount(bo.getAmount());
    glAccountItem.setAmountInLocalCurrency(null);
    glAccountItem.setProjectId(bo.getProjectId());
    glAccountItem.setAssignment(bo.getAssignment());
    glAccountItem.setRemark(bo.getBankRemark());
    glAccountItem.setChequeNumber(null);
    glAccountItem.setCid(bo.getCid());
    glAccountItem.setProcessStatus(bo.getProcessStatus());

    newGlItemList.add(glAccountItem);
    glItemList.add(glAccountItem);

    BigDecimal calculatedAmount = new BigDecimal(0);
    BigDecimal zero = new BigDecimal(0);

    try {
      if (bo.getExchangeRate() == null) {
        ICalculateExchangeRateAmount exchangeRate = commonFunction.calculateExchangeRateAmount(bo.getAmount(), bo.getAmountInLocalCurrency(), null, bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
        bo.setExchangeRate(exchangeRate.getExchangeRate());
        bo.setAmountInLocalCurrency(exchangeRate.getAmountLocalCurrency());
      }
      if (bo.getExchangeRate().compareTo(cashDeposit.getExchangeRate()) != 0) {
        calculatedAmount = commonFunction.calculateGainAndLoss((IAbstractGLAccountItem) glAccountHeaderItem, newGlItemList, user);
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    if (calculatedAmount.compareTo(zero) != 0) {
      IAbstractGLAccountItem gainAndLossGLItem = new AbstractGLAccountItemValue();
      gainAndLossGLItem.setOfficeCode(bo.getOfficeCode());
      gainAndLossGLItem.setFiscalYear(bo.getFiscalYear());
      gainAndLossGLItem.setDocumentNumber(bo.getDocumentNumber());
      gainAndLossGLItem.setAccountType(PostingAccountType.GL);
      gainAndLossGLItem.setDocumentType(bo.getDocumentType());
      //Chee Seng 1st Aug 2005, bugId: 12820
      //gainAndLossGLItem.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
      gainAndLossGLItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
      gainAndLossGLItem.setDocumentDate(bo.getDocumentDate());
      gainAndLossGLItem.setPostingDate(bo.getPostingDate());
      gainAndLossGLItem.setPostingPeriod(bo.getPostingPeriod());
      gainAndLossGLItem.setCurrency(bo.getCurrency());
      gainAndLossGLItem.setExchangeRate(bo.getExchangeRate());
      gainAndLossGLItem.setHeaderIndicator(Boolean.FALSE);
      //Chee Seng 1st Aug 2005, bugId: 12820
      //gainAndLossGLItem.setCostCenterId(bo.getCostCenterId());
      gainAndLossGLItem.setSubledgerAccount(null);
      gainAndLossGLItem.setAmount(zero);
      gainAndLossGLItem.setAmountInLocalCurrency(calculatedAmount);
      gainAndLossGLItem.setProjectId(bo.getProjectId());
      gainAndLossGLItem.setAssignment(bo.getAssignment());
      gainAndLossGLItem.setRemark(bo.getRemark());
      gainAndLossGLItem.setChequeNumber(null);
      gainAndLossGLItem.setCid(bo.getCid());
      gainAndLossGLItem.setProcessStatus(bo.getProcessStatus());

      if (calculatedAmount.compareTo(zero) < 0) {
        gainAndLossGLItem.setAmount(gainAndLossGLItem.getAmount().multiply(new BigDecimal(1)).negate());
        //Chee Seng 1st Aug 2005, bugId: 12820
        //gainAndLossGLItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
        gainAndLossGLItem.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
      }
      try {
        IOffice officeBO = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
        IAutomaticAccountAssignment automaticAccountAssignmentBO = new AutomaticAccountAssignmentValue();
        automaticAccountAssignmentBO = generalLedgerSetup.retrieveAutomaticAccountAssignment(officeBO.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.EXCHANGE_GAIN_LOSS, gainAndLossGLItem.getPostingKey(), user);
        gainAndLossGLItem.setGLAccount(automaticAccountAssignmentBO.getGlAccount());
        glItemList.add(gainAndLossGLItem);
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      Logger.getInstance().logDebug("gainAndLossGLItem.getGLAccount() = " + gainAndLossGLItem.getGLAccount());
    }
    return glItemList;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {0F110A85-0443-4484-817C-4F0709AB766F}
   */
  public void validateProtestInvoice(IProtestInvoice bo, IUser user) { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {1B6EB00D-243A-4339-96B7-1714C8F99F83}
   */
  public void validateUpdateProtestInvoice(IProtestInvoice bo, IUser user) { }


  /**
   * @modelguid {84D71443-09A8-40E1-83D7-9BCE7F1FC166}
   */
  //public void retrieveDebtorCashDepositToCOA(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) {
  //}

  /**
   * @param glItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {4EAA1E0F-506B-4AFF-921D-ED4182DA2293}
   */
  public void postDebtorCashDepositToCOA(IAbstractGLAccountItem glItem, IUser user) throws AFMSException {
    postDebtorCashDepositRefund(glItem, user);
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {6AC20ABD-4C3B-4FD4-894C-80E0BF8CED93}
   */
  public void validateDeleteDebtorCashDepositToCOA(IDebtorCashDepositToCOA bo, IUser user) { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {ABBD960E-3229-45FA-A446-41E65A4E2467}
   */
  public void createOverridingApproval(IOverridingApproval bo, IUser user) throws AFMSException {
    validateCreateOverridingApproval(bo, user);
    validateOverridingApproval(bo, user);

    try {
      //Chee Seng 15th Aug 2005, bugId: 13103
      OverridingApproval overridingApproval = overridingApprovalHome.create(new OverridingApprovalPK(GenUUIDUtil.generateUUID()), bo.getProgramID(), bo.getDebtorCode(), bo.getApprovalDate(),
          bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), bo.getInvoiceType(),
          bo.getInvoiceDate(), bo.getVesselCode(), bo.getScn(), bo.getBlSONumber(),
          bo.getCount(), bo.getExpectedArrival(), bo.getImportExportFlag(),
          bo.getAmount(), bo.getStatus(), bo.getApprovalID(), bo.getInvoiceNumber(), bo.getInvoiceAmount(),
          bo.getBankGuaranteeAmount(), bo.getCashDepositAmount(), bo.getAccountBalanceAmount(),
          bo.getVesselEstimateAmount(), bo.getCargoEstimateAmount(), bo.getExceededAmount(),
          user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      ACRAuditTrail.insertLogAuditTrail(overridingApproval, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{OverridingApproval.class});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{OverridingApproval.class});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {97B1411B-D4CB-4A2F-9AF0-EAC6954EBADA}
   */
  public void deleteOverridingApproval(IOverridingApproval bo, IUser user) throws AFMSException {

    validateDeleteOverridingApproval(bo, user);

    try {
      //Chee Seng 6th July 2005, bugId: 11719
      OverridingApproval overridingApproval = overridingApprovalHome.findByPrimaryKey(new OverridingApprovalPK(bo.getId()));
      ACRAuditTrail.deleteLogAuditTrail(overridingApproval, user);
      overridingApproval.remove();
    }
    catch (FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.OverridingApprovalLabelId.OVERRIDINGAPPROVAL});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{OverridingApproval.class});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {D02F27EC-7510-4502-8AC6-E6D32CBBE574}
   */
  public void updateOverridingApproval(IOverridingApproval bo, IUser user) throws AFMSException {
    OverridingApproval overridingApproval = null;

    validateUpdateOverridingApproval(bo, user);
    validateOverridingApproval(bo, user);
    Logger.getInstance().logDebug("OK");

    try {
      overridingApproval = overridingApprovalHome.findByPrimaryKey(new OverridingApprovalPK(bo.getId()));
      overridingApproval.setStatus(bo.getStatus());
      if (bo.getStatus() != null && bo.getStatus().equals(IConstants.Approval.APPROVED_CODE)) {
        overridingApproval.setApprovalID(bo.getApprovalID());
        overridingApproval.setApprovalDate(AFMSUtilities.getCurrentDate());
      }
      overridingApproval.setLastUpdateBy(user.getId());
      overridingApproval.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      //Chee Seng 6th July 2005, bugId: 11719
      ACRAuditTrail.updateLogAuditTrail(overridingApproval, user);
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{OverridingApproval.class});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param filter Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {84CA8312-2DF8-4BCF-A668-9B3776FC0F7F}
   */
  public IOverridingApproval retrieveOverridingApproval(AbstractCriteria[] filter, IUser user) throws AFMSException {

    List overridingAppList = null;

    try {
      overridingAppList = DAOProxy.list("overridingApproval", user, filter);
      if (overridingAppList != null && overridingAppList.size() > 0) {
        if (overridingAppList.size() > 1) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OverridingApproval.class});
        }
        else {
          return (IOverridingApproval) overridingAppList.get(0);
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OverridingApproval.class});
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OverridingApproval.class});
			}
    }
  }


  //Chee Seng 7th July 2005, bugId: 11986
  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param overridingApprovalBO Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {1E12003E-5590-4AB0-96B9-9835EFA18510}
   */
  public void createOverridingApprovalWithNewSession(IARDocument bo, IOverridingApproval overridingApprovalBO, IUser user) throws AFMSException {
    try {
      overridingApprovalBO.setOfficeCode(bo.getOfficeCode());
      overridingApprovalBO.setProgramID("pfms0080");
      overridingApprovalBO.setDebtorCode(bo.getSubledgerAccount());
      overridingApprovalBO.setInvoiceDate(bo.getDocumentDate());
      overridingApprovalBO.setScn(bo.getSCN());
	  System.out.println("!@#for invoicetax in CNDN 3");
      overridingApprovalBO.setInvoiceAmount(bo.getAmount());
      overridingApprovalBO.setAmount(bo.getOverrideAmount());
      createOverridingApproval(overridingApprovalBO, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
  }


  /**
   * @param glItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E1C1B4CC-B2C9-45D9-AA22-896B1C0A7072}
   */
  public void postClearingTransaction(IAbstractGLAccountItem glItem, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    ICalculateExchangeRateAmount calculateExchangeRateAmountBO = new CalculateExchangeRateAmountValue();
    GLAccountItem glAccountItem = null;
    Long documentNumber = new Long(0);
	Long documentNumber1 = new Long(0);
	Long documentNumber2 = new Long(0);
	Integer fiscalYear = null;
	Integer fiscalYear1 = null;
	Integer fiscalYear2 = null;
	BigDecimal amountInLocalCurrency = new BigDecimal(0);
    

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
    	Logger.getInstance().logDebug("In postClearingTransaction");
    	Logger.getInstance().logDebug("glItem.isreversaldocumentindicator() - " + glItem.isReversalDocumentIndicator());
    	
    	//erma bugId: 28390 - added option for reversed item: to update glaccountitem for document1 and document2 from debtorclearingtransaction table
    	// and to delete the items from debtorclearingtransaction table
		 if (glItem.isReversalDocumentIndicator() != null && glItem.isReversalDocumentIndicator().equals(Boolean.TRUE)) {
				List reversalGLList = commonFunction.retrieveGLAccountItemByItemNumber(glItem.getOfficeCode(), glItem.getFiscalYear(), glItem.getReversedRefDocumentNumber(), new Integer(0), user);
				if (reversalGLList != null && reversalGLList.size() > 0) {
				  IAbstractGLAccountItem reversalGLItem = (IAbstractGLAccountItem) reversalGLList.get(0);
				  documentNumber = reversalGLItem.getDocumentNumber();
				  Logger.getInstance().logDebug("documentNumberRev= " + documentNumber);
				  Logger.getInstance().logDebug("clearedDocNumRev = " + reversalGLItem.getClearedRefDocumentNumber());
				  
				 			  
				  try {
						AbstractCriteria[] filter = {
							new Criteria(com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO.FILTER_OFFICECODE, "=", reversalGLItem.getOfficeCode()),
							new Criteria(com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO.FILTER_FISCALYEAR, "=", reversalGLItem.getFiscalYear()),
							new Criteria(com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO.FILTER_DOCUMENTNUMBER, "=", reversalGLItem.getDocumentNumber())
							};
						java.util.List results = DAOProxy.list("debtorClearingTransaction", user, filter);
						for (int i = 0; i < results.size(); i++) {
							IDebtorClearingTransaction debtorClearing = (IDebtorClearingTransaction) results.get(i);
							Logger.getInstance().logDebug("debtorClearing.doc1 - " + debtorClearing.getDocumentNumber1());
							Logger.getInstance().logDebug("debtorClearing.doc2 - " + debtorClearing.getDocumentNumber2());
							Logger.getInstance().logDebug("debtorClearing.fy1 - " + debtorClearing.getFiscalYear1());
							Logger.getInstance().logDebug("debtorClearing.fy2 - " + debtorClearing.getFiscalYear2());
							Logger.getInstance().logDebug("amountinlocalcur = " + debtorClearing.getClearedAmount());
							
							documentNumber1 = debtorClearing.getDocumentNumber1();
							documentNumber2 = debtorClearing.getDocumentNumber2();
							fiscalYear1 = debtorClearing.getFiscalYear1();
							fiscalYear2 = debtorClearing.getFiscalYear2();	
							amountInLocalCurrency = debtorClearing.getClearedAmount();
							List glAccountItemBOList = new ArrayList(gLAccountItemHome.findByDocumentNumber(reversalGLItem.getOfficeCode(),fiscalYear1,documentNumber1));				 
				   	
							for(int j = 0; j < glAccountItemBOList.size(); j++){
								glAccountItem = (GLAccountItem) glAccountItemBOList.get(j);								
								Logger.getInstance().logDebug("clearedAmount Doc1 = " + glAccountItem.getClearedAmount() + " item " + j);
								if(glAccountItem.getClearedAmount() != null){
									glAccountItem.setClearedAmount(glAccountItem.getClearedAmount().subtract(amountInLocalCurrency));
								}
								glAccountItem.setClearedRefDocumentNumber(null);
								glAccountItem.setClearedRefFiscalYear(null);
							}

							List glAccountItemBOList2 = new ArrayList(gLAccountItemHome.findByItemNumber(reversalGLItem.getOfficeCode(),fiscalYear2,documentNumber2, new Integer(0)));				 

							if(glAccountItemBOList2.size() > 0){
								glAccountItem = (GLAccountItem) glAccountItemBOList2.get(0);
								Logger.getInstance().logDebug("clearedAmount Doc 2 = " + glAccountItem.getClearedAmount());
								if(glAccountItem.getClearedAmount() != null){
									glAccountItem.setClearedAmount(glAccountItem.getClearedAmount().subtract(amountInLocalCurrency));
								}
								glAccountItem.setClearedRefDocumentNumber(null);
								glAccountItem.setClearedRefFiscalYear(null);
							}							
							
							}
						
					  }
					  catch (java.sql.SQLException ex) {
							throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
							  
					  }
				  
				  	DebtorClearingTransactionDAO debtorClearingDAO = (DebtorClearingTransactionDAO) DAOProxy.getDAO("debtorClearingTransaction", user);
				  	debtorClearingDAO.deleteDebtorClearing(reversalGLItem.getOfficeCode(), reversalGLItem.getFiscalYear(), reversalGLItem.getDocumentNumber(), user);
				  					
					glAccountItem.setLastUpdateBy(user.getId());
					glAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
					AFMSAuditTrail.updateLogAuditTrail(glAccountItem, user);
				}
			  }
		else{
			List glAccountItemBOList = new ArrayList(gLAccountItemHome.findByItemNumber(glItem.getOfficeCode(), glItem.getFiscalYear(), glItem.getDocumentNumber(), new Integer(0)));

				  if (!glAccountItemBOList.isEmpty()) {

					glAccountItem = (GLAccountItem) glAccountItemBOList.get(0);

					calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(null, glItem.getAmount(), glAccountItem.getExchangeRate(), glAccountItem.getCurrency(), glAccountItem.getOfficeCode(), glAccountItem.getDocumentDate(), user);

					if (glAccountItem.getClearedAmount() == null) {
					  glAccountItem.setClearedAmount(calculateExchangeRateAmountBO.getAmount());
					}
					else {
					  glAccountItem.setClearedAmount(glAccountItem.getClearedAmount().add(calculateExchangeRateAmountBO.getAmount()));
					}

					//if full clearing, set full clearing flag to true
					if (glAccountItem.getAmount().compareTo(glAccountItem.getClearedAmount()) == 0) {
					  glAccountItem.setClearedRefDocumentNumber(glItem.getDocumentNumber());
					  glAccountItem.setClearedRefFiscalYear(glItem.getFiscalYear());
					  glAccountItem.setParentItemNumber(glItem.getItemNo());
					}

					glAccountItem.setClearingDocumentIndicator(new Boolean(false));
					//Chee Seng 04th Aug 2004, BugId: 6839
					glAccountItem.setLastUpdateBy(user.getId());
					glAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());

					//Chee Seng 05th July 2005, bugId: 11719
					AFMSAuditTrail.updateLogAuditTrail(glAccountItem, user);
					// karen BugId: 20426 30 January 2007
					//update the cleared amount for the transaction document
					com.portrade.ipms.afms.dao.ClearingTransactionItemDAO itemDao = (com.portrade.ipms.afms.dao.ClearingTransactionItemDAO) DAOProxy.getDAO("clearingTransactionItem", user);
					if (itemDao != null) {
					  AbstractCriteria[] filter = {
						  new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_OFFICECODE, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
						  new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_FISCALYEAR, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
						  new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_DOCUMENTNUMBER, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
						  new FieldCriteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_ITEMNO, "=", ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_ITEMNUMBER),
						  new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_OFFICECODE, "=", glAccountItem.getOfficeCode()),
						  new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_FISCALYEAR, "=", glAccountItem.getFiscalYear()),
						  new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_DOCUMENTNUMBER, "=", glAccountItem.getDocumentNumber()),
						  new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "<>", ProcessStatus.DELETED),
						  new Criteria(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false))
						  };

					  OrderBy[] order = {new OrderBy(com.portrade.ipms.afms.dao.ClearingTransactionItemDAO.FILTER_ITEMNO)};

					  java.util.List results = DAOProxy.list("clearingTransactionItem", user, filter, order);
					  for (int i = 0; i < results.size(); i++) {
						IClearingTransactionItem item = (IClearingTransactionItem) results.get(i);
						Logger.getInstance().logDebug("item.getTransactionOfficeCode() : " + item.getTransactionOfficeCode());
						Logger.getInstance().logDebug("item.getTransactionDocumentNumber() : " + item.getTransactionDocumentNumber());
						Logger.getInstance().logDebug("item.getTransactionFiscalYear() : " + item.getTransactionFiscalYear());

						if (item.getTransactionOfficeCode() != null && item.getTransactionDocumentNumber() != null && item.getTransactionFiscalYear() != null) {
						  List glAccountItemBOList2 = new ArrayList(gLAccountItemHome.findByItemNumber(item.getTransactionOfficeCode(), item.getTransactionFiscalYear(), item.getTransactionDocumentNumber(), item.getTransactionItemNumber()));
						  if (glAccountItemBOList2.size() > 0) {
							GLAccountItem glItemBO = (GLAccountItem) glAccountItemBOList2.get(0);
							glItemBO.setClearedAmount((glItemBO.getClearedAmount() != null ? glItemBO.getClearedAmount() : new BigDecimal(0)).add(item.getPaidAmount()));
							if (glItemBO.getAmount().compareTo(glItemBO.getClearedAmount()) == 0) {
							  glItemBO.setClearedRefDocumentNumber(item.getDocumentNumber());
							  glItemBO.setClearedRefFiscalYear(item.getFiscalYear());
							}
							else if (glItemBO.getAmount().compareTo(glItemBO.getClearedAmount()) < 0) {
							  sessionContext.setRollbackOnly();
							  throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{ClearingTransactionItemLabelId.PAID_AMOUNT, ClearingTransactionItemLabelId.TRANSACTION_AMOUNT});
							}
							glItemBO.setLastUpdateBy(user.getId());
							glItemBO.setLastUpdateOn(AFMSUtilities.getCurrentTime());
							AFMSAuditTrail.updateLogAuditTrail(glItemBO, user);
						  }
						}
					  }
					}      
				  }
		}
      
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ClearingTransactionLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {F8B1FE67-FC9F-468A-AEE8-AC388FB3639F}
   */
  public void createJournalForDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("********createJournalForDebtorInvoice**************");
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();

      sortInvoiceItems(bo.getItems());

      for (int i = 0; i < bo.getItems().size(); i++) {
        IInvoiceItem item = (IInvoiceItem) bo.getItems().get(i);
        Logger.getInstance().logDebug("----item.getAmount()-----" + item.getAmount());
        Logger.getInstance().logDebug("----item.getDebitCreditType()-----" + item.getDebitCreditType());
        BigDecimal headerAmount = new BigDecimal(0);
		    BigDecimal totalCredit = new BigDecimal(0);
		    BigDecimal totalDebit = new BigDecimal(0);
        if (item.getDifferentOfficeCostCenterId() == null || item.getDifferentOfficeCostCenterId().equals("")) {
          continue;
        }

        if (!item.getOfficeCode().equals(item.getCostCenterOfficeCode())) {
          IParkJournal parkJournal = new ParkJournalValue();
          String headerCostCenterId = null;
          String headerOfficeCode = null;

          //create items
          for (int j = i + 1; j < bo.getItems().size(); j++) {
            IInvoiceItem nextItem = (IInvoiceItem) bo.getItems().get(j);

            if (nextItem.getDifferentOfficeCostCenterId() == null || nextItem.getDifferentOfficeCostCenterId().equals("")) {
              continue;
            }

            if (item.getCostCenterOfficeCode().equals(nextItem.getCostCenterOfficeCode())) {
              IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
              newParkJournalItem.setAmount(nextItem.getAmount());
              newParkJournalItem.setDebitCreditType(nextItem.getDebitCreditType());
              newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
              newParkJournalItem.setFiscalYear(bo.getFiscalYear());
              newParkJournalItem.setOfficeCode(nextItem.getCostCenterOfficeCode());
              Logger.getInstance().logDebug("********nextItem.getAmount()*******" + nextItem.getAmount());
              Logger.getInstance().logDebug("********nextItem.getDebitCreditType()*******" + nextItem.getDebitCreditType());
              newParkJournalItem.setGlAccount(nextItem.getDifferentOfficeGLAccount());
              newParkJournalItem.setPostingKey(nextItem.getPostingKey());
              newParkJournalItem.setProjectId(nextItem.getProjectId());
              newParkJournalItem.setResponsibleCenter(nextItem.getDifferentOfficeCostCenterId());
              newParkJournalItem.setRemark(nextItem.getRemark());
              //Hui Mian 02/04/2007, need to set documentDate and PostingDate else will get system default date
              newParkJournalItem.setDocumentDate(bo.getDocumentDate());
              newParkJournalItem.setPostingDate(bo.getPostingDate());
              newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);

              if (nextItem.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                headerAmount = headerAmount.subtract(nextItem.getAmount());
                totalDebit = totalDebit.add(nextItem.getAmount());
              }
              else {
                headerAmount = headerAmount.add(nextItem.getAmount());
                totalCredit = totalCredit.add(nextItem.getAmount());
              }
              parkJournal.addParkJournalItemValue(newParkJournalItem);
              bo.getItems().remove(j);
              j--;
            }
          }
          Logger.getInstance().logDebug("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
          Logger.getInstance().logDebug("headerAmount :" + headerAmount);
          Logger.getInstance().logDebug("totalDebit :" + totalDebit);
          Logger.getInstance().logDebug("totalCredit :" + totalCredit);
          Logger.getInstance().logDebug("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");

          IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
          newParkJournalItem.setAmount(item.getAmount());
          newParkJournalItem.setDebitCreditType(item.getDebitCreditType());
          newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newParkJournalItem.setOfficeCode(item.getCostCenterOfficeCode());
          Logger.getInstance().logDebug("********item.getAmount()*******" + item.getAmount());
          Logger.getInstance().logDebug("********item.getDebitCreditType()*******" + item.getDebitCreditType());
          newParkJournalItem.setGlAccount(item.getDifferentOfficeGLAccount());
          newParkJournalItem.setPostingKey(item.getPostingKey());
          newParkJournalItem.setProjectId(item.getProjectId());
          newParkJournalItem.setResponsibleCenter(item.getDifferentOfficeCostCenterId());
          newParkJournalItem.setRemark(item.getRemark());
          //Hui Mian 02/04/2007, need to set documentDate and PostingDate else will get system default date
          newParkJournalItem.setDocumentDate(bo.getDocumentDate());
          newParkJournalItem.setPostingDate(bo.getPostingDate());
          newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          if (headerAmount.compareTo(new BigDecimal(0)) == 0 && bo.getItems().size() == 1) {
            headerAmount = item.getAmount();
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              totalDebit = totalDebit.add(item.getAmount());
            }
            else {
              totalCredit = totalCredit.add(item.getAmount());
            }
          }
          else {
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              headerAmount = headerAmount.subtract(item.getAmount());
              totalDebit = totalDebit.add(item.getAmount());
            }
            else {
              headerAmount = headerAmount.add(item.getAmount());
              totalCredit = totalCredit.add(item.getAmount());
            }
          }
          parkJournal.addParkJournalItemValue(newParkJournalItem);
          Logger.getInstance().logDebug("+++++++++++++++++++");
          Logger.getInstance().logDebug("headerAmount :" + headerAmount);
          Logger.getInstance().logDebug("totalDebit :" + totalDebit);
          Logger.getInstance().logDebug("totalCredit :" + totalCredit);
          Logger.getInstance().logDebug("+++++++++++++++++++");

          //create debit item
          IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
          if (headerAmount.compareTo(new BigDecimal(0)) < 0) {
            headerAmount = headerAmount.negate();
          }
          newDebitParkJournalItem.setAmount(headerAmount);
          if (totalDebit.compareTo(totalCredit) > 0) {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
          }
          else {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          }
          newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newDebitParkJournalItem.setOfficeCode(item.getCostCenterOfficeCode());

          try {
            IOffice office = generalLedgerSetup.retrieveOffice(item.getOfficeCode(), user);

            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, item.getPostingKey(), user);

            newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

          newDebitParkJournalItem.setProjectId(item.getProjectId());
          newDebitParkJournalItem.setResponsibleCenter(item.getCostCenterId());
          newDebitParkJournalItem.setRemark(item.getRemark());
          newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          //Hui Mian 02/04/2007, need to set documentDate and PostingDate else will get system default date
          newDebitParkJournalItem.setDocumentDate(bo.getDocumentDate());
          newDebitParkJournalItem.setPostingDate(bo.getPostingDate());
          parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

          if (i != bo.getItems().size() - 1) {
            bo.getItems().remove(i);
            i--;
          }

          //create dummy header
          parkJournal.setOfficeCode(item.getCostCenterOfficeCode());
          parkJournal.setFiscalYear(bo.getFiscalYear());
          parkJournal.setDocumentNumber(bo.getDocumentNumber());
          parkJournal.setHeaderIndicator(Boolean.TRUE);
          parkJournal.setAmount(new BigDecimal("0"));
          parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
          parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          parkJournal.setDirectPostingJournalFlag(new Boolean(true));
          parkJournal.setInterOfficePostingIndicator(new Boolean(true));
          parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          parkJournal.setCurrencyType(bo.getCurrency());
          //Hui Mian 02/04/2007, need to set documentDate and PostingDate else will get system default date
          parkJournal.setDocumentDate(bo.getDocumentDate());
          parkJournal.setPostingDate(bo.getPostingDate());

          parkJournal.setActualDocumentType(IConstants.TransactionDocumentType.DEBTOR_INVOICE);
					parkJournal.setActualExternalSystemType(bo.getExternalSystemType());          

          Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
          for (int k = 0; k < parkJournal.getParkJournalItemValue().size(); k++) {
            IParkJournalItem pp = (IParkJournalItem) parkJournal.getParkJournalItemValue().get(k);
            Logger.getInstance().logDebug("k :" + k);
            Logger.getInstance().logDebug("pp.getDebitCreditType()==" + pp.getDebitCreditType());
            Logger.getInstance().logDebug("pp.getGlAccount==" + pp.getGlAccount());
            Logger.getInstance().logDebug("pp.getAmount()==" + pp.getAmount());
            Logger.getInstance().logDebug("pp.getOfficeCode()==" + pp.getOfficeCode());
            Logger.getInstance().logDebug("pp.getCrossOfficeNumber()==" + pp.getCrossOfficeNumber());
            
          }
          Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");

          IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
        }
      }

    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param totalBankGuarantee Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {32934244-98EB-4E6E-8413-569BD0DB84BB}
   */
  public java.math.BigDecimal retrieveBankGuaranteePercentage(java.math.BigDecimal totalBankGuarantee, IUser user) throws AFMSException {
    Logger.getInstance().logDebug("totalBankGuarantee = " + totalBankGuarantee);
    BigDecimal percentage = new BigDecimal(0);

    try {
      AbstractCriteria[] filter = {
          new Criteria(BankGuaranteePercentageDAO.FILTER_FROMAMOUNT, "<=", totalBankGuarantee),
          new Criteria(BankGuaranteePercentageDAO.FILTER_TOAMOUNT, ">=", totalBankGuarantee)
          };
      java.util.List results = DAOProxy.list("bankGuaranteePercentage", user, filter);
      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.BankGuaranteePercentageLabelId.FROM_AND_TO_AMOUNT});
      }
      IBankGuaranteePercentage bankGuaranteePercentage = (IBankGuaranteePercentage) results.get(0);

      percentage = bankGuaranteePercentage.getPercentage();
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.BankGuaranteePercentageLabelId.FROM_AND_TO_AMOUNT});
			}
    }
    return percentage;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {8086BB4F-D4C6-43D5-9565-AFEBDA9917C2}
   */
  public void createJournalForDebitCreditNote(IDebtorDebitCreditMemo bo, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("********createJournalForDebitCreditNote**************");
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();

      sortDebitCreditItems(bo.getItems());

      for (int i = 0; i < bo.getItems().size(); i++) {
        IDebtorDebitCreditMemoItem item = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
        BigDecimal headerAmount = new BigDecimal(0);
        if (item.getDifferentOfficeCostCenterId() == null || item.getDifferentOfficeCostCenterId().equals("")) {
          continue;
        }

        if (!item.getOfficeCode().equals(item.getCostCenterOfficeCode())) {
          IParkJournal parkJournal = new ParkJournalValue();
          String headerCostCenterId = null;
          String headerOfficeCode = null;

          //create items
          for (int j = i + 1; j < bo.getItems().size(); j++) {
            IDebtorDebitCreditMemoItem nextItem = (IDebtorDebitCreditMemoItem) bo.getItems().get(j);

            if (nextItem.getDifferentOfficeCostCenterId() == null || nextItem.getDifferentOfficeCostCenterId().equals("")) {
              continue;
            }

            if (item.getCostCenterOfficeCode().equals(nextItem.getCostCenterOfficeCode())) {
              IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
              newParkJournalItem.setAmount(nextItem.getAmount());
              newParkJournalItem.setDebitCreditType(nextItem.getDebitCreditType());
              newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
              newParkJournalItem.setFiscalYear(bo.getFiscalYear());
              newParkJournalItem.setOfficeCode(nextItem.getCostCenterOfficeCode());
              newParkJournalItem.setGlAccount(nextItem.getDifferentOfficeGLAccount());
              newParkJournalItem.setPostingKey(nextItem.getPostingKey());
              newParkJournalItem.setProjectId(nextItem.getProjectId());
              newParkJournalItem.setResponsibleCenter(nextItem.getDifferentOfficeCostCenterId());
              newParkJournalItem.setRemark(nextItem.getRemark());
              newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
              //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
              newParkJournalItem.setDocumentDate(bo.getDocumentDate());
              newParkJournalItem.setPostingDate(bo.getPostingDate());
              Logger.getInstance().logDebug("===nextItem.getDebitCreditType()===" + nextItem.getDebitCreditType());
              if (bo.getTransactionType().equals(IConstants.TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {
                if (nextItem.getDebitCreditType().equals(DebitCreditType.CREDIT)) {
                  headerAmount = headerAmount.subtract(nextItem.getAmount());
                }
                else {
                  headerAmount = headerAmount.add(nextItem.getAmount());
                }
              }
              else {
                if (nextItem.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                  headerAmount = headerAmount.subtract(nextItem.getAmount());
                }
                else {
                  headerAmount = headerAmount.add(nextItem.getAmount());
                }
              }
              parkJournal.addParkJournalItemValue(newParkJournalItem);
              bo.getItems().remove(j);
              j--;
            }
          }

          IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
          newParkJournalItem.setAmount(item.getAmount());
          newParkJournalItem.setDebitCreditType(item.getDebitCreditType());
          newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newParkJournalItem.setOfficeCode(item.getCostCenterOfficeCode());
          newParkJournalItem.setGlAccount(item.getDifferentOfficeGLAccount());
          newParkJournalItem.setPostingKey(item.getPostingKey());
          newParkJournalItem.setProjectId(item.getProjectId());
          newParkJournalItem.setResponsibleCenter(item.getDifferentOfficeCostCenterId());
          newParkJournalItem.setRemark(item.getRemark());
          newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
          newParkJournalItem.setDocumentDate(bo.getDocumentDate());
          newParkJournalItem.setPostingDate(bo.getPostingDate());
          Logger.getInstance().logDebug("===item.getDebitCreditType()===" + item.getDebitCreditType());
          if (headerAmount.compareTo(new BigDecimal(0)) == 0 && bo.getItems().size() == 1) {
            headerAmount = item.getAmount();
          }
          else {
            if (bo.getTransactionType().equals(IConstants.TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {
              if (item.getDebitCreditType().equals(DebitCreditType.CREDIT)) {
                headerAmount = headerAmount.subtract(item.getAmount());
              }
              else {
                headerAmount = headerAmount.add(item.getAmount());
              }
            }
            else {
              if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                headerAmount = headerAmount.subtract(item.getAmount());
              }
              else {
                headerAmount = headerAmount.add(item.getAmount());
              }
            }
          }
          parkJournal.addParkJournalItemValue(newParkJournalItem);

          //create debit item
          IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
          if (headerAmount.compareTo(new BigDecimal(0)) < 0) {
            headerAmount = headerAmount.negate();
          }
          newDebitParkJournalItem.setAmount(headerAmount);
          if (bo.getTransactionType().equals(IConstants.TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
          }
          else {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          }
          newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newDebitParkJournalItem.setOfficeCode(item.getCostCenterOfficeCode());

          try {
            IOffice office = generalLedgerSetup.retrieveOffice(item.getOfficeCode(), user);

            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, item.getPostingKey(), user);

            newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

          newDebitParkJournalItem.setProjectId(item.getProjectId());
          newDebitParkJournalItem.setResponsibleCenter(item.getCostCenterId());
          newDebitParkJournalItem.setRemark(item.getRemark());
          newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
          newDebitParkJournalItem.setDocumentDate(bo.getDocumentDate());
          newDebitParkJournalItem.setPostingDate(bo.getPostingDate());
          parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

          if (i != bo.getItems().size() - 1) {
            bo.getItems().remove(i);
            i--;
          }

          //create dummy header
          parkJournal.setOfficeCode(item.getCostCenterOfficeCode());
          parkJournal.setFiscalYear(bo.getFiscalYear());
          parkJournal.setDocumentNumber(bo.getDocumentNumber());
          parkJournal.setHeaderIndicator(Boolean.TRUE);
          parkJournal.setAmount(new BigDecimal("0"));
          parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
          parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          parkJournal.setDirectPostingJournalFlag(new Boolean(true));
          parkJournal.setInterOfficePostingIndicator(new Boolean(true));
          parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          parkJournal.setCurrencyType(bo.getCurrency());
          //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
          parkJournal.setDocumentDate(bo.getDocumentDate());
          parkJournal.setPostingDate(bo.getPostingDate());
          IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
        }
      }

    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {1F598BDD-DA66-42DB-8DA4-A38A44E47105}
   */
  public void deleteParkLiquidateStaffAdvance(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException cx) {
      Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateDeleteParkLiquidateStaffAdvance();
      List glAccountItemList = cf.retrieveGLAccountItemByDocumentNumber(officeCode, fiscalYear, documentNumber, user);
      IAbstractGLAccountItem headerItem = (IAbstractGLAccountItem) glAccountItemList.get(0);
      cf.deleteParkedDocument(officeCode, fiscalYear, documentNumber, user);

      ILiquideStaffAdvance liquideStaffAdvance = retrieveLiquidateStaffAdvance(officeCode, fiscalYear, documentNumber, user);

      List liquideStaffAdvanceItemList = liquideStaffAdvance.getItems();
      for (int i = 0; i < liquideStaffAdvanceItemList.size(); i++) {
        ILiquideStaffAdvanceItem liquideStaffAdvanceItemBO = (ILiquideStaffAdvanceItem) liquideStaffAdvanceItemList.get(i);

        if (liquideStaffAdvanceItemBO.getStaffAdvanceItemNumber() == null || liquideStaffAdvanceItemBO.getStaffAdvanceItemNumber().equals("")) {
          //cf.checkAndReserveBudget(liquideStaffAdvanceItemBO.getOfficeCode(), liquideStaffAdvanceItemBO.getFiscalYear(), "", "", liquideStaffAdvanceItemBO.getGLAccount(), headerItem.getPostingPeriod(), DebitCreditType.CREDIT, liquideStaffAdvanceItemBO.getAmountInLocalCurrency(), headerItem.getDocumentDate(), user);
          cf.checkAndReserveBudget(liquideStaffAdvanceItemBO.getOfficeCode(), liquideStaffAdvanceItemBO.getFiscalYear(), "", "", liquideStaffAdvanceItemBO.getGLAccount(), headerItem.getPostingPeriod(), DebitCreditType.CREDIT, liquideStaffAdvanceItemBO.getAmountInLocalCurrency(), headerItem.getDocumentDate(), liquideStaffAdvanceItemBO.getFiscalYear(), liquideStaffAdvanceItemBO.getDocumentNumber(), user);
        }
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {34C486DC-EB25-4A76-ABDE-1E0B3FDFC017}
   */
  public void updateParkLiquidateStaffAdvance(ILiquideStaffAdvance bo, IUser user) throws AFMSException {
    AccountPayableManager acp = null;
    CommonFunction cf = null;
    Integer postingPeriod = null;
    GeneralLedgerSetup glSetup = null;
	boolean interPosting = false;
    try {
      acp = accountPayableHome.create();
      cf = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      validateUpdateLiquidateStaffAdvance();

      List newGlItemList = new ArrayList();
      List glItemList = cf.retrieveGLAccountItemByItemNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), new Integer(0), user);
      if (glItemList.size() > 0) {
        IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(0);

        if (glItem.isHeaderIndicator().booleanValue()) {
          glItem.setAmount(bo.getAmount());
          glItem.setAmountInLocalCurrency(bo.getAmountInLocalCurrency());
          glItem.setDocumentDate(bo.getDocumentDate());
          glItem.setExchangeRate(bo.getExchangeRate());
          glItem.setCurrency(bo.getCurrency());
          glItem.setPostingDate(bo.getPostingDate());
          Logger.getInstance().logDebug("SALiquidation postingDate = " + bo.getPostingDate());
          validateYearOfPostingDate(bo.getPostingDate(), bo.getDocumentDate(), bo.getFiscalYear(), user);
          glItem.setPostingPeriod(bo.getPostingPeriod());
          glItem.setReference(bo.getReference());
          glItem.setReferenceType(bo.getReferenceType());
          glItem.setRemark(bo.getRemark());
          glItem.setClearedAmount(bo.getClearedAmount());
          glItem.setHeaderIndicator(new Boolean(true));
		//		  16/12/2009 erma bugid: 27756 Added the lastupdateby and lastupdateon
				  glItem.setLastUpdateBy(user.getId());
				  glItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());

          newGlItemList.add(glItem);
          bo.setCrossOfficeNumber(glItem.getCrossOfficeNumber());
        }
      }
      Logger.getInstance().logDebug("newGLItemList.size after glItem === " + newGlItemList.size());

      BigDecimal totalItemAmount = new BigDecimal(0);
      int itemCounter = 0;
      
      for (int i = 0; i < bo.getItems().size(); i++) {
      	Logger.getInstance().logDebug("Item part");
        ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(i);
				IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(0);

        if (item.getAmount() != null && item.getAmount().compareTo(new BigDecimal("0")) != 0) {
          totalItemAmount = totalItemAmount.add(item.getAmount());

          IAbstractGLAccountItem newGlItem = new AbstractGLAccountItemValue();
          newGlItem.setAmount(item.getAmount());
          newGlItem.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
          newGlItem.setDocumentDate(bo.getDocumentDate());
          newGlItem.setDocumentType(bo.getDocumentType());
          newGlItem.setExchangeRate(bo.getExchangeRate());
          newGlItem.setCurrency(bo.getCurrency());
          newGlItem.setPostingDate(bo.getPostingDate());
          newGlItem.setPostingPeriod(bo.getPostingPeriod());
          newGlItem.setOfficeCode(bo.getOfficeCode());
          newGlItem.setFiscalYear(bo.getFiscalYear());
          newGlItem.setItemNo(new Integer(i + 1));
          newGlItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          newGlItem.setHeaderIndicator(new Boolean(false));
          newGlItem.setRemark(item.getRemark());
          newGlItem.setGLAccount(item.getGLAccount());
		  newGlItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
		  
		  // 16/12/2009 erma bugid: 27756 Added the lastupdateby and lastupdateon
		  newGlItem.setCreatedBy(glItem.getCreatedBy());
		  newGlItem.setCreatedOn(glItem.getCreatedOn());
		  newGlItem.setLastUpdateBy(user.getId());
		  newGlItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
		  
		  Logger.getInstance().logDebug("lastupdateby - " + newGlItem.getLastUpdateBy());
          
		  if (item.getBudgetItemOfficeCode() != null && !bo.getOfficeCode().equals(item.getBudgetItemOfficeCode())) {
  			interPosting = true;
  			newGlItem.setCostCenterId(null);
  			IOffice office = glSetup.retrieveOffice(bo.getOfficeCode(), user);
  			IAutomaticAccountAssignment automaticAccountAssignment = glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getBudgetItemOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, newGlItem.getPostingKey(), user);
  			newGlItem.setGLAccount(automaticAccountAssignment.getGlAccount());
  			item.setBudgetItemGLAccount(item.getGLAccount());
  			newGlItem.setInterOfficePostingIndicator(new Boolean(true));
		  }
		  else {
  			newGlItem.setCostCenterId(item.getCostCenterId());
  			newGlItem.setGLAccount(item.getGLAccount());
		  }
          itemCounter++;
          newGlItemList.add(newGlItem);
        }
      }
      Logger.getInstance().logDebug("newGLItemList.size after newGlItem === " + newGlItemList.size());

      Logger.getInstance().logDebug("bo.getStaffAdvanceAmount()==" + bo.getStaffAdvanceAmount());
      Logger.getInstance().logDebug("totalItemAmount=" + totalItemAmount);
      if (bo.getStaffAdvanceAmount().compareTo(totalItemAmount) < 0) {
        IAbstractGLAccountItem newGlItem = new AbstractGLAccountItemValue();
        newGlItem.setExchangeRate(bo.getExchangeRate());
        newGlItem.setCurrency(bo.getCurrency());
        newGlItem.setDocumentDate(bo.getDocumentDate());
        newGlItem.setDocumentType(bo.getDocumentType());
        newGlItem.setOfficeCode(bo.getOfficeCode());
        newGlItem.setFiscalYear(bo.getFiscalYear());
        newGlItem.setItemNo(new Integer(itemCounter + 1));
        newGlItem.setPostingDate(bo.getPostingDate());
        newGlItem.setPostingPeriod(bo.getPostingPeriod());
        newGlItem.setHeaderIndicator(new Boolean(false));

        ISpecialGLIndicator specialGLBO = glSetup.retrieveSpecialGLIndicator(bo.getOfficeCode(), SpecialGLIndicator.STAFF_ADVANCE_LIQ, user);

        //if(bo.getStaffAdvanceAmount().compareTo(totalItemAmount) < 0){
        newGlItem.setAmount(totalItemAmount.subtract(bo.getStaffAdvanceAmount()));
        newGlItem.setGLAccount(specialGLBO.getGLAccount());
        newGlItem.setDebitCreditType(DebitCreditType.CREDIT);
        newGlItem.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
        //Hui Mian, 07/07/07 bugid:22787
        newGlItem.setSpecialGLIndicator(specialGLBO.getCode());
        // }
        Logger.getInstance().logDebug("bo.getCrossOfficeNumber() === " + bo.getCrossOfficeNumber());
        newGlItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
        
		//16/12/2009 erma bugid: 27756 Added the lastupdateby and lastupdateon
		//newGlItem.setCreatedBy(glItem.getCreatedBy());
		//newGlItem.setCreatedOn(glItem.getCreatedOn());
	   	newGlItem.setLastUpdateBy(user.getId());
	   	newGlItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
		Logger.getInstance().logDebug("lastupdateby1 - " + newGlItem.getLastUpdateBy());
        /*if(bo.getStaffAdvanceAmount().compareTo(totalItemAmount) > 0){
			   newGlItem.setAmount(bo.getStaffAdvanceAmount().subtract(totalItemAmount));
			   newGlItem.setGLAccount(specialGLBO.getGLAccount());
			   newGlItem.setDebitCreditType(DebitCreditType.DEBIT);
			   newGlItem.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
		   }*/
        if (interPosting == true) {
          newGlItem.setInterOfficePostingIndicator(new Boolean(true));
        }
        newGlItemList.add(newGlItem);
      }
      Logger.getInstance().logDebug("newGLItemList.size === " + newGlItemList.size());

      if (interPosting == true) {
         bo.setInterOfficePostingIndicator(new Boolean(true));
        for (int j = 0; j < newGlItemList.size(); j++) {
          IAbstractGLAccountItem interOfficeGLItem = (IAbstractGLAccountItem) newGlItemList.get(j);
          interOfficeGLItem.setDocumentNumber(bo.getDocumentNumber());
          interOfficeGLItem.setFiscalYear(bo.getFiscalYear());
          interOfficeGLItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          interOfficeGLItem.setInterOfficePostingIndicator(new Boolean(true));
//		  16/12/2009 erma bugid: 27756 Added the lastupdateby and lastupdateon
		  interOfficeGLItem.setLastUpdateBy(user.getId());
		  interOfficeGLItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        }
      }

      newGlItemList = cf.updateDocument(newGlItemList, user);

      /*
		 * Update Staff Advance Master
		 */
      try {
        List staffAdvanceList = new ArrayList(gLAccountItemHome.findByItemNumber(bo.getOfficeCode(), bo.getAdvanceFiscalYear(), bo.getAdvanceDocumentNumber(), new Integer(0)));

        if (staffAdvanceList.size() <= 0) {
          sessionContext.setRollbackOnly();
          throw new RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.CASH_ADVANCE_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }

        GLAccountItem staffAdvanceHeader = (GLAccountItem) staffAdvanceList.get(0);
        staffAdvanceHeader.setClearedAmount(bo.getAmount());
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DOCUMENT_NUMBER_AND_OFFICE_CODE_AND_FISCAL_YEAR});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      Integer budgetPeriod = new Integer(0);
      try {

        StaffAdvanceLiquidation staffAdvanceLiquidation = staffAdvanceLiquidateHome.findByPrimaryKey(new StaffAdvanceLiquidationPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
        budgetPeriod = staffAdvanceLiquidation.getBudgetPeriod();
        staffAdvanceLiquidation.setBudgetPeriod(bo.getBudgetPeriod());
        staffAdvanceLiquidation.setLastUpdateBy(user.getId());
        staffAdvanceLiquidation.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        //Chee Seng 7th July 2005, bugId: 11719
        ACRAuditTrail.updateLogAuditTrail(staffAdvanceLiquidation, user);
      }
      catch (javax.ejb.FinderException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      for (int i = 0; i < bo.getItems().size(); i++) {
        ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(i);
        if (item.getStaffAdvanceItemNumber() == null) {
          //cf.reserveBudget(bo.getOfficeCode(), bo.getFiscalYear(), "", "", item.getGLAccount(),(bo.getBudgetPeriod() !=null? bo.getBudgetPeriod():bo.getPostingPeriod()), DebitCreditType.CREDIT, item.getAmountInLocalCurrency(),user);
          cf.reserveBudget(bo.getOfficeCode(), bo.getFiscalYear(), "", "", item.getGLAccount(), (bo.getBudgetPeriod() != null ? bo.getBudgetPeriod() : bo.getPostingPeriod()), DebitCreditType.CREDIT, item.getAmountInLocalCurrency(), item.getFiscalYear(), item.getDocumentNumber(), user);
          //cf.checkAndReserveBudget(bo.getOfficeCode(), bo.getFiscalYear(), "", "", item.getGLAccount(), budgetPeriod, DebitCreditType.CREDIT, item.getAmountInLocalCurrency(), bo.getDocumentDate(), user);
          cf.checkAndReserveBudget(bo.getOfficeCode(), bo.getFiscalYear(), "", "", item.getGLAccount(), budgetPeriod, DebitCreditType.CREDIT, item.getAmountInLocalCurrency(), bo.getDocumentDate(), item.getFiscalYear(), item.getDocumentNumber(), user);
        }
      }

      deleteParkLiquidateStaffAdvanceItem(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), postingPeriod, bo.getDocumentDate(), user);
      createLiquidateStaffAdvanceItems(bo, user);
	  if (interPosting == true) {
		createJournalForLiquidateStaffAdvance(bo, IConstants.RECORD_INDICATOR.UPDATE, user);
	  }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {8A8843D5-0DDE-4FC0-8560-1928135C115B}
   */
  public void createJournalForDebtorPayment(IDebtorPayment bo, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("********createJournalForDebtorPayment**************");
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();

      sortDebtorPaymentItems(bo.getItems());

      Logger.getInstance().logDebug("bo.getItems().size() ==" + bo.getItems().size());
      for (int i = 0; i < bo.getItems().size(); i++) {
        IDebtorPaymentItem item = (IDebtorPaymentItem) bo.getItems().get(i);
        BigDecimal headerAmount = new BigDecimal(0);
				BigDecimal totalCredit = new BigDecimal(0);
				BigDecimal totalDebit = new BigDecimal(0);
        Logger.getInstance().logDebug("bo.getOfficeCode() = " + bo.getOfficeCode());
        Logger.getInstance().logDebug("item.getTransactionOfficeCode() = " + item.getTransactionOfficeCode());
        if (item.getTransactionOfficeCode() != null) {
          if (!item.getTransactionOfficeCode().equals(bo.getOfficeCode())) {
            IParkJournal parkJournal = new ParkJournalValue();
            String headerCostCenterId = null;
            String headerOfficeCode = null;

            //create items
            for (int j = i + 1; j < bo.getItems().size(); j++) {
              IDebtorPaymentItem nextItem = (IDebtorPaymentItem) bo.getItems().get(j);

              if (item.getTransactionOfficeCode().equals(nextItem.getTransactionOfficeCode())) {
                IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
                newParkJournalItem.setAmount(nextItem.getAmount());
                newParkJournalItem.setDebitCreditType(nextItem.getDebitCreditType());
                newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
                newParkJournalItem.setFiscalYear(bo.getFiscalYear());
                newParkJournalItem.setOfficeCode(nextItem.getTransactionOfficeCode());
                //karen 5 Dec 2006 BugId:19480
                com.portrade.ipms.afms.dao.GLAccountItemDAO glItemDAO = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
                List glList = commonFunction.retrieveGLAccountItemByItemNumber(nextItem.getTransactionOfficeCode(), nextItem.getTransactionFiscalYear(), nextItem.getTransactionDocumentNumber(), new Integer(0), user);
                if (glList != null && glList.size() > 0) {
                  IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glList.get(0);
                  newParkJournalItem.setGlAccount(glItem.getGLAccount());
                }
                newParkJournalItem.setPostingKey(nextItem.getPostingKey());
                newParkJournalItem.setProjectId(nextItem.getProjectId());
                newParkJournalItem.setResponsibleCenter(nextItem.getCostCenterId());
                newParkJournalItem.setRemark(nextItem.getRemark());
                newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
                //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
                newParkJournalItem.setDocumentDate(bo.getDocumentDate());
                newParkJournalItem.setPostingDate(bo.getPostingDate());

                newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
                if (nextItem.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                  headerAmount = headerAmount.subtract(nextItem.getAmount());
                  totalDebit = totalDebit.add(nextItem.getAmount());
                }
                else {
                  headerAmount = headerAmount.add(nextItem.getAmount());
                  totalCredit = totalCredit.add(nextItem.getAmount());
                }
                parkJournal.addParkJournalItemValue(newParkJournalItem);
                bo.getItems().remove(j);
                j--;
              }
            }

            IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
            newParkJournalItem.setAmount(item.getAmount());
            newParkJournalItem.setDebitCreditType(item.getDebitCreditType());
            newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
            newParkJournalItem.setFiscalYear(bo.getFiscalYear());
            newParkJournalItem.setOfficeCode(item.getTransactionOfficeCode());
            //karen 5 Dec 2006 BugId:19480
            com.portrade.ipms.afms.dao.GLAccountItemDAO glItemDAO = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
            List glList = commonFunction.retrieveGLAccountItemByItemNumber(item.getTransactionOfficeCode(), item.getTransactionFiscalYear(), item.getTransactionDocumentNumber(), new Integer(0), user);
            if (glList != null && glList.size() > 0) {
              IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glList.get(0);
              newParkJournalItem.setGlAccount(glItem.getGLAccount());
            }
            newParkJournalItem.setPostingKey(item.getPostingKey());
            newParkJournalItem.setProjectId(item.getProjectId());
            newParkJournalItem.setResponsibleCenter(item.getCostCenterId());
            newParkJournalItem.setRemark(item.getRemark());
            newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
            newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
            //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
            newParkJournalItem.setDocumentDate(bo.getDocumentDate());
            newParkJournalItem.setPostingDate(bo.getPostingDate());
            if (headerAmount.compareTo(new BigDecimal(0)) == 0 && bo.getItems().size() == 1) {
              headerAmount = item.getAmount();
              if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                totalDebit = totalDebit.add(item.getAmount());
              }
              else {
                totalCredit = totalCredit.add(item.getAmount());
              }
            }
            else {
              if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                headerAmount = headerAmount.subtract(item.getAmount());
                totalDebit = totalDebit.add(item.getAmount());
              }
              else {
                headerAmount = headerAmount.add(item.getAmount());
                totalCredit = totalCredit.add(item.getAmount());
              }
            }
            parkJournal.addParkJournalItemValue(newParkJournalItem);

            IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
            if (headerAmount.compareTo(new BigDecimal(0)) < 0) {
              headerAmount = headerAmount.negate();
            }
            newDebitParkJournalItem.setAmount(headerAmount);
            if (totalDebit.compareTo(totalCredit) > 0) {
              newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
              newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
            }
            else {
              newDebitParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
              newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
            }
            newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
            newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
            newDebitParkJournalItem.setOfficeCode(item.getTransactionOfficeCode());
            //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
            newDebitParkJournalItem.setDocumentDate(bo.getDocumentDate());
            newDebitParkJournalItem.setPostingDate(bo.getPostingDate());

            try {
              IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);

              IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, newDebitParkJournalItem.getPostingKey(), user);

              newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
            }
            catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
            }

            newDebitParkJournalItem.setProjectId(item.getProjectId());
            newDebitParkJournalItem.setResponsibleCenter(item.getCostCenterId());
            newDebitParkJournalItem.setRemark(item.getRemark());
            newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
            newDebitParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
            parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

            if (i != bo.getItems().size() - 1) {
              bo.getItems().remove(i);
              i--;
            }

            //create dummy header
            parkJournal.setOfficeCode(item.getTransactionOfficeCode());
            parkJournal.setFiscalYear(bo.getFiscalYear());
            parkJournal.setDocumentNumber(bo.getDocumentNumber());
            parkJournal.setHeaderIndicator(Boolean.TRUE);
            parkJournal.setAmount(new BigDecimal("0"));
            parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
            parkJournal.setDirectPostingJournalFlag(new Boolean(true));
            parkJournal.setInterOfficePostingIndicator(new Boolean(true));
            parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
            parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
            parkJournal.setCurrencyType(bo.getCurrency());
            //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
            parkJournal.setDocumentDate(bo.getDocumentDate());
            parkJournal.setPostingDate(bo.getPostingDate());

            Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
            for (int k = 0; k < parkJournal.getParkJournalItemValue().size(); k++) {
              IParkJournalItem pp = (IParkJournalItem) parkJournal.getParkJournalItemValue().get(k);
              Logger.getInstance().logDebug("k :" + k);
              Logger.getInstance().logDebug("pp.getDebitCreditType()==" + pp.getDebitCreditType());
              Logger.getInstance().logDebug("pp.getGlAccount==" + pp.getGlAccount());
              Logger.getInstance().logDebug("pp.getAmount()==" + pp.getAmount());
              Logger.getInstance().logDebug("pp.getOfficeCode()==" + pp.getOfficeCode());
              Logger.getInstance().logDebug("pp.getCrossOfficeNumber()==" + pp.getCrossOfficeNumber());
            }
            Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
            IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
          }
        }
      }
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {867AD30A-F998-4E3A-8088-CB5324FF05ED}
   */
  public void createJournalForClearingTransaction(IClearingTransaction bo, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("********createJournalForClearingTransaction**************");
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();

      sortDebtorPaymentItems(bo.getGLAccountItems());


      for (int i = 0; i < bo.getGLAccountItems().size(); i++) {
        IClearingTransactionItem item = (IClearingTransactionItem) bo.getGLAccountItems().get(i);
        BigDecimal headerAmount = new BigDecimal(0);
		BigDecimal totalCredit = new BigDecimal(0);
		BigDecimal totalDebit = new BigDecimal(0);
		
        if (!item.getTransactionOfficeCode().equals(bo.getOfficeCode())) {
          IParkJournal parkJournal = new ParkJournalValue();
          String headerCostCenterId = null;
          String headerOfficeCode = null;

          //create items
          for (int j = i + 1; j < bo.getGLAccountItems().size(); j++) {
            IClearingTransactionItem nextItem = (IClearingTransactionItem) bo.getGLAccountItems().get(j);

            if (item.getTransactionOfficeCode().equals(nextItem.getTransactionOfficeCode())) {
              IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
              newParkJournalItem.setAmount(nextItem.getAmount());
              newParkJournalItem.setDebitCreditType(nextItem.getDebitCreditType());
              newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
              newParkJournalItem.setFiscalYear(bo.getFiscalYear());
              newParkJournalItem.setOfficeCode(nextItem.getTransactionOfficeCode());
              newParkJournalItem.setGlAccount(nextItem.getTransactionGLAccount());
              newParkJournalItem.setPostingKey(nextItem.getPostingKey());
              newParkJournalItem.setProjectId(nextItem.getProjectId());
              newParkJournalItem.setResponsibleCenter(nextItem.getCostCenterId());
              newParkJournalItem.setRemark(nextItem.getRemark());
              newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
              newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
              //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
              newParkJournalItem.setDocumentDate(bo.getDocumentDate());
              newParkJournalItem.setPostingDate(bo.getPostingDate());
              if (nextItem.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                headerAmount = headerAmount.subtract(nextItem.getAmount());
                totalDebit = totalDebit.add(nextItem.getAmount());
              }
              else {
                headerAmount = headerAmount.add(nextItem.getAmount());
                totalCredit = totalCredit.add(nextItem.getAmount());
              }
              parkJournal.addParkJournalItemValue(newParkJournalItem);
              bo.getGLAccountItems().remove(j);
              j--;
            }
          }

          IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
          newParkJournalItem.setAmount(item.getAmount());
          newParkJournalItem.setDebitCreditType(item.getDebitCreditType());
          newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newParkJournalItem.setOfficeCode(item.getTransactionOfficeCode());
          newParkJournalItem.setGlAccount(item.getTransactionGLAccount());
          newParkJournalItem.setPostingKey(item.getPostingKey());
          newParkJournalItem.setProjectId(item.getProjectId());
          newParkJournalItem.setResponsibleCenter(item.getCostCenterId());
          newParkJournalItem.setRemark(item.getRemark());
          newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
          newParkJournalItem.setDocumentDate(bo.getDocumentDate());
          newParkJournalItem.setPostingDate(bo.getPostingDate());
          if (headerAmount.compareTo(new BigDecimal(0)) == 0 && bo.getGLAccountItems().size() == 1) {
            headerAmount = item.getAmount();
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              totalDebit = totalDebit.add(item.getAmount());
            }
            else {
              totalCredit = totalCredit.add(item.getAmount());
            }
          }
          else {
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              headerAmount = headerAmount.subtract(item.getAmount());
              totalDebit = totalDebit.add(item.getAmount());
            }
            else {
              headerAmount = headerAmount.add(item.getAmount());
              totalCredit = totalCredit.add(item.getAmount());
            }
          }

          parkJournal.addParkJournalItemValue(newParkJournalItem);

          //create debit item
          IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
          if (headerAmount.compareTo(new BigDecimal(0)) < 0) {
            headerAmount = headerAmount.negate();
          }
          newDebitParkJournalItem.setAmount(headerAmount);
          if (totalDebit.compareTo(totalCredit) > 0) {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
          }
          else {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          }
          newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newDebitParkJournalItem.setOfficeCode(item.getTransactionOfficeCode());
          //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
          newDebitParkJournalItem.setDocumentDate(bo.getDocumentDate());
          newDebitParkJournalItem.setPostingDate(bo.getPostingDate());

          try {
            IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);

            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, newDebitParkJournalItem.getPostingKey(), user);

            newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

          newDebitParkJournalItem.setProjectId(item.getProjectId());
          newDebitParkJournalItem.setResponsibleCenter(item.getCostCenterId());
          newDebitParkJournalItem.setRemark(item.getRemark());
          newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          newDebitParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());

          parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

          if (i != bo.getGLAccountItems().size() - 1) {
            bo.getGLAccountItems().remove(i);
            i--;
          }

          //create dummy header
          parkJournal.setOfficeCode(item.getTransactionOfficeCode());
          parkJournal.setFiscalYear(bo.getFiscalYear());
          parkJournal.setDocumentNumber(bo.getDocumentNumber());
          parkJournal.setHeaderIndicator(Boolean.TRUE);
          parkJournal.setAmount(new BigDecimal("0"));
          parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
          parkJournal.setDirectPostingJournalFlag(new Boolean(false));
          parkJournal.setInterOfficePostingIndicator(new Boolean(true));
          parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          parkJournal.setCurrencyType(bo.getCurrency());
          parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          //Hui Mian, 02/04/2007, need to set documentdate and postingdate else will be double posting
          parkJournal.setDocumentDate(bo.getDocumentDate());
          parkJournal.setPostingDate(bo.getPostingDate());

          IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
        }
      }

    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  //tml 24 Nov 2006, BugId: 19326

  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @exception com.portrade.ipms.exceptions.DatabaseException Description of
   *      the Exception
   * @modelguid {75B7987D-D00A-49CA-AF85-B2D4809833C4}
   */
  public IReverseDocument voidDebtorPayment(com.portrade.ipms.afms.IDebtorPayment bo, com.portrade.ipms.icms.IUser user) throws AFMSException, com.portrade.ipms.exceptions.DatabaseException {
    CommonFunction commonFunction = null;
    GeneralLedgerManager generalLedgerManager = null;
    IReverseDocument result = null;
    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerManager = generalLedgerManagerHome.create();

      IDebtorPayment debtorPayment = retrieveDebtorPayment(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);
      if (debtorPayment.isDepositToBankIndicator().equals(Boolean.TRUE)) {
        throw new com.portrade.ipms.afms.exceptions.ReversalNotAllowedTransExistException(null);
      }
      IReverseDocument reversalBo = new ReverseDocumentValue();
      reversalBo.setOfficeCode(bo.getOfficeCode());
      reversalBo.setDocumentDate(AFMSUtilities.getCurrentDate());
      reversalBo.setPostingDate(AFMSUtilities.getCurrentDate());
      reversalBo.setDocumentNumber(bo.getDocumentNumber());
      reversalBo.setRemark(bo.getRemark());
      reversalBo.setProcessStatus(bo.getProcessStatus());
      reversalBo.setDocumentType(TransactionDocumentType.DEBTOR_VOID_COLLECTION);
      reversalBo.setJournalPrefix(JournalPrefix.DEBTOR_JOURNAL);
      reversalBo.setFiscalYear(bo.getFiscalYear());
      
      result = generalLedgerManager.reverseReverseDocument(reversalBo, user);

      com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO dao = (com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO) DAOProxy.getDAO("debtorClearingTransaction", user);
      
      Logger.getInstance().logDebug("bo.getDocumentNumber() " + bo.getDocumentNumber());

	  // 05/04/2010 erma BugId: 28473 - delete both invoice and collection
      //dao.deleteDebtorClearingTransaction(bo.getOfficeCode(), bo.getFiscalYear(), new Integer(bo.getDocumentNumber().intValue()), user);
	  dao.deleteDebtorClearing(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);
      //call postdocument	- retrieve the newly generated journal from reversal

      /* An illegal attempt to use multiple resources that have only one-phase capability has occurred within a global transaction.
			if (bo.getUserId() != null) {
				AuthorizationHistory autHist = new AuthorizationHistory(user.getIcmsSession());
				autHist.setAutoCommitOperations(false);
				User auser = null;
				Criteria[] filter = {new Criteria(User.FILTER_USER_ID, "=", bo.getUserId())};
				List userList = new User(user.getIcmsSession()).list(filter, false);
				if (userList != null && userList.size() > 0) {
					auser = (User) userList.get(0);
					Logger.getInstance().logDebug("found user");
				}
				else {
					throw new RecordNotFoundException(new Object[]{AuthorizationHistory.USER_NAME_LABEL_ID});
				}
				autHist.insert(debtorPayment.getId(), auser, this.getClass().getName(), bo.getRemark());
			}	*/
      //karen BugId: 21716 11 June 2007
      Collection glItemList = gLAccountItemHome.findByFiscalYearAndDocumentNumber(bo.getFiscalYear(), bo.getDocumentNumber());
	
	  Logger.getInstance().logDebug("glItemList.size() - " + glItemList.size());
	  
	 Iterator iterator1 = glItemList.iterator();
      BigDecimal clearedAmount = null;
      while (iterator1.hasNext()) {
        GLAccountItem glItem = (GLAccountItem) iterator1.next();
				//05/04/2010 erma BugId: 28473 won't filter header for collection
				//Collection clearedItemList = gLAccountItemHome.findByFiscalYearAndDocumentNumberHeader(glItem.getClearedRefFiscalYear(), glItem.getClearedRefDocumentNumber(), Boolean.TRUE);
       			Collection clearedItemList = gLAccountItemHome.findByFiscalYearAndDocumentNumber(glItem.getClearedRefFiscalYear(), glItem.getClearedRefDocumentNumber());
       			Logger.getInstance().logDebug("clearedItemList.size() = " + clearedItemList.size());
				Iterator iterator2 = clearedItemList.iterator();
        while(iterator2.hasNext()) {
					GLAccountItem clearedItem = (GLAccountItem) iterator2.next();
					Logger.getInstance().logDebug("in clearedItemList");
        	clearedItem.setClearedRefDocumentNumber(null);
					clearedItem.setClearedRefFiscalYear(null);
					if (clearedItem.getClearedAmount() != null) {
						clearedItem.setClearedAmount(clearedItem.getClearedAmount().subtract(glItem.getClearedAmount()));
					}
					clearedItem.setLastUpdateBy(user.getId());
					clearedItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        	
        }
        glItem.setClearedRefFiscalYear(null);
        glItem.setClearedRefDocumentNumber(null);
        glItem.setClearedAmount(null);
        glItem.setClearingDocumentIndicator(null);
        glItem.setLastUpdateBy(user.getId());
        glItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
        AFMSAuditTrail.updateLogAuditTrail(glItem, user);
      }
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorClearingTransactionLabelId.ID});
			}
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    /*
		catch (com.portrade.ipms.exceptions.DatabaseException ex) {
			sessionContext.setRollbackOnly();
		}
		catch (com.portrade.ipms.exceptions.DuplicateKeyException ex) {
			sessionContext.setRollbackOnly();
		}
		catch (com.portrade.ipms.exceptions.ValidationException ex) {
			sessionContext.setRollbackOnly();
		}
		catch (SQLException ex) {
			sessionContext.setRollbackOnly();
		}		*/
		return result;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {58AB2D07-49C2-410C-A004-AC20BEB2F9D7}
   */
  public void postDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    DepositToBank depositToBank = null;
    DepositToBankReceipt depositToBankReceipt = null;
    DepositToBankItem depositToBankItem = null;
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    IDepositToBankReceipt depositToBankReceiptBO = new DepositToBankReceiptValue();
    IDepositToBankItem depositToBankItemBO = new DepositToBankItemValue();
    java.util.Iterator iterator = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    GLAccountItem glAccountItem = null;
    java.util.ArrayList depositToBankList = new java.util.ArrayList();
    java.util.List documentList = new java.util.ArrayList();
    String bankGLAccount = null;
    GLAccountItem originalGlAccountItem = null;
    boolean hasItem = false;
     
    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

	//erma 07/07/2011 - validate: cannot post when fiscal year for as of date is not the same as the bank-in-date
	Logger.getInstance().logDebug("before validation");
	validatePostDepositToBank(bo, user);
	Logger.getInstance().logDebug("after validation");
    Logger.getInstance().logDebug("Before setDepositToBankValue");
    setDepositToBankValue(bo, user);
    Logger.getInstance().logDebug("After setDepositToBankValue");
    //Create a dummy header for glaccount item table
    glAccountItemBO = new AbstractGLAccountItemValue();
    glAccountItemBO.copyPropertiesFrom(bo);
    glAccountItemBO.setDebitCreditType(null);
    glAccountItemBO.setAmount(new BigDecimal("0"));
    glAccountItemBO.setAmountInLocalCurrency(new BigDecimal("0"));
    //Chee Seng 16th June 2004, bugId: 6186
    glAccountItemBO.setPostingKey(null);
    //Chee Seng 2nd Feb 2005, bugId: 9691
    //glAccountItemBO.setGLAccount(null);
    postParkedDocumentBO.addGLAccountItems(glAccountItemBO);

    //Jaymee. 10/10/2003: Keep bankGLAccount for use in creating cross-office items
    bankGLAccount = bo.getGLAccount();

    java.util.List receipts = bo.getReceipts();
    iterator = receipts.iterator();
    Logger.getInstance().logDebug("bo.getReceipts() = " + bo.getReceipts().size());
    IAutomaticAccountAssignment orAutomaticAccountAssignmentBO = new AutomaticAccountAssignmentValue();
    IOffice orOfficeBO = null;

    int count = 1;
    while (iterator.hasNext()) {
    	Logger.getInstance().logDebug("iterator hasnext");
      depositToBankReceiptBO = (IDepositToBankReceipt) iterator.next();
      glAccountItemBO = new AbstractGLAccountItemValue();
			Logger.getInstance().logDebug("depositToBankReceiptBO.getBankInSlipNumber() = " + depositToBankReceiptBO.getBankInSlipNumber());
			
      if (depositToBankReceiptBO.getBankInSlipNumber() != null && !depositToBankReceiptBO.getBankInSlipNumber().equals("") && !depositToBankReceiptBO.getBankInSlipNumber().equals(" ")) {
        
          hasItem = true;
        
        Logger.getInstance().logDebug("depositToBankReceiptBO.getGLAccount() = " + depositToBankReceiptBO.getGLAccount());
        glAccountItemBO.copyPropertiesFrom(depositToBankReceiptBO);
        Logger.getInstance().logDebug("glAccountItemBO.getGLAccount() = " + glAccountItemBO.getGLAccount());
        glAccountItemBO.setItemNo(new Integer(count));
		    glAccountItemBO.setGlobalNumber(depositToBankReceiptBO.getBankInSlipNumber());
        Logger.getInstance().logDebug("glAccountItemBO.getGlobalNumber()======"+glAccountItemBO.getGlobalNumber());
        //Update depositToBankIndicator
        if (depositToBankReceiptBO.getReasonCode() != null && !depositToBankReceiptBO.getReasonCode().equals("")) {
          glAccountItemBO.setDepositToBankIndicator(Boolean.FALSE);
        }
        else {
          glAccountItemBO.setDepositToBankIndicator(Boolean.TRUE);
		   	//	count++;
				// 	Logger.getInstance().equals("glAccountItemBO.isDepositToBankIndicator() = " + glAccountItemBO.isDepositToBankIndicator());
				// 	postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
        }
        count++;
        Logger.getInstance().equals("glAccountItemBO.isDepositToBankIndicator() = " + glAccountItemBO.isDepositToBankIndicator());
		Logger.getInstance().logDebug("orpostingdate - " + depositToBankReceiptBO.getOrPostingDate());
		Logger.getInstance().logDebug("postingdate - " + bo.getPostingDate());
		
        postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
      }
    }
	Logger.getInstance().logDebug("orpostingdate out- " + depositToBankReceiptBO.getOrPostingDate());
	Logger.getInstance().logDebug("postingdate out- " + bo.getPostingDate());
	
    documentList.add(postParkedDocumentBO.getGLAccountItems());
		Logger.getInstance().logDebug("documentList.size = " + documentList.size());
		
    try {
      Logger.getInstance().logDebug("Before postDocuments");
      Logger.getInstance().logDebug("hasItem === " + hasItem);
      //rocky bugid 25877 do not insert to glaccountitem when no item is checked
      if(hasItem){
        documentList = commonFunction.postDocuments(documentList, bo.getBudgetActionType(), user);    
      }
      Logger.getInstance().logDebug("After postDocuments");
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }

    if (documentList.size() > 0) {
      postParkedDocumentBO.setGLAccountItems((List) documentList.get(0));
      bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));
      depositToBankList.add(bo);
    }

    try {
      receipts = bo.getReceipts();
      iterator = receipts.iterator();
      int itemNo = 0;
      while (iterator.hasNext()) {
        depositToBankReceiptBO = (IDepositToBankReceipt) iterator.next();
        Logger.getInstance().logDebug("THC 27/04/2006 depositToBankReceiptBO.getReasonCode() = " + depositToBankReceiptBO.getReasonCode());
        Logger.getInstance().logDebug("THC 27/04/2006 depositToBankReceiptBO.getId() = " + depositToBankReceiptBO.getId());
        Logger.getInstance().logDebug("THC 27/04/2006 depositToBankReceiptBO.getTransactionId() = " + depositToBankReceiptBO.getTransactionId());

        Logger.getInstance().logDebug("find dtb receipt");
        Logger.getInstance().logDebug("depositToBankReceiptBO.getOfficeCode() = " + depositToBankReceiptBO.getOfficeCode());
        Logger.getInstance().logDebug("depositToBankReceiptBO.getFiscalYear() = " + depositToBankReceiptBO.getFiscalYear());
        Logger.getInstance().logDebug("depositToBankReceiptBO.getDocumentNumber() = " + depositToBankReceiptBO.getDocumentNumber());
        Logger.getInstance().logDebug("depositToBankReceiptBO.getItemNo() = " + depositToBankReceiptBO.getItemNo());
        try {
          depositToBankReceipt = depositToBankReceiptHome.findByPrimaryKey(new DepositToBankReceiptPK(depositToBankReceiptBO.getOfficeCode(), depositToBankReceiptBO.getFiscalYear(), depositToBankReceiptBO.getDocumentNumber(), depositToBankReceiptBO.getItemNo()));
          depositToBankReceipt.remove();
        }
        catch (javax.ejb.FinderException ex) {
          //do nothing
        }
        catch (javax.ejb.RemoveException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
        }
        try {
          depositToBankReceiptBO.setItemNo(new Integer(itemNo + 1));
          depositToBankReceipt = depositToBankReceiptHome.create(new DepositToBankReceiptPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), depositToBankReceiptBO.getItemNo()), depositToBankReceiptBO.getOrNumber(), depositToBankReceiptBO.getOrOfficeCode(), depositToBankReceiptBO.getOrFiscalYear(), depositToBankReceiptBO.getOrDocumentNumber(), depositToBankReceiptBO.getOrPaymentType(), depositToBankReceiptBO.getOrPostingDate(), depositToBankReceiptBO.getOrDebtorAccount(), depositToBankReceiptBO.getOrAmount(), depositToBankReceiptBO.getOrCostCenterId(), depositToBankReceiptBO.getOrDocumentType(), depositToBankReceiptBO.getOrChequeNumber(), depositToBankReceiptBO.getOrChequeType(), depositToBankReceiptBO.getBankInSlipNumber(), depositToBankReceiptBO.getReasonCode(), depositToBankReceiptBO.getApprovalStatus(), depositToBankReceiptBO.getTransactionId(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime(), null, null);
          depositToBankReceipt.setBankInSlipNumber(depositToBankReceiptBO.getBankInSlipNumber());
          depositToBankReceipt.setReasonCode(depositToBankReceiptBO.getReasonCode());
          itemNo++;
          ACRAuditTrail.insertLogAuditTrail(depositToBankReceipt, user);
          //Hui Mian, 22033, 18/05/2007 Should update deposittobankindicator in original OR transaction
          //Update depositToBankIndicator
          /*
          if (depositToBankReceipt.getBankInSlipNumber() != null && !depositToBankReceipt.getBankInSlipNumber().equals("")) {
            if (depositToBankReceiptBO.getTransactionId() != null) {
              originalGlAccountItem = gLAccountItemHome.findByPrimaryKey(depositToBankReceiptBO.getTransactionId());
              originalGlAccountItem.setDepositToBankIndicator(new Boolean(true));
              Logger.getInstance().logDebug("depositToBankReceipt.getBankInSlipNumber()======="+depositToBankReceipt.getBankInSlipNumber());
              originalGlAccountItem.setGlobalNumber(depositToBankReceipt.getBankInSlipNumber());
              originalGlAccountItem.setLastUpdateBy(user.getId());
              originalGlAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
              AFMSAuditTrail.updateLogAuditTrail(originalGlAccountItem, user);
            }
          }
		*/
        }
        catch (javax.ejb.DuplicateKeyException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
        catch (javax.ejb.CreateException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }

      }
      Logger.getInstance().logDebug("find dtb ");
      depositToBank = depositToBankHome.findByPrimaryKey(new DepositToBankPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()));
      depositToBank.setPostIndicator(Boolean.TRUE);
      depositToBank.setLastUpdateBy(user.getId());
      depositToBank.setLastUpdateOn(AFMSUtilities.getCurrentTime());
      
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.ID});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {960F9E3B-BAB1-448F-86E4-9A42E9208792}
   */
  public com.portrade.ipms.afms.IDepositToBank retrieveParkDepositToBank(String officeCode, Integer fiscalYear, Long documentNumber, com.portrade.ipms.icms.IUser user) throws AFMSException {
    IDepositToBank bo = new DepositToBankValue();
    IDepositToBankReceipt item = new DepositToBankReceiptValue();
    IDebtorPayment orItem = new DebtorPaymentValue();
    INonDebtorPayment NonORItem = new NonDebtorPaymentValue();
    try {
      com.portrade.ipms.afms.dao.DepositToBankDAO dao = (com.portrade.ipms.afms.dao.DepositToBankDAO) DAOProxy.getDAO("depositToBank", user);
      if (dao != null) {
        Logger.getInstance().logDebug("officeCode = " + officeCode);
        Logger.getInstance().logDebug("fiscalYear = " + fiscalYear);
        Logger.getInstance().logDebug("documentNumber = " + documentNumber);
        java.util.List results = dao.retrieveDepositToBank(officeCode, fiscalYear, documentNumber);
        Logger.getInstance().logDebug("results.size()=" + results.size());
        if (results.size() > 0) {
          bo = (IDepositToBank) results.get(0);
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }

      com.portrade.ipms.afms.dao.DepositToBankReceiptDAO itemDao = (com.portrade.ipms.afms.dao.DepositToBankReceiptDAO) DAOProxy.getDAO("depositToBankReceipt", user);
      if (itemDao != null) {

        java.util.List results = itemDao.retrieveDepositToBankReceipt(officeCode, fiscalYear, documentNumber);
        for (int i = 0; i < results.size(); i++) {
          item = (IDepositToBankReceipt) results.get(i);
          // BugId:23019 07/08/2007 Jiuan Change RC to User Login Name
          com.portrade.ipms.afms.dao.DebtorPaymentDAO receiptDao = (com.portrade.ipms.afms.dao.DebtorPaymentDAO) DAOProxy.getDAO("debtorPayment", user);
          com.portrade.ipms.afms.dao.NonDebtorPaymentDAO nonDebtorReceiptDao = (com.portrade.ipms.afms.dao.NonDebtorPaymentDAO) DAOProxy.getDAO("nonDebtorPayment", user);
          Logger.getInstance().logDebug("item.getDocumentType() = " + item.getDocumentType());
          if (item.getDocumentType() != null && item.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_PAYMENT)) {
            if (receiptDao != null) {
              AbstractCriteria[] orFilter = {
                  new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_OFFICE_CODE, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
                  new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_FISCALYEAR, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
                  new FieldCriteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", DebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
                  new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_ORNUMBER, "=", item.getOrNumber()),
                  new Criteria(com.portrade.ipms.afms.dao.DebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
                  };
              java.util.List orResults = DAOProxy.list("debtorPayment", user, orFilter);
              Logger.getInstance().logDebug("orResults = " + orResults.size());
              orItem = (IDebtorPayment) orResults.get(0);
              Logger.getInstance().logDebug("user login =============" + orItem.getCreatedBy());
              if (orItem.getCreatedBy() != null) {
                String userLogin = receiptDao.retrieveUserLoginName(orItem.getCreatedBy());
                if (userLogin != null) {
                  item.setUserId(userLogin);
                }
              }
            }
          }
          else if (item.getDocumentType() != null && item.getDocumentType().equals(IConstants.TransactionDocumentType.NON_DEBTOR_PAYMENT)) {
            if (nonDebtorReceiptDao != null) {
              AbstractCriteria[] orFilter = {
                  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_OFFICE_CODE, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
                  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_FISCALYEAR, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
                  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
                  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_ORNUMBER, "=", item.getOrNumber()),
                  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
                  };
              java.util.List orResults = DAOProxy.list("nonDebtorPayment", user, orFilter);
              Logger.getInstance().logDebug("orResults = " + orResults.size());
              NonORItem = (INonDebtorPayment) orResults.get(0);
              Logger.getInstance().logDebug("user login =============" + NonORItem.getCreatedBy());
              if (NonORItem.getCreatedBy() != null) {
                String userLogin = receiptDao.retrieveUserLoginName(NonORItem.getCreatedBy());
                if (userLogin != null) {
                  item.setUserId(userLogin);
                }
              }
            }
          }
          bo.addReceipt(item);
        }
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
			}
    }
    return bo;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {8D6F052F-BF1E-489B-84C5-DCA3053C3EB7}
   */
  public IDepositToBank createParkDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    DepositToBank depositToBank = null;
    DepositToBankReceipt depositToBankReceipt = null;
    Long nextDocumentNumber = null;
    java.util.Iterator iterator = null;
    IDepositToBankReceipt depositToBankReceiptBO = new DepositToBankReceiptValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    Logger.getInstance().logDebug("Before validateCreateDepositToBank");
    validateCreateDepositToBank(bo, user);
    Logger.getInstance().logDebug("bo.getTotalAmount() = " + bo.getTotalAmount());
    try {
      if (bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
        //Hui Mian, 02/07/2007, bugid:22663
        //bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
        bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getAsOfDate(), user));
      }
	  	if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) { 
	      nextDocumentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType(), user);
	      bo.setDocumentNumber(nextDocumentNumber);
	  	}
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      depositToBank = depositToBankHome.create(new DepositToBankPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getTotalAmount(), bo.getCollectionOfficerId(), bo.getCollectionOfficerGLAccount(), bo.getRemittanceAdviceNumber(), bo.getOfficeCodeOfBankAccount(), bo.getBankCode(), bo.getOthersCollection(), bo.getAsOfDate(), bo.getDocumentDate(), bo.getReference(), bo.getReferenceType(), bo.getCurrency(), bo.getCostCenterId(), bo.getRemark(), bo.getPostIndicator(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      //Chee Seng 05th July 2005, bugId: 11719
      ACRAuditTrail.insertLogAuditTrail(depositToBank, user);
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    java.util.List receipts = bo.getReceipts();
    iterator = receipts.iterator();
    int itemNo = 0;
    try {
      while (iterator.hasNext()) {
        depositToBankReceiptBO = (IDepositToBankReceipt) iterator.next();
        depositToBankReceiptBO.setItemNo(new Integer(itemNo + 1));
        depositToBankReceipt = depositToBankReceiptHome.create(new DepositToBankReceiptPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), depositToBankReceiptBO.getItemNo()), depositToBankReceiptBO.getOrNumber(), depositToBankReceiptBO.getOrOfficeCode(), depositToBankReceiptBO.getOrFiscalYear(), depositToBankReceiptBO.getOrDocumentNumber(), depositToBankReceiptBO.getOrPaymentType(), depositToBankReceiptBO.getOrPostingDate(), depositToBankReceiptBO.getOrDebtorAccount(), depositToBankReceiptBO.getOrAmount(), depositToBankReceiptBO.getOrCostCenterId(), depositToBankReceiptBO.getOrDocumentType(), depositToBankReceiptBO.getOrChequeNumber(), depositToBankReceiptBO.getOrChequeType(), depositToBankReceiptBO.getBankInSlipNumber(), depositToBankReceiptBO.getReasonCode(), depositToBankReceiptBO.getApprovalStatus(), depositToBankReceiptBO.getTransactionId(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime(), null, null);
        itemNo++;
        ACRAuditTrail.insertLogAuditTrail(depositToBankReceipt, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    return bo;
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {546A6DD0-0A78-430A-99B1-0E44E1006F8B}
   */
  public INonDebtorPayment createNonDebtorPayment(INonDebtorPayment bo, IUser user) throws AFMSException {

    CommonFunction commonFunction = null;
    NonDebtorPayment nonDebtorPayment = null;
    NonDebtorPaymentItem nonDebtorPaymentItem = null;

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

	//Hui Mian 29/04/2008
			
	List revenueList = new ArrayList();
	revenueList.addAll(bo.getItems());
	try{
		if (bo.getFiscalYear() == null) {
					bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
		}
		if (bo.getPostingPeriod() == null) {
					bo.setPostingPeriod(commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user));
		}
		Logger.getInstance().logDebug("bo.getFiscalYear === " + bo.getFiscalYear());
		Logger.getInstance().logDebug("bo.getPostingPeriod === " + bo.getPostingPeriod());
	  commonFunction.insertToRevenueTbl(bo.getDocumentType(), bo.getFiscalYear(),
	  bo.getPostingPeriod(), null,revenueList, user); 
	}
	catch (java.rmi.RemoteException ex) {
	  throw new javax.ejb.EJBException(ex.toString());
	}    
	
	//End		

    setNonDebtorPaymentValue(bo, user);
    validateCreateNonDebtorPayment(bo, user);
    validateNonDebtorPayment(bo, user);

    try {
      if (bo.getOrNumber() == null || bo.getOrNumber().equals("")) {
        String nextDocumentNumber = null;
        if (bo.getDebtorCategory().equals(IConstants.DebCategory.NON_TRADE_STAFF)) {
          nextDocumentNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.InvoicePrefixParameter.RNS, bo.getOfficeCode(), null, null, null, false);
        }
        else {
          nextDocumentNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.InvoicePrefixParameter.RN, bo.getOfficeCode(), null, null, null, false);
        }
        if (nextDocumentNumber == null || nextDocumentNumber.length() == 0) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NonDebtorPaymentLabelId.OR_NUMBER});
        }
        bo.setOrNumber(nextDocumentNumber);
      }
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NonDebtorPaymentLabelId.OR_NUMBER});
    }

		
    try {
      IAbstractGLAccountItem glItemHeader = new AbstractGLAccountItemValue();
      glItemHeader.copyPropertiesFrom((IAbstractGLAccountItem) bo);
      glItemHeader.setHeaderIndicator(Boolean.TRUE);

      List glItemList = new ArrayList();
      glItemList.add(glItemHeader);

      Iterator iterator = bo.getItems().iterator();
      while (iterator.hasNext()) {
        INonDebtorPaymentItem boItem = (INonDebtorPaymentItem) iterator.next();
        IAbstractGLAccountItem glItem = new AbstractGLAccountItemValue();
        glItem.copyPropertiesFrom((IAbstractGLAccountItem) boItem);
        glItem.setOfficeCode(bo.getOfficeCode());
        glItem.setDocumentType(bo.getDocumentType());
        glItem.setPostingDate(bo.getPostingDate());
	    glItem.setDocumentDate(bo.getDocumentDate());
        glItem.setHeaderIndicator(Boolean.FALSE);
        glItem.setInterOfficePostingIndicator(bo.isInterOfficePostingIndicator());
        glItemList.add(glItem);
      }
	
      glItemList = commonFunction.postDocument(glItemList, bo.getBudgetActionType(), user);
      glItemHeader = (IAbstractGLAccountItem) glItemList.get(0);
      bo.setDocumentNumber(glItemHeader.getDocumentNumber());
      bo.setCrossOfficeNumber(glItemHeader.getCrossOfficeNumber());
      nonDebtorPayment = nonDebtorPaymentHome.create(new NonDebtorPaymentPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getOrNumber(), bo.getPayee(), bo.getDescription(), bo.getPaymentType(), bo.getChequeDate(), bo.getDebtorCategory(), bo.getChequePlace(), bo.getStaffAdvanceFiscalYear(), bo.getStaffAdvanceDocumentNumber(), bo.getCid(), AFMSUtilities.getCurrentTime(), user.getId());

      iterator = bo.getItems().iterator();
      while (iterator.hasNext()) {
        INonDebtorPaymentItem boItem = (INonDebtorPaymentItem) iterator.next();
        nonDebtorPaymentItem = nonDebtorPaymentItemHome.create(new NonDebtorPaymentItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), boItem.getItemNo()), boItem.getTransactionOfficeCode(), boItem.getTransactionCostCenterId(), boItem.getTransactionGLAccount(), boItem.getTariffCode(),
            boItem.getTariffRate(), boItem.getQuantity1(), boItem.getBillUnit1(), boItem.getQuantity2(), boItem.getBillUnit2(), boItem.getStaffAdvanceItemNo(), boItem.getCid(), user.getId(), AFMSUtilities.getCurrentTime());
      }

      if (bo.isInterOfficePostingIndicator() != null && bo.isInterOfficePostingIndicator().booleanValue()) {
        createJournalForNonDebtorPayment(bo, user);
      }
      
	  IAbstractGLAccountItem headerItem = new AbstractGLAccountItemValue();
	  for (int i = 0; i < glItemList.size(); i++) {
	  IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(i);
				  Logger.getInstance().logDebug("glItem.isHeaderIndicator() = " + glItem.isHeaderIndicator());
				  Logger.getInstance().logDebug("glItem.getDocumentType() = "  +  glItem.getDocumentType());
	 
		 
		  if(glItem.isHeaderIndicator().equals(Boolean.TRUE) && glItem.getDocumentType().equals("DM") && glItem.isReversalDocumentIndicator() == null){
		  try{
			  headerItem = (IAbstractGLAccountItem) glItemList.get(0);
						Logger.getInstance().logDebug("headerItem.getOfficeCode()" + headerItem.getOfficeCode());
						Logger.getInstance().logDebug("headerItem.getFiscalYear()" + headerItem.getFiscalYear());
						Logger.getInstance().logDebug("headerItem.getDocumentNumber()" + headerItem.getDocumentNumber());
			
			
			  AbstractCriteria[] orFilter = {
					  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_OFFICE_CODE, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
					  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_FISCALYEAR, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
					  new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
					  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", headerItem.getDocumentNumber()),
					  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_FISCALYEAR, "=", headerItem.getFiscalYear()),
					  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_OFFICE_CODE, "=", headerItem.getOfficeCode()),
					  new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true))
					  };
										  
			  INonDebtorPayment NonORItem = new NonDebtorPaymentValue(); 
			  java.util.List results = DAOProxy.list("nonDebtorPayment", user, orFilter);
			  Logger.getInstance().logDebug("results = " + results.size());
						 
				  NonORItem = (INonDebtorPayment) results.get(0);
				  Logger.getInstance().logDebug("amount =============" + NonORItem.getStaffAdvanceDocumentNumber());
				  
			Long temp1 = new Long(0);
			if(NonORItem.getStaffAdvanceDocumentNumber().equals(temp1)){
				NonORItem.setStaffAdvanceDocumentNumber(null);
			}
			
			if(NonORItem.getStaffAdvanceFiscalYear().equals(temp1)){
				NonORItem.setStaffAdvanceFiscalYear(null);
			}

	if(NonORItem.getStaffAdvanceDocumentNumber() != null && NonORItem.getStaffAdvanceFiscalYear()!= null){
			  StaffAdvance staffAdvance = staffAdvanceHome.findByPrimaryKey(
						 new StaffAdvancePK(NonORItem.getOfficeCode(),NonORItem.getStaffAdvanceFiscalYear(), NonORItem.getStaffAdvanceDocumentNumber()));

			  Logger.getInstance().logDebug("headerItem.getAmount() = " + headerItem.getAmount());
			  BigDecimal newAdvancedAmount = new BigDecimal("0.00");
			  Logger.getInstance().logDebug("staffAdvance.getClearedAmount = " + staffAdvance.getClearedAmount());
			  
			  if(staffAdvance.getClearedAmount() == null){
				BigDecimal clearedAmount = new BigDecimal("0.00");
			  	staffAdvance.setClearedAmount(clearedAmount);
			  }
			 // if(staffAdvance.getClearedAmount() != null){
			  
			  newAdvancedAmount = staffAdvance.getClearedAmount().add(headerItem.getAmount());


								staffAdvance.setClearedAmount(newAdvancedAmount);
								staffAdvance.setLastUpdateBy(user.getId());
								staffAdvance.setLastUpdateOn(AFMSUtilities.getCurrentTime());
			//  }
			
}
		  }
		  catch (java.rmi.RemoteException ex) {
											throw new javax.ejb.EJBException(ex.toString());
										  }    
		  catch (javax.ejb.FinderException ex) {
			  sessionContext.setRollbackOnly();
			  throw new RecordNotFoundException(new Object[]{StaffAdvanceLiquidationLabelId.CASH_ADVANCE_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
			catch (java.sql.SQLException ex) {
				   sessionContext.setRollbackOnly();
				   throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
				   }

		  }
      
	  }
      
      
      
      
      
      
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   */
  public void updateNonDebtorPayment(INonDebtorPayment bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    String crossOfficeNumber = null;
    try {

      List glItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);

      for (int j = 0; j < glItemList.size(); j++) {
        IAbstractGLAccountItem glAccountItemBO = (IAbstractGLAccountItem) glItemList.get(j);
        crossOfficeNumber = glAccountItemBO.getCrossOfficeNumber();
        //update master
        if (glAccountItemBO.isHeaderIndicator().equals(Boolean.TRUE)) {
          glAccountItemBO.setRemark(bo.getRemark());
        }
        //update detail
        else {
          for (int i = 0; i < bo.getItems().size(); i++) {
            INonDebtorPaymentItem boItem = (INonDebtorPaymentItem) bo.getItems().get(i);
            if (boItem.getItemNo().compareTo(glAccountItemBO.getItemNo()) == 0) {
              glAccountItemBO.setRemark(boItem.getRemark());
            }
          }
        }
        postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
      }
      if (crossOfficeNumber != null && !crossOfficeNumber.equals("")) {
        List glItemJournalList = commonFunction.retrieveGLAccountItemByCrossOfficeNumber(crossOfficeNumber, bo.getFiscalYear(), user);

        for (int j = 0; j < glItemJournalList.size(); j++) {
          IAbstractGLAccountItem glAccountItemBO = (IAbstractGLAccountItem) glItemJournalList.get(j);

          if (glAccountItemBO.getDocumentType().equals(TransactionDocumentType.BACKEND_JOURNAL)) {
            postParkedDocumentBO.addGLAccountItems(glAccountItemBO);
          }

        }
      }
      commonFunction.updateDocument(postParkedDocumentBO.getGLAccountItems(), user);
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
  }


  /**
   * @param chequeClearingList Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {956F4E8B-2A06-4DAA-8CFC-79BA6DD978C1}
   */
  public void createChequeClearing(java.util.List chequeClearingList, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    IChequeClearing bo = null;
    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      Iterator iterator = chequeClearingList.iterator();
      String referenceNumber = commonFunction.getNextCustomNumberWithoutMonth(SpecialDocumentNumberId.CHEQUE_CLEARING, AFMSUtilities.getCurrentDate(), user);

      while (iterator.hasNext()) {
        bo = (IChequeClearing) iterator.next();

        List glItemList = commonFunction.retrieveGLAccountItemById(bo.getPaymentGLAccountItemId(), user);
        IAbstractGLAccountItem glItem = (IAbstractGLAccountItem) glItemList.get(0);
        if (!(glItem.getProcessStatus().equals(IConstants.ProcessStatus.POST)) || (glItem.isReversalDocumentIndicator() != null)) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ChequeClearingLabelId.CHEQUE + " " + bo.getChequeNo()});
        }
        glItem.setChequeStatus(bo.getChequeStatus());

        if ((bo.getChequeStatus() != null) && (bo.getChequeStatus().equals(IConstants.ChequeStatus.DISHONOURED))) {
          if ((glItem.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_CASH_DEPOSIT)) && (glItem.getClearedAmount() != null) && (glItem.getClearedAmount().compareTo(new BigDecimal(0.00)) > 0)) {
            throw new com.portrade.ipms.afms.exceptions.IsInUsedException(new Object[]{ChequeClearingLabelId.CHEQUE + " " + bo.getChequeNo()});
          }

          if (!(glItem.isHeaderIndicator().booleanValue()) && (glItem.getClearedRefDocumentNumber() != null) && (glItem.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_PAYMENT))) {
            Collection clearedItemList = gLAccountItemHome.findByFiscalYearAndDocumentNumber(glItem.getClearedRefFiscalYear(), glItem.getClearedRefDocumentNumber());

            Iterator iterator1 = clearedItemList.iterator();
            BigDecimal clearedAmount = null;
            while (iterator1.hasNext()) {
              GLAccountItem clearedItem = (GLAccountItem) iterator1.next();
              if (clearedItem.getHeaderIndicator().booleanValue()) {
                clearedItem.setClearedRefFiscalYear(null);
                clearedItem.setClearedRefDocumentNumber(null);
                if (clearedItem.getCurrency().equals(glItem.getCurrency())) {
                  clearedAmount = glItem.getAmount();
                }
                else {
                  ICalculateExchangeRateAmount exchRate = commonFunction.calculateExchangeRateAmount(null, glItem.getAmount(), null, clearedItem.getCurrency(), glItem.getOfficeCode(), glItem.getDocumentDate(), user);
                  clearedAmount = exchRate.getAmount();
                }
                if (clearedAmount.compareTo(clearedItem.getClearedAmount()) > 0) {
                  throw new NegativeNumberException(new Object[]{ChequeClearingLabelId.DOCUMENT + " " + clearedItem.getDocumentNumber()});
                }
                clearedItem.setClearedAmount(clearedItem.getClearedAmount().subtract(clearedAmount));
                clearedItem.setLastUpdateBy(user.getId());
                clearedItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
              }
            }
            createReversalJournal(bo, glItem, user);
          }
        }
        GLAccountItem glAccountItem = gLAccountItemHome.findByPrimaryKey(bo.getPaymentGLAccountItemId());
        glAccountItem.setChequeStatus(glItem.getChequeStatus());
        glAccountItem.setLastUpdateBy(user.getId());
        glAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());

        ChequeClearing chequeClearing = chequeClearingHome.create(new ChequeClearingPK(bo.getChequeNo(), bo.getDebtorCode(), bo.getSubsiLedgerOfficeCode()), bo.getChequeStatus(), bo.getStatusDate(), bo.getPaymentGLAccountItemId(), bo.getVoidChequeOfficeCode(), bo.getVoidChequeFiscalYear(), bo.getVoidChequeDocumentNumber(), referenceNumber, bo.getCid(), user.getId(), AFMSUtilities.getCurrentTime());
      }
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ChequeClearingLabelId.CHEQUE + " " + bo.getChequeNo()});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{ChequeClearingLabelId.CHEQUE_CLEARING});
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
  }


  /**
   * Description of the Method
   *
   * @param aOfficeCode Description of the Parameter
   * @param aFiscalYear Description of the Parameter
   * @param aDocumentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   */
  public com.portrade.ipms.afms.INonDebtorPayment retrieveNonDebtorPayment(String aOfficeCode, Integer aFiscalYear, Long aDocumentNumber, IUser user) throws AFMSException {
    NonDebtorPayment aNonDebtorPayment = null;
    GLAccountItem aGLAccountItem = null;
    String documentNumber$ = aDocumentNumber.toString();
    INonDebtorPayment bo = new NonDebtorPaymentValue();

    try {

      AbstractCriteria[] filter = {
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_OFFICE_CODE, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_FISCALYEAR, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_OFFICE_CODE, "=", aOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_FISCALYEAR, "=", aFiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentDAO.FILTER_DOCUMENTNUMBER, "=", aDocumentNumber)
          };
      java.util.List results = DAOProxy.list("nonDebtorPayment", user, filter);
      NonDebtorPaymentDAO dao = (NonDebtorPaymentDAO) DAOProxy.getDAO("nonDebtorPayment", user);

      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.NonDebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      bo = (INonDebtorPayment) results.get(0);

      AbstractCriteria[] filter1 = {
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_OFFICECODE, "=", NonDebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_FISCALYEAR, "=", NonDebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_DOCUMENTNUMBER, "=", NonDebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new FieldCriteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_ITEMNO, "=", NonDebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_ITEMNO),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_PROCESSSTATUS, "!=", ProcessStatus.DELETED),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(false)),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_OFFICECODE, "=", aOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_FISCALYEAR, "=", aFiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_DOCUMENTNUMBER, "=", aDocumentNumber)
          };
      OrderBy orderBy[] = {new OrderBy(com.portrade.ipms.afms.dao.NonDebtorPaymentItemDAO.FILTER_ITEMNO)};
      java.util.List items = DAOProxy.list("nonDebtorPaymentItem", user, filter1, orderBy);

      Iterator iterator = items.iterator();
      while (iterator.hasNext()) {
        INonDebtorPaymentItem nonDebtorPaymentItem = (INonDebtorPaymentItem) iterator.next();

        if (nonDebtorPaymentItem.getTransactionCostCenterId() != null && !nonDebtorPaymentItem.getTransactionCostCenterId().equals("")) {
          bo.setCostCenterId(nonDebtorPaymentItem.getTransactionCostCenterId());
          nonDebtorPaymentItem.setCostCenterId(nonDebtorPaymentItem.getTransactionCostCenterId());
        }
        if (nonDebtorPaymentItem.getTransactionGLAccount() != null && !nonDebtorPaymentItem.getTransactionGLAccount().equals("")) {
          bo.setGLAccount(nonDebtorPaymentItem.getTransactionGLAccount());
          nonDebtorPaymentItem.setGLAccount(nonDebtorPaymentItem.getTransactionGLAccount());
        }
        bo.addItem(nonDebtorPaymentItem);
      }
      //bo.setItems(items);


    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param aSubsiLedgerOfficeCode Description of the Parameter
   * @param aDebtorCode Description of the Parameter
   * @param aChequeNo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   */
  public IChequeClearing retrieveChequeClearing(String aSubsiLedgerOfficeCode, String aDebtorCode, String aChequeNo, IUser user) throws AFMSException {
    ChequeClearing aChequeClearing = null;
    IChequeClearing bo = new ChequeClearingValue();

    try {

      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.ChequeClearingDAO.FILTER_SUBSILEDGEROFFICECODE, "=", aSubsiLedgerOfficeCode),
          new Criteria(com.portrade.ipms.afms.dao.ChequeClearingDAO.FILTER_DEBTORCODE, "=", aDebtorCode),
          new Criteria(com.portrade.ipms.afms.dao.ChequeClearingDAO.FILTER_CHEQUENO, "=", aChequeNo)
          };
      java.util.List results = DAOProxy.list("chequeClearing", user, filter);
      DebtorPaymentDAO dao = (DebtorPaymentDAO) DAOProxy.getDAO("chequeClearing", user);

      if (results.size() < 1) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.ChequeClearingLabelId.CHEQUE_CLEARING});
      }
      bo = (IChequeClearing) results.get(0);
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
			}
    }

    return bo;
  }


  /**
   * @param boItem The new clearRefDocumentNumberAndFiscalYear value
   * @param user The new clearRefDocumentNumberAndFiscalYear value
   * @exception AFMSException Description of the Exception
   * @modelguid {0334C7D1-EB68-496A-9765-08DD8DA684E2}
   */
  private void setClearRefDocumentNumberAndFiscalYear(ISurchargeInvoiceItem boItem, IUser user) throws AFMSException {

    Logger.getInstance().logDebug("IN SETCLEARREFDOCUMENTNUMBERANDFISCALYEAR");
    Logger.getInstance().logDebug("boItem.getOfficeCode() : " + boItem.getOfficeCode());
    Logger.getInstance().logDebug("boItem.getInvoiceNumber() : " + boItem.getInvoiceNumber());
    Logger.getInstance().logDebug("boItem.getfiscalyear() : " + boItem.getFiscalYear());
    Logger.getInstance().logDebug("boItem.getdocumentnumber() : " + boItem.getDocumentNumber());

    if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.SURCHARGE_INVOICE.equals(boItem.getInvoiceDocumentType())) {
      try {
        AbstractCriteria[] filter = {
            new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_OFFICECODE, "=", boItem.getOfficeCode()),
            new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_INVOICENUMBER, "=", boItem.getInvoiceNumber()),
            new FieldCriteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_OFFICECODE, "=", SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_FISCALYEAR, "=", SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_DOCUMENTNUMBER, "=", SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.SurchargeInvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE)
            };
        java.util.List results = DAOProxy.list("surchargeInvoice", user, filter);

        Logger.getInstance().logDebug(" Queryring Surcharge Invoice - After Triggered");
        if (results.size() < 1) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
        }
        ISurchargeInvoice bo = (ISurchargeInvoice) results.get(0);
        boItem.setClearedRefFiscalYear(bo.getFiscalYear());
        boItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
		System.out.println("!@#for invoicetax in CNDN 4");
        boItem.setInvoiceAmount(bo.getAmount());
        boItem.setInvoiceDocumentDueDate(bo.getDocumentDueDate());
        boItem.setSurchargeCount(bo.getSurchargeCount());
      }
      catch (SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
				}
      }
    }
    else if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.DEBTOR_INVOICE.equals(boItem.getInvoiceDocumentType())) {
      try {
        AbstractCriteria[] filter = {
        		//Hui Mian 28/03/2008, bugid: 25086 to cater for inv from other office code
            //new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", boItem.getOfficeCode()),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_INVOICENUMBER, "=", boItem.getInvoiceNumber()),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE)
            };
        java.util.List results = DAOProxy.list("invoice", user, filter);

        Logger.getInstance().logDebug(" Querying Invoice - After Triggered");
        if (results.size() < 1) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
        }
        IARDocument bo = (IARDocument) results.get(0);
        boItem.setClearedRefFiscalYear(bo.getFiscalYear());
        boItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
        boItem.setInvoiceAmount(bo.getAmount());
		System.out.println("!@#for invoicetax in CNDN 5");
        boItem.setInvoiceDocumentDueDate(bo.getDocumentDueDate());
        boItem.setSurchargeCount(bo.getSurchargeCount());
      }
      catch (SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
				}
      }
    }
    //Hui Mian 08/11/2006, bugId:18891
    else if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.DEBTOR_DEBIT_NOTES.equals(boItem.getInvoiceDocumentType())) {
      try {
        AbstractCriteria[] filter = {
						//Hui Mian 28/03/2008, bugid: 25086 to cater for inv from other office code
            //new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", boItem.getOfficeCode()),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", boItem.getInvoiceNumber()),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR),
            new FieldCriteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
            new Criteria(com.portrade.ipms.afms.dao.DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", Boolean.TRUE)
            };
        java.util.List results = DAOProxy.list("debtorDebitCreditMemo", user, filter);

        Logger.getInstance().logDebug(" Querying Debit Credit Memo - After Triggered");
        if (results.size() < 1) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
        }
        IDebtorDebitCreditMemo bo = (IDebtorDebitCreditMemo) results.get(0);
        boItem.setClearedRefFiscalYear(bo.getFiscalYear());
        boItem.setClearedRefDocumentNumber(bo.getDocumentNumber());
        boItem.setInvoiceAmount(bo.getAmount());
		System.out.println("!@#for invoicetax in CNDN 6");
        boItem.setInvoiceDocumentDueDate(bo.getDocumentDueDate());
        boItem.setSurchargeCount(bo.getSurchargeCount());
      }
      catch (SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.OFFICECODE_AND_FISCALYEAR_AND_RUNDATE_AND_DOCUMENTNUMBER_AND_IDENTIFICATION});
				}
      }
    }

  }


  /**
   * Sets the debtorPaymentValue attribute of the AccountReceivableManagerBean
   * object
   *
   * @param bo The new debtorPaymentValue value
   * @param user The new debtorPaymentValue value
   * @exception java.rmi.RemoteException Description of the Exception
   * @exception javax.ejb.CreateException Description of the Exception
   * @exception AFMSException Description of the Exception
   * @modelguid {C26B90F4-A023-4F85-B1F9-1E0E1D02ECFD}
   */
  private void setDebtorPaymentValue(com.portrade.ipms.afms.IDebtorPayment bo, IUser user) throws AFMSException, javax.ejb.CreateException, java.rmi.RemoteException {
    AccountPayableManager accountPayableManager = accountPayableHome.create();
    CommonFunction commonFunction = commonFunctionHome.create();
    GeneralLedgerSetup generalLedgerSetup = generalLedgerSetupHome.create();
    AccountReceivableSetup ars = accountReceivableSetupHome.create();
    ICustomer aDebtorAccount = null;

    try {
      Integer fiscalYear = commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user);
      bo.setFiscalYear(fiscalYear);
    }
    catch (RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
    }
    catch (RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      Integer period = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user);
      /*
       * if (period != new Integer(12) && (bo.getPostingPeriod() == null || bo.getPostingPeriod().equals(""))) {
       * bo.setPostingPeriod(period);
       * }
       */
      bo.setPostingPeriod(period);
    }
    catch (RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
    }
    catch (RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    Boolean firstTax = null;
    Boolean secondTax = null;
    //Chee Seng 26th Aug 2004, bugId: 7178
    //Boolean rvOrRe = new Boolean(false);
    Boolean rvOrRe = null;

    for (int i = 0; i < bo.getItems().size(); i++) {
      IDebtorPaymentItem debtorPaymentItem = (IDebtorPaymentItem) bo.getItems().get(i);

      if (debtorPaymentItem.getApplyIndicator() != null && !debtorPaymentItem.getApplyIndicator().equals("") && debtorPaymentItem.getApplyIndicator().booleanValue() == true) {
        //Chee Seng 26th Aug 2004, bugId: 7178
        /*
        if (debtorPaymentItem.isTaxIndicator() == null) {
          firstTax = new Boolean(false);
        }
        else {
          firstTax = debtorPaymentItem.isTaxIndicator();
        }
        if (secondTax != null && !secondTax.equals("") && !firstTax.equals(secondTax)) {
          throw new com.portrade.ipms.afms.exceptions.CannotAcceptOfMixtualTaxAndNonTaxException(new Object[]{});
        }
        secondTax = firstTax;
        */
        if (debtorPaymentItem.isTaxIndicator() != null && debtorPaymentItem.isTaxIndicator().booleanValue()) {
          rvOrRe = new Boolean(true);
        }
      }
    }
    //Chee Seng 26th Aug 2004, bugId: 7178
    bo.setTaxIndicator(rvOrRe);

    //Chee Seng 08th Dec 2004, bugId: 8866
    /*
    if (bo.getOrNumber() == null || bo.getOrNumber().equals("")) {
      String nextDocumentNumber = null;
      //Chee Seng 20th July 2004, bugId: 6709
      String documentType = null;
      documentType = ICMSConnector.getDocumentType(user.getIcmsSession(), IConstants.Prefix.RA);
      Logger.getInstance().logDebug("documentType " + documentType);
      nextDocumentNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), documentType, bo.getOfficeCode(), null, null, null);
      if (rvOrRe.booleanValue() == true && firstTax.booleanValue() == true) {
        nextDocumentNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.InvoicePrefixParameter.RV, bo.getOfficeCode(), null, null, null);
        bo.setVat(IConstants.Prefix.RV);
      }
      else {
        nextDocumentNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.InvoicePrefixParameter.RE, bo.getOfficeCode(), null, null, null);
      }
      Logger.getInstance().logDebug("nextDocumentNumber " + nextDocumentNumber);
      //Chee Seng 27th July 2004, bugId: 6773
      if (nextDocumentNumber == null || nextDocumentNumber.length() == 0) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorPaymentLabelId.OR_NUMBER});
      }
      bo.setOrNumber(nextDocumentNumber);
    }
    */
    /*
     * Jason 22th Sept 2003
     * try {
     * IDocTypePostingKeyTrans docTypePostingKeyTrans = generalLedgerManager.retrieveDocTypePostingKeyTrans(TransactionCode.DEBTOR_PAYMENT, user);
     * bo.setDocumentType(docTypePostingKeyTrans.getDocumentType());
     * bo.setPostingKey(docTypePostingKeyTrans.getPostingKey());
     * }
     * catch (RecordNotFoundException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[] { DocTypePostingKeyTransLabelId.OFFICECODE_AND_TRANSACTIONCODE });
     * }
     * catch (RemoteException ex) {
     * throw new javax.ejb.EJBException(ex.toString());
     * }
     */
    if (bo.getDocumentType() == null || bo.getDocumentType().equals("")) {
      bo.setDocumentType(IConstants.TransactionDocumentType.DEBTOR_PAYMENT);
    }

    if (bo.getPostingKey() == null || bo.getPostingKey().equals("")) {
      bo.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
    }

    try {
      IPostingKey aPostingKey = generalLedgerSetup.retrievePostingKey(bo.getPostingKey(), user);
      bo.setDebitCreditType(aPostingKey.getDebitCredit());
    }
    catch (RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{PostingKeyLabelId.POSTING_KEY});
    }
    catch (RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) {
      Long aNextDocumentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType(), user);
      bo.setDocumentNumber(aNextDocumentNumber);
    }

    ICalculateExchangeRateAmount aCalculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(bo.getAmount(), bo.getAmountInLocalCurrency(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
    bo.setAmount(aCalculateExchangeRateAmount.getAmount());
    //bo.setCurrency(aCalculateExchangeRateAmount.getToCurrency());
    bo.setExchangeRate(aCalculateExchangeRateAmount.getExchangeRate());
    bo.setAmountInLocalCurrency(aCalculateExchangeRateAmount.getAmountLocalCurrency());

    if (!bo.getSubledgerAccount().equals(IConstants.DebtorType.CASH_DEBTOR_VALUE)) {
      try {
        aDebtorAccount = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
        bo.setSubledgerName(aDebtorAccount.getDebtorName());
        bo.setTin(aDebtorAccount.getTaxIdentificationNumber());
        //tml 15 May 2006, BugId: 16902
        bo.setSubledgerOfficeCode(aDebtorAccount.getOfficeCode());
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }
    }
    //Hui Mian, 23/04/2007, bugid: 21678
    else {
      try {
        aDebtorAccount = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
        //tml 15 May 2006, BugId: 16902
        bo.setSubledgerOfficeCode(aDebtorAccount.getOfficeCode());
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }
    }
//    catch (RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }

    /*if (bo.getDiscountAmount() != null && !bo.getDiscountAmount().equals(new Integer(0))) {
      Logger.getInstance().logDebug("ACRManagerBean's bo.getDiscountAmount() 1= " + bo.getDiscountAmount());
      IDebtorPaymentItem boItem = new DebtorPaymentItemValue();
      boItem.setGLAccount(bo.getDiscountGlAccount());
      boItem.setAmount(bo.getDiscountAmount());
      boItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
      bo.getItems().add(0, boItem);
    }*/
		if (bo.getDiscountAmount() != null && !bo.getDiscountAmount().equals(new Integer(0))) {
			bo.setInterOfficePostingIndicator(new Boolean(true));
		}
		
    for (int j = 0; j < bo.getItems().size(); j++) {
      IDebtorPaymentItem item = (IDebtorPaymentItem) bo.getItems().get(j);

      if (item.getSpecialGLIndicator() == null || item.getSpecialGLIndicator().equals("")) {
        try {
          Logger.getInstance().logDebug("ACRManagerBean's item.getGLAccount() = " + item.getGLAccount());
          Logger.getInstance().logDebug("ACRManagerBean's item.getGLAccount() = " + item.getGLAccount());

          if (item.getGLAccount() == null || item.getGLAccount().equals("")) {
            //22 Feb 06 THC Added for BPSB
            //tml 04 July 2006, BugId: 17433
            IDebtorReconAccount debtorReconAccountBO = ars.retrieveDebtorReconAccount(bo.getSubledgerOfficeCode(), item.getSubledgerAccount(), user);

            if (bo.isMultipleReconAccountFlag() != null && bo.isMultipleReconAccountFlag().booleanValue() == true) {
              //IDebtorReconAccount debtorReconAccountBO = ars.retrieveDebtorReconAccount(bo.getOfficeCode(), item.getSubledgerAccount(), user);
              for (int k = 0; k < debtorReconAccountBO.getItems().size(); k++) {
                IDebtorReconAccount debtorReconAccountItem = (IDebtorReconAccount) debtorReconAccountBO.getItems().get(k);
                if (debtorReconAccountItem.getAccountType() != null && debtorReconAccountItem.getAccountType().equals(item.getReconAccountType())) {
                  item.setGLAccount(debtorReconAccountItem.getReconciliationGLAccount());
                }
              }
            }
            else {
              Logger.getInstance().logDebug("bo.getOfficeCode(1) = " + bo.getOfficeCode());
              Logger.getInstance().logDebug("item.getSubledgerAccount() = " + item.getSubledgerAccount());
              ICustomer debtorAccount = retrieveDebtorAccount(bo.getSubledgerOfficeCode(), item.getSubledgerAccount(), user);
              item.setGLAccount(debtorAccount.getReconAccountId());
              //	 karen 8 January 2007 cater for data conversion if the item is cash advance
              if (bo.isConversionIndicator() != null && bo.isConversionIndicator().equals(Boolean.TRUE)) {
                for (int k = 0; k < debtorReconAccountBO.getItems().size(); k++) {
                  IDebtorReconAccount debtorReconAccountItem = (IDebtorReconAccount) debtorReconAccountBO.getItems().get(k);
                  ISpecialGLIndicator specialGLIndicator = generalLedgerSetup.retrieveSpecialGLIndicator(ICMSConnector.IGNORE, item.getTransactionSpecialGLIndicator(), user);
                  item.setGLAccount(specialGLIndicator.getGLAccount());

                }
              }
            }
            item.setTransactionGLAccount(item.getGLAccount());
          }
        }
        catch (RecordNotFoundException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
        }
//        catch (RemoteException ex) {
//          throw new javax.ejb.EJBException(ex.toString());
//        }
      }

      if (item.getSpecialGLIndicator() != null && !item.getSpecialGLIndicator().equals("")) {
        Logger.getInstance().logDebug("SpecialGLIndicator is not null");
        Logger.getInstance().logDebug("item.getSpecialGLIndicator() = " + item.getSpecialGLIndicator());
        try {
          ISpecialGLIndicator specialGLIndicator = generalLedgerSetup.retrieveSpecialGLIndicator(bo.getOfficeCode(), item.getSpecialGLIndicator(), user);
          item.setGLAccount(specialGLIndicator.getGLAccount());
        }
        catch (RecordNotFoundException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLIndicatorLabelId.CODE});
        }
        catch (RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }
      }
      Logger.getInstance().logDebug("pass SpecialGLIndicator");
      Logger.getInstance().logDebug("item.getPostingKey() =" + item.getPostingKey());
      try {
        IPostingKey bPostingKey = generalLedgerSetup.retrievePostingKey(item.getPostingKey(), user);
        //item.setAccountType(bPostingKey.getAccountType());
        item.setDebitCreditType(bPostingKey.getDebitCredit());

        if (item.getApplyIndicator() != null && !item.getApplyIndicator().equals("") && item.getApplyIndicator().booleanValue() == true) {
          if (item.getDebitCreditType().equals(IConstants.DebitCreditType.DEBIT)) {
            item.setDebitCreditType(IConstants.DebitCreditType.CREDIT);
            item.setPostingKey(IConstants.TransactionPostingKey.INCOMING_PAYMENT);
          }
          else {
            item.setDebitCreditType(IConstants.DebitCreditType.DEBIT);
            item.setPostingKey(IConstants.TransactionPostingKey.CASH_ADVANCE);
          }
        }
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{PostingKeyLabelId.POSTING_KEY});
      }
      catch (RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      Logger.getInstance().logDebug("pass postingKey");
      try {
        IDocumentType aDocumentType = generalLedgerSetup.retrieveDocumentType(bo.getDocumentType(), user);
        item.setAccountType(aDocumentType.getAccountType());
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DocumentTypeLabelId.DOCUMENT_TYPE});
      }
      catch (RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }
      Logger.getInstance().logDebug("item.getDocumentType() " + item.getDocumentType());

      //09/03/2006 THC Added to save debtor code to item 0 it is discount item.
      item.setSubledgerAccount(bo.getSubledgerAccount());
      item.setSubledgerName(bo.getSubledgerName());
      item.setTin(bo.getTin());
      //tml 15 May 2006, BugId: 16902
      item.setSubledgerOfficeCode(bo.getSubledgerOfficeCode());
      if (bo.getSubledgerAccount() != null && bo.getSubledgerOfficeCode() == null) {
        ICustomer debtorBo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
        item.setSubledgerOfficeCode(debtorBo.getOfficeCode());
      }
      Logger.getInstance().logDebug("pass mezzanine");

      ICalculateExchangeRateAmount bCalculateExchangeRateAmount = commonFunction.calculateExchangeRateAmount(item.getAmount(), null, bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
      item.setAmount(bCalculateExchangeRateAmount.getAmount());
      item.setAmountInLocalCurrency(bCalculateExchangeRateAmount.getAmountLocalCurrency());
      Logger.getInstance().logDebug("item.getTransactionOfficeCode() : " + item.getTransactionOfficeCode());

      //karen 14 Nov 2006 BugId:18370
      if (item.getTransactionOfficeCode() != null && (!item.getTransactionOfficeCode().equals(bo.getOfficeCode()))) {
        bo.setInterOfficePostingIndicator(new Boolean(true));
        try {
          IOffice office = generalLedgerSetup.retrieveOffice(item.getTransactionOfficeCode(), user);
          String postingKey = null;
          if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
            postingKey = TransactionPostingKey.JOURNAL_DEBIT;
          }
          else {
            postingKey = TransactionPostingKey.JOURNAL_CREDIT;
          }
          Logger.getInstance().logDebug("postingKey :" + postingKey);

          IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), item.getTransactionOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, postingKey, user);

          item.setGLAccount(automaticAccountAssignment.getGlAccount());
          item.setOfficeCode(bo.getOfficeCode());
        }
        catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
      }
    }
  }


  /**
   * Sets the depositToBankValue attribute of the AccountReceivableManagerBean
   * object
   *
   * @param bo The new depositToBankValue value
   * @param user The new depositToBankValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {2CD9A808-E7FA-4F7C-B61F-6CEC1E84A2DE}
   */
  private void setDepositToBankValue(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    IDepositToBankReceipt depositToBankReceiptBO = new DepositToBankReceiptValue();
    IDepositToBankReceipt depositToBankItemBO = new DepositToBankReceiptValue();
    Integer postingPeriod = null;
    Long nextDocumentNumber = null;
    IAutomaticAccountAssignment automaticAccountAssignmentBO = new AutomaticAccountAssignmentValue();
    String bankGLAccount = null;

    try {
      commonFunction = commonFunctionHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    bo.setProcessStatus(ProcessStatus.PARK);
    bo.setHeaderIndicator(Boolean.TRUE);
    bo.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);

    /*
     * postingPeriod = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingDate(), user);
     * if(postingPeriod != null && !postingPeriod.equals("")) {
     * if(postingPeriod.intValue() == 12) {
     * if(bo.getFiscalPeriod() == null || bo.getFiscalPeriod().equals("")) {
     * bo.setFiscalPeriod(postingPeriod);
     * }
     * }
     * else {
     * bo.setFiscalPeriod(postingPeriod);
     * }
     * }
     */
    try {
      if (bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
        bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
      }

		  if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) { 
        nextDocumentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType(), user);
        bo.setDocumentNumber(nextDocumentNumber);
      }
      if (bo.getOfficeCodeOfBankAccount() != null && !bo.getOfficeCodeOfBankAccount().equals("")) {
        bo.setCrossOfficeNumber(bo.getDocumentNumber().toString() + bo.getOfficeCode() + bo.getOfficeCodeOfBankAccount());
      }
      Logger.getInstance().logDebug("bo.getPostingKey() = " + bo.getPostingKey());
      Logger.getInstance().logDebug("bo.getDebitCreditType() = " + bo.getDebitCreditType());
      Logger.getInstance().logDebug("bo.getGLAccount() = " + bo.getGLAccount());

      try {
        AbstractCriteria[] filter = {
            new Criteria(BankDAO.FILTER_BANK_ACCOUNT_TYPE, "=", IConstants.BankAccountType.CURRENT),
            new Criteria(BankDAO.FILTER_CODE, "=", bo.getBankCode())
            };

        List bankList = DAOProxy.list("bank", com.portrade.ipms.afms.ext.icms.ICMSConnector.IGNORE, user, filter);
        if (bankList.size() > 0) {
          IBank bankBO = (IBank) bankList.get(0);
          bankGLAccount = bankBO.getGLAccount();
          Logger.getInstance().logDebug("bank glaccount = " + bankGLAccount);
        }
      }
      catch (java.sql.SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankLabelId.OFFICECODE_AND_COUNTRY_CODE});
				}
      }

      //IOffice officeBO = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);
      //automaticAccountAssignmentBO = generalLedgerSetup.retrieveAutomaticAccountAssignment(officeBO.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.DEPOSIT_TO_BANK, bo.getPostingKey(), user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    List receipts = bo.getReceipts();
    int i = 0;
    BigDecimal amount = new BigDecimal(0);
    String bankInSlipNumber = null;
    //THC added to store the 1st bankinslip number for those payment type = 'C'.
    Logger.getInstance().logDebug("bo.getReceipts().size() = " + bo.getReceipts().size());
    while (i < bo.getReceipts().size()) {
      Logger.getInstance().logDebug("ii = " + i);
      depositToBankReceiptBO = (IDepositToBankReceipt) bo.getReceipts().get(i);
      depositToBankReceiptBO.setOfficeCode(bo.getOfficeCode());
      depositToBankReceiptBO.setFiscalYear(bo.getFiscalYear());
      depositToBankReceiptBO.setDocumentNumber(bo.getDocumentNumber());
      depositToBankReceiptBO.setItemNo(new Integer(i + 1));
      depositToBankReceiptBO.setDocumentType(bo.getDocumentType());
      depositToBankReceiptBO.setAccountType(bo.getAccountType());
      depositToBankReceiptBO.setDocumentDate(bo.getDocumentDate());
      depositToBankReceiptBO.setPostingDate(bo.getPostingDate());
      depositToBankReceiptBO.setCurrency(bo.getCurrency());
      depositToBankReceiptBO.setHeaderIndicator(new Boolean(false));
      depositToBankReceiptBO.setProcessStatus(bo.getProcessStatus());
      depositToBankReceiptBO.setPostingPeriod(bo.getPostingPeriod());
      depositToBankReceiptBO.setCrossOfficeNumber(bo.getCrossOfficeNumber());
      depositToBankReceiptBO.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
      depositToBankReceiptBO.setDebitCreditType(null);
      depositToBankReceiptBO.setReference(null);
      depositToBankReceiptBO.setReferenceType(null);
      depositToBankReceiptBO.setRemark(null);
      depositToBankReceiptBO.setGLAccount(bo.getCollectionOfficerGLAccount());

      //depositToBankReceiptBO.setGLAccount(bo.getGLAccount());
      depositToBankReceiptBO.setAmount(depositToBankReceiptBO.getOrAmount());
      //depositToBankReceiptBO.setSubledgerAccount(depositToBankReceiptBO.getOrDebtorAccount());
      Logger.getInstance().logDebug("depositToBankReceiptBO.getOrPaymentType() = " + depositToBankReceiptBO.getOrPaymentType());

      if (depositToBankReceiptBO.getOrPaymentType() != null && depositToBankReceiptBO.getOrPaymentType().equals(PaymentType.CASH)) {
        amount = amount.add(depositToBankReceiptBO.getOrAmount());
        if (bankInSlipNumber == null) {
          //THC Added 20 Apr 06 for BPSB.
          bankInSlipNumber = depositToBankReceiptBO.getBankInSlipNumber();
        }
        Logger.getInstance().logDebug("2004 thc amount = " + amount);
      }

      Logger.getInstance().logDebug("SystemProfile.get(SystemProfile.OVERRIDE_DTB_FLAG) = " + SystemProfile.get(SystemProfile.OVERRIDE_DTB_FLAG));

      //BugId: 16415 THC 21/03/2006 Add in for BPSB
      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.OVERRIDE_DTB_FLAG))) {
        if (depositToBankReceiptBO.getBankInSlipNumber() == null || depositToBankReceiptBO.getBankInSlipNumber().equals("")) {
          if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.DTB_APPROVAL_FLAG))) {
            depositToBankReceiptBO.setApprovalStatus(IConstants.Approval.PENDING_CODE);
          }
          else {
            depositToBankReceiptBO.setApprovalStatus(IConstants.Approval.APPROVED_CODE);
            // this is to set the default value to afmsDepositToBankReceipt.  Deposit To Bank Approval program will retrieve those approval status = 'P' for approval.
          }
          i++;
          continue;
          // thc 21/03/2006 continue mean if no bank in slip number then no need to generate the gl entry.
        }
        /*else { //thc 16/05/2006 Added to set approvalStatus to approve so that the Deposit To Bank approval program will not retrieve this for approval. [If check box is tick, must enter bank in slip, so as long as bank in slip is entered mean it is approved.)
          depositToBankReceiptBO.setApprovalStatus(IConstants.Approval.APPROVED_CODE);
        } thc 17/05/2006 remark for 16/05/2006 above as no need to setApprovalStatus to approve is there is bank in slip number entered.
          As the approvalStatus is only take into consideration if user uncheck the check box which no bank in slip is entered and this line item is not deposit to bank, only in this case we need to identify whether
          need to set this flag to true or false.  Otherwise if got bank in slip entered, system will continue to generate the glaccountitem for this line item as below.*/
      }

      //Chee Seng 18th Aug 2004, bugId: 7017
      if (depositToBankReceiptBO.getOrPaymentType() == null || !depositToBankReceiptBO.getOrPaymentType().equals(PaymentType.CASH)) {
        //if (depositToBankReceiptBO.getOrPaymentType() != null && depositToBankReceiptBO.getOrPaymentType().equals(PaymentType.CHEQUE)) {
        Logger.getInstance().logDebug("depositToBankReceiptBO.getTransactionId() = " + depositToBankReceiptBO.getTransactionId());
        depositToBankItemBO = new DepositToBankReceiptValue();
        depositToBankItemBO.copyPropertiesFrom(depositToBankReceiptBO);
        depositToBankItemBO.setTransactionId(depositToBankReceiptBO.getTransactionId());

        depositToBankItemBO.setItemNo(new Integer(i + 2));

        /*
        depositToBankItemBO.setOrNumber(depositToBankReceiptBO.getOrNumber());
        depositToBankItemBO.setOrOfficeCode(depositToBankReceiptBO.getOrOfficeCode());
        depositToBankItemBO.setOrFiscalYear(depositToBankReceiptBO.getOrFiscalYear());
        depositToBankItemBO.setOrDocumentNumber(depositToBankReceiptBO.getOrDocumentNumber());
        depositToBankItemBO.setOrPaymentType(depositToBankReceiptBO.getOrPaymentType());
        depositToBankItemBO.setOrPostingDate(depositToBankReceiptBO.getOrPostingDate());
        depositToBankItemBO.setOrDebtorAccount(depositToBankReceiptBO.getOrDebtorAccount());
        depositToBankItemBO.setOrAmount(depositToBankReceiptBO.getOrAmount());
        */
        if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
          depositToBankItemBO.setGLAccount(automaticAccountAssignmentBO.getGlAccount());
        }
        else {
          //Hui Mian, bugid 22033 18/05/2007
          depositToBankItemBO.setGLAccount(bankGLAccount);
          //depositToBankItemBO.setGLAccount(bo.getCollectionOfficerGLAccount());
        }

        depositToBankItemBO.setPostingKey(bo.getPostingKey());
        depositToBankItemBO.setDebitCreditType(null);
        depositToBankItemBO.setAmount(depositToBankReceiptBO.getOrAmount());
        //THC Added for BPSB requirement.
        depositToBankItemBO.setBankInSlipNumber((depositToBankReceiptBO.getBankInSlipNumber()));
        depositToBankItemBO.setReasonCode(depositToBankReceiptBO.getReasonCode());
        //depositToBankItemBO.setAmountInLocalCurrency(depositToBankReceiptBO.getOrAmount());
        bo.getReceipts().add(i + 1, depositToBankItemBO);
        i++;
      }
      i++;
    }

    if (amount.compareTo(new BigDecimal("0")) > 0) {
      depositToBankItemBO = new DepositToBankReceiptValue();
      depositToBankItemBO.copyPropertiesFrom((IDepositToBankReceipt) bo.getReceipts().get(0));
      depositToBankItemBO.setItemNo(new Integer(++i));
      //depositToBankItemBO.setOrNumber(depositToBankReceiptBO.getOrNumber());
      //depositToBankItemBO.setOrOfficeCode(depositToBankReceiptBO.getOrOfficeCode());
      //depositToBankItemBO.setOrFiscalYear(depositToBankReceiptBO.getOrFiscalYear());
      //depositToBankItemBO.setOrDocumentNumber(depositToBankReceiptBO.getOrDocumentNumber());
      depositToBankItemBO.setOrPaymentType(PaymentType.CASH);
      //depositToBankItemBO.setChequeNumber(null);
      //depositToBankItemBO.setOrPostingDate(depositToBankReceiptBO.getOrPostingDate());
      //depositToBankItemBO.setOrDebtorAccount(depositToBankReceiptBO.getOrDebtorAccount());
      //depositToBankItemBO.setOrAmount(depositToBankReceiptBO.getOrAmount());

      if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
        depositToBankItemBO.setGLAccount(automaticAccountAssignmentBO.getGlAccount());
      }
      else {
        //Hui Mian, bugid 22033 18/05/2007
        depositToBankItemBO.setGLAccount(bankGLAccount);
        //depositToBankItemBO.setGLAccount(bo.getCollectionOfficerGLAccount());
      }

      depositToBankItemBO.setPostingKey(bo.getPostingKey());
      //THC 20 Apr 06 Add in for BPSB Requirement.  If don assign bank inslip number, then the DR
      depositToBankItemBO.setBankInSlipNumber(bankInSlipNumber);
      Logger.getInstance().logDebug("setDepositToBankValue 4 reasonCode = " + depositToBankReceiptBO.getReasonCode());
      //depositToBankItemBO.setReasonCode(depositToBankReceiptBO.getReasonCode());
      Logger.getInstance().logDebug("setDepositToBankValue 4 bankInSlipNumber = " + bankInSlipNumber);
      depositToBankItemBO.setAmount(amount);
      depositToBankItemBO.setAmountInLocalCurrency(null);
      //depositToBankItemBO.setAmountInLocalCurrency(amount);
      bo.addReceipt(depositToBankItemBO);
    }
  }


  /**
   * Sets the notesReceivableInvoiceItemValues attribute of the
   * AccountReceivableManagerBean object
   *
   * @param bo The new notesReceivableInvoiceItemValues value
   * @param user The new notesReceivableInvoiceItemValues value
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {9856C74C-014D-44FC-92AD-21B9B0FC2EC7}
   */
  private INotesReceivable setNotesReceivableInvoiceItemValues(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    List invoiceList = new ArrayList();
    for (int i = 0; i < bo.getInvoiceItems().size(); i++) {
      INotesReceivableInvoiceItem item = (INotesReceivableInvoiceItem) bo.getInvoiceItems().get(i);

      IARDocument invoice = null;
      try {
        invoice = retrieveOutstandingInvoicesForNR(bo.getOfficeCode(), item.getInvoiceNumber(), user);
        BigDecimal clearedAmount = invoice.getClearedAmount() == null ? new BigDecimal(0.00) : invoice.getClearedAmount();

        item.setInvoiceAmount(invoice.getAmount().subtract(clearedAmount));
        item.setInvoiceDate(invoice.getDocumentDate());
        item.setInvoiceDueDate(invoice.getDocumentDueDate());
        item.setInvoiceDocumentNumber(invoice.getDocumentNumber());
        item.setInvoiceFiscalYear(invoice.getFiscalYear());
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{item.getInvoiceNumber(), InvoiceLabelId.INVOICE});
      }
    }
    return bo;
  }


  /**
   * Sets the debtorDebitCreditMemoValue attribute of the
   * AccountReceivableManagerBean object
   *
   * @param bo The new debtorDebitCreditMemoValue value
   * @param user The new debtorDebitCreditMemoValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {DD02E1B3-33A9-420B-8192-2D440A2FDA6B}
   */
  private void setDebtorDebitCreditMemoValue(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    AccountReceivableSetup arSetup = null;
    IDebtorDebitCreditMemoItem item = new DebtorDebitCreditMemoItemValue();  
    ICustomer customerBO = new DebtorAccountValue();
    java.sql.Date documentDueDate = null;

    try {
      commonFunction = commonFunctionHome.create();
      arSetup = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    bo.setHeaderIndicator(new Boolean(true));

    if ((com.portrade.ipms.icms.SystemProfile.get(com.portrade.ipms.icms.SystemProfile.DEBTOR_INVOICE_DIRECT_POSTING_FLAG)).equals(Boolean.TRUE.toString())) {
      bo.setProcessStatus(ProcessStatus.POST);
    }
    else {
      bo.setProcessStatus(ProcessStatus.PARK);
    }

    bo.setTaxIndicator(null);

    try {
      //Joseph Lim 4/3/2004
      Logger.getInstance().logDebug("Made Changes");
      customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      Logger.getInstance().logDebug("bo.getOfficeCode() = " + bo.getOfficeCode());
      Logger.getInstance().logDebug("bo.getSubledgerAccount() = " + bo.getSubledgerAccount());
      Logger.getInstance().logDebug("bo.getReconAccountType() = " + bo.getReconAccountType());
      //tml 04 July 2006, BugId: 17433
      ICustomer customerBo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      // karen September 6 2006, BugId: 18141
      Logger.getInstance().logDebug("bo.getTransactionType() = " + bo.getTransactionType());
      //karen 12 Oct 2006 BugId:18550
      if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_DEBIT_NOTES)) {
        /*if (bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
		  bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
		}*/
        if (BudgetActionType.CHECK_AND_EXECUTE.equals(bo.getBudgetActionType())) {
          IOverridingApproval overridingApprovalBO = checkCreditLimit(customerBO, bo.getAmount(), bo.getFiscalYear(), true, null, user);
          BigDecimal overRideAmount = overridingApprovalBO.getAmount();
          Logger.getInstance().logDebug("overRideAmount===" + overRideAmount);
          if (overRideAmount.compareTo(new BigDecimal("0")) != 0) {
            throw new com.portrade.ipms.afms.exceptions.CustomerAccountBalanceNotEnoughException(new Object[]{});
          }
        }
        else if (BudgetActionType.EXECUTE_ONLY.equals(bo.getBudgetActionType())) {
          try {
            DebtorAccount debtorAccount = debtorAccountHome.findByPrimaryKey(new DebtorAccountPK(customerBO.getAccountNumber(), customerBO.getOfficeCode()));

            debtorAccount.setAccountStatus(AccStatus.SUSPENDED);
            debtorAccount.setLastSuspendDate(AFMSUtilities.getCurrentDate());
            debtorAccount.setLastUpdateBy(user.getId());
            debtorAccount.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          }
          catch (javax.ejb.FinderException ex) {
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
          }
          catch (java.rmi.RemoteException ex) {
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
      }
      //16th Sep 2006 Derek BugId: 18323 BEGIN
      else {
        BigDecimal totalAmount = new BigDecimal(0.00);
        if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")
            && bo.getDocumentType() != null && !bo.getDocumentType().equals("") && bo.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_CREDIT_NOTES)){ 
            int itemSize = bo.getItems().size();
            totalAmount = new BigDecimal(0.00);
            for (int i = 0; i < itemSize; i++) {
              IDebtorDebitCreditMemoItem boItem = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
              if (boItem.getInvoiceItemNumber() != null && !boItem.getInvoiceItemNumber().equals("") && boItem.getInvoiceItemNumber().compareTo(new Integer(0)) > 0
                  && boItem.getAmount() != null && !boItem.getAmount().equals("") && boItem.getAmount().compareTo(new BigDecimal(0.00)) > 0) {
                if (boItem.getDebitCreditType().equals(IConstants.DebitCreditType.DEBIT)) {
                  totalAmount = totalAmount.add(boItem.getAmount());
                }
                else {
                  totalAmount = totalAmount.subtract(boItem.getAmount());
                }
              }
            }
            if (totalAmount.compareTo(bo.getAmount()) > 0) {
              new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorDebitCreditMemoItemLabelId.ITEM_AMOUNT, DebtorDebitCreditMemoLabelId.AMOUNT});
            }
            else {
              if (totalAmount.compareTo(new BigDecimal(0.00)) > 0) {
				if (bo.getFullInvoiceAmountFlag() != null && bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)) {
	                bo.setClearedAmount(totalAmount);
				}
              }
            }

          try {
            Logger.getInstance().logDebug("In try setvalue ACR");
            InvoiceItemDAO dao = (InvoiceItemDAO) DAOProxy.getDAO("invoiceItem", user);
            Logger.getInstance().logDebug("bo.getInvoiceNumber() = " + bo.getInvoiceNumber());
            List invoiceItemList = dao.listInvoiceNumberSP(bo.getInvoiceNumber());
            
            if(invoiceItemList.size() <= 0){
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
            }
            else{
            	Logger.getInstance().logDebug("in Else");
              for (int i = 0; i < invoiceItemList.size(); i++) {
              IInvoiceItem invoiceItem = (IInvoiceItem) invoiceItemList.get(0);
              if(bo.getFullInvoiceAmountFlag() != null && bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)){
                if(bo.getAmount().compareTo(totalAmount) == 0 && totalAmount.compareTo(new BigDecimal(0.00)) > 0){
                  bo.setClearedRefFiscalYear(invoiceItem.getFiscalYear());
                  bo.setClearedRefDocumentNumber(invoiceItem.getDocumentNumber());
                }
              }
              bo.setSCN(invoiceItem.getScn());
              }
            }
          }                
          catch (java.sql.SQLException ex) {
            if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
              throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
            }
            else {
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
            }
          }
        }
        else {
          bo.setClearedRefFiscalYear(null);
          bo.setClearedRefDocumentNumber(null);
        }
      }
            /*Logger.getInstance().logDebug("in setvalue ACR");
            InvoiceDAO dao = (InvoiceDAO) DAOProxy.getDAO("invoice", user);
            //karen 23 Oct 2006 BugId: 18818, office code cannot be included because invoice number lookup filter without office code
            //List invoiceList = dao.findByOfficeCodeInvoiceNumber(bo.getOfficeCode(), bo.getInvoiceNumber());
            List invoiceList = dao.listInvoiceNumber(null, null, bo.getInvoiceNumber(), null);

            if (invoiceList.size() <= 0) {
              Logger.getInstance().logDebug("in invoiceList.size() <=0");
            	DebtorDebitCreditMemoDAO debitNoteDao = (DebtorDebitCreditMemoDAO) DAOProxy.getDAO("debtorDebitCreditMemo", user);
            	
							List debitNoteList = debitNoteDao.listDebitNoteNumber(null, null, bo.getInvoiceNumber(), null);
							
							if (debitNoteList.size() <= 0) {
                Logger.getInstance().logDebug("in debitNoteList.size() <=0");
								throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
							}
							else {
                
									IDebtorDebitCreditMemo debitNote = (IDebtorDebitCreditMemo) debitNoteList.get(0);
                  if (bo.getFullInvoiceAmountFlag() != null && bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)) {
                    if (bo.getAmount().compareTo(totalAmount) == 0 && totalAmount.compareTo(new BigDecimal(0.00)) > 0) {
	   							 	 bo.setClearedRefFiscalYear(debitNote.getFiscalYear());
		  							 bo.setClearedRefDocumentNumber(debitNote.getDocumentNumber());
                    }
                  }
                  bo.setSCN(debitNote.getSCN());
                }
							}
              else {
                IARDocument invoice = (IARDocument) invoiceList.get(0);
                if (bo.getFullInvoiceAmountFlag() != null && bo.getFullInvoiceAmountFlag().equals(Boolean.TRUE)) {
                  if (bo.getAmount().compareTo(totalAmount) == 0 && totalAmount.compareTo(new BigDecimal(0.00)) > 0) {
                    bo.setClearedRefFiscalYear(invoice.getFiscalYear());
                    bo.setClearedRefDocumentNumber(invoice.getDocumentNumber());
                  }
                }
                bo.setSCN(invoice.getSCN());
              }*/
            
      Logger.getInstance().logDebug("bo.getSCN == " + bo.getSCN());
      Logger.getInstance().logDebug("bo.getCostCenterOfficeCode = " + bo.getCostCenterOfficeCode());
      //16th Sep 2006 Derek BugId: 18323 END

      if ((com.portrade.ipms.icms.SystemProfile.get(com.portrade.ipms.icms.SystemProfile.MULTIPLE_RECON_ACCOUNT_FLAG)).equals(Boolean.TRUE.toString())) {
        //Chee Seng 13th Aug 2004, bugId: 6849
        //try {
        //tml 04 July 2006, BugId: 17433
        IDebtorReconAccount debtorReconAccountBO = arSetup.retrieveDebtorReconAccountByAccountType(customerBo.getOfficeCode(), bo.getSubledgerAccount(), bo.getReconAccountType(), user);

        /*
          AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_ACCOUNT_TYPE, "=", bo.getReconAccountType()),
              new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_ACCOUNT_NUMBER, "=", bo.getSubledgerAccount()),
              new Criteria(com.portrade.ipms.afms.dao.DebtorReconAccountDAO.FILTER_OFFICE_CODE, "=", bo.getOfficeCode())
              };
          java.util.List results = DAOProxy.list("DebtorReconAccount", user, filter);
          if (results.size() < 1) {
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorReconAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER_AND_ACCOUNT_TYPE});
          }
          IDebtorReconAccount debtorReconAccountBO = (IDebtorReconAccount) results.get(0);
          */
        //DebtorReconAccount debtorReconAccount = debtorReconAccountHome.findByPrimaryKey(new DebtorReconAccountPK(bo.getOfficeCode(), bo.getSubledgerAccount(), bo.getReconAccountType()));
        if (bo.getPaymentTerm() == null) {
          bo.setPaymentTerm(debtorReconAccountBO.getPaymentType());
        }
        if (bo.getGLAccount() == null) {
          bo.setGLAccount(debtorReconAccountBO.getReconciliationGLAccount());
        }
        /* }
        catch (java.sql.SQLException ex) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorReconAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER_AND_ACCOUNT_TYPE});
        }*/
      }
      else {
        if (bo.getGLAccount() == null) {
          bo.setGLAccount(customerBO.getReconAccountId());
        }
      }

      if (bo.getPaymentTerm() != null && bo.getPaymentTerm().length() > 0) {
        java.sql.Date entryDate = java.sql.Date.valueOf(String.valueOf(AFMSUtilities.getCalendar().get(Calendar.YEAR)) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.MONTH) + 1) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.DATE)));
        documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), entryDate, bo.getDocumentDate(), bo.getPostingDate(), user);
        bo.setDocumentDueDate(documentDueDate);
      }
      Logger.getInstance().logDebug("After Changes");

      /*
    if ((com.portrade.ipms.icms.SystemProfile.get(com.portrade.ipms.icms.SystemProfile.MULTIPLE_RECON_ACCOUNT_FLAG)).equals(Boolean.FALSE.toString())){
        java.sql.Date entryDate = java.sql.Date.valueOf(String.valueOf(AFMSUtilities.getCalendar().get(Calendar.YEAR)) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.MONTH) + 1) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.DATE)));
        java.sql.Date documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), entryDate, bo.getDocumentDate(), bo.getPostingDate(), user);
        bo.setDocumentDueDate(documentDueDate);
    }*/
      /*
       * Jason 19th Nov 2003 FIX ME
       * if(bo.getCreditNoteNumber() != null && !bo.getCreditNoteNumber().equals("")) {
       * AbstractCriteria[] filter = { new Criteria(DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber())};
       * ddcmList = DAOProxy.list("DebtorDebitCreditMemo", user, filter);
       * if(ddcmList.size() > 0) {
       * throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[] { IConstants.DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER } );
       * }
       * }
       * else {
       * boolean notSame = false;
       * while !(notSame) {
       * generateDebitCreditNoteNumber(bo, user);
       * AbstractCriteria[] filter = { new Criteria(DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber())};
       * ddcmList = DAOProxy.list("DebtorDebitCreditMemo", user, filter);
       * if (ddcmList.size() == 0) {
       * notSame = true;
       * }
       * }
       * }
       */
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * if(bo.getFiscalYear() == null || bo.getFiscalYear().equals("")) {
     * try {
     * bo.setFiscalYear(commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));
     * }
     * catch (RecordNotFoundException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[] { ex.getMessage() });
     * }
     * catch (java.rmi.RemoteException ex) {
     * throw new javax.ejb.EJBException(ex.toString());
     * }
     * }
     * if(bo.getPostingPeriod() == null || bo.getPostingPeriod().compareTo(new Integer(0)) == 0) {
     * try {
     * Integer postingPeriod = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingDate(), user);
     * if(postingPeriod != null && !postingPeriod.equals("")) {
     * if(postingPeriod.intValue() == 12) {
     * if(bo.getPostingPeriod() == null || bo.getPostingPeriod().equals("")) {
     * bo.setPostingPeriod(postingPeriod);
     * }
     * }
     * }
     * else {
     * bo.setPostingPeriod(postingPeriod);
     * }
     * }
     * catch (RecordNotFoundException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[] { ex.getMessage() });
     * }
     * catch (java.rmi.RemoteException ex) {
     * throw new javax.ejb.EJBException(ex.toString());
     * }
     * }
     * if(bo.getDocumentNumber() == null) {
     * try {
     * bo.setDocumentNumber(commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType()));
     * }
     * catch (java.rmi.RemoteException ex) {
     * throw new javax.ejb.EJBException(ex.toString());
     * }
     * }
     */
    calculateTaxForDebtorCreditNoteItem(bo, user);

    for (int i = 0; i < bo.getItems().size(); i++) {
      item = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);
      item.setOfficeCode(bo.getOfficeCode());
      item.setFiscalYear(bo.getFiscalYear());
      item.setItemNo(new Integer(i + 1));
      item.setDocumentType(bo.getDocumentType());
      item.setDocumentDate(bo.getDocumentDate());
      item.setPostingDate(bo.getPostingDate());
      item.setCurrency(bo.getCurrency());
      //Chee Seng 08th Dec 2004, bugId: 8866
      item.setHeaderIndicator(Boolean.FALSE);
      item.setProcessStatus(bo.getProcessStatus());
      item.setPostingPeriod(bo.getPostingPeriod());
			item.setDocumentNumber(bo.getDocumentNumber());
			
      if (item.getParentItemNumber() == null || item.getParentItemNumber().compareTo(new Integer(0)) == 0) {
        item.setParentItemNumber(null);
        item.setTaxIndicator(null);
      }

      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_TAX_CODE_FLAG))) {
        if (item.getTaxCode() != null && !item.getTaxCode().equals("")) {
          //Chee Seng 08th Dec 2004, bugId: 8866
          //bo.setTaxIndicator(Boolean.TRUE);
        }

      }
      Logger.getInstance().logDebug("set value = item.getCostCenterOfficeCode() = " + item.getCostCenterOfficeCode());
      if (item.getCostCenterOfficeCode() != null && !item.getCostCenterOfficeCode().equals("")) {
        if (!bo.getOfficeCode().equals(item.getCostCenterOfficeCode())) {
          bo.setDirectPostingJournalFlag(new Boolean(true));
          bo.setInterOfficePostingIndicator(new Boolean(true));
        }
      }
      //karen 18 January 2007 BugId: 20261
      if (bo.isConversionIndicator() != null && bo.isConversionIndicator().equals(Boolean.TRUE)) {
        if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_DEBIT_NOTES)) {
          item.setDebitCreditType(DebitCreditType.CREDIT);
        }
        else {
          item.setDebitCreditType(DebitCreditType.DEBIT);
        }
      }

    }
    // set Header to Debit if it is a Debit Note
    if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_DEBIT_NOTES)) {
      bo.setDebitCreditType(DebitCreditType.DEBIT);
    }
  }


  /**
   * Sets the staffAdvanceValue attribute of the AccountReceivableManagerBean
   * object
   *
   * @param bo The new staffAdvanceValue value
   * @param user The new staffAdvanceValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {0B4BBB32-BA39-411E-A830-2378F633BA5D}
   */
  private void setStaffAdvanceValue(IStaffAdvance bo, IUser user) throws AFMSException {
    AccountPayableManager acp = null;
    CommonFunction cf = null;
    GeneralLedgerSetup glSetup = null;
    AccountReceivableSetup ars = null;
    try {
      acp = accountPayableHome.create();
      cf = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
      ars = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * 1. Derive GL Account for Debtor or Special GL Indicator if Special GL Indicator has value.
     * 2. Derive Debtor Name and Tin if they are null
     * The purpose of having this code here is to display the proper and accurate error message
     */
    ICustomer debtor = new DebtorAccountValue();
    try {
      debtor = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      bo.setAdvanceGLAccount(debtor.getReconAccountId());
      if (bo.getSubledgerName() == null) {
        bo.setSubledgerName(debtor.getDebtorName());
        bo.setTin(debtor.getTaxIdentificationNumber());
        //tml 15 May 2006, BugId: 16902
        bo.setSubledgerOfficeCode(debtor.getOfficeCode());
      }
    }
    catch (RecordNotFoundException ex) {
      throw new RecordNotFoundException(new Object[]{StaffAdvanceLabelId.DEBTOR_CODE});
    }
    try {
      if (bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) {
        ISpecialGLIndicator glIndicator = glSetup.retrieveSpecialGLIndicator(ICMSConnector.IGNORE, bo.getSpecialGLIndicator(), user);
        bo.setAdvanceGLAccount(glIndicator.getGLAccount());
        //bo.setReconAccountType(glIndicator.getReconAccountType());
      }
    }
    catch (RecordNotFoundException ex) {
      throw new RecordNotFoundException(new Object[]{GLIndicatorLabelId.GL_INDICATOR});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      /*
       * Get Chart of Account for the selected office
       */
      IOffice office = (IOffice) glSetup.retrieveOffice(bo.getOfficeCode(), user);
      bo.setCoa(office.getCOA());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    for (int i = 0; i < bo.getItems().size(); i++) {
      IStaffAdvanceBudgetItem budgetItem = (IStaffAdvanceBudgetItem) bo.getItems().get(i);
      try {
        if (budgetItem.getCostCenterId() != null && !budgetItem.getCostCenterId().equals("")) {
          ICostCenter costCenter = glSetup.retrieveResponsibleCenter(budgetItem.getCostCenterId(), user);
          budgetItem.setCostCenterOfficeCode(costCenter.getOfficeCode());
        }
        else {
          budgetItem.setCostCenterOfficeCode(bo.getOfficeCode());
        }
        if (budgetItem.getAmountInLocalCurrency() == null && budgetItem.getAmount() != null && bo.getExchangeRate() != null) {
          budgetItem.setAmountInLocalCurrency(budgetItem.getAmount().multiply(bo.getExchangeRate()));
        }
      }
      catch (java.rmi.RemoteException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.OFFICE_CODE});
      }
    }
  }


  /**
   * Sets the staffAdvanceItemValue attribute of the
   * AccountReceivableManagerBean object
   *
   * @param bo The new staffAdvanceItemValue value
   * @param user The new staffAdvanceItemValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {8EC5EE1F-AE8F-49B0-88FB-B52EFB3F46DB}
   */
  private void setStaffAdvanceItemValue(IStaffAdvance bo, IUser user) throws AFMSException {

    GeneralLedgerSetup glSetup = null;
    try {
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    /*
     * Calculate amount in local currency for budget items
     */
    for (int i = 0; i < bo.getItems().size(); i++) {
      IStaffAdvanceBudgetItem budgetItem = (IStaffAdvanceBudgetItem) bo.getItems().get(i);
      budgetItem.setAmountInLocalCurrency(budgetItem.getAmount().multiply(bo.getExchangeRate()));
    }
  }


  /**
   * Sets the interOfficeCollectionValue attribute of the
   * AccountReceivableManagerBean object
   *
   * @param bo The new interOfficeCollectionValue value
   * @param user The new interOfficeCollectionValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {0104D33A-B7AD-44AA-A39F-1FC51E79D750}
   */
  private void setInterOfficeCollectionValue(IInterOfficeCollection bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      bo.setFiscalYear(cf.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user));

      if (bo.getDebtorCode() != null && !bo.getDebtorCode().equals("")) {
        bo.setDocumentType(TransactionDocumentType.DEBTOR_PAYMENT);
        bo.setCrossOfficeDocumentType(TransactionDocumentType.DEBTOR_PAYMENT);
      }
      else {
        bo.setDocumentType(TransactionDocumentType.JOURNAL);
        bo.setCrossOfficeDocumentType(TransactionDocumentType.JOURNAL);
      }

      bo.setDebitPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
      bo.setCreditPostingKey(TransactionPostingKey.JOURNAL_CREDIT);

      /*
       * Jason 07th Aug 2003
       * if ((bo.getDebtorName() == null) || bo.getDebtorName().equals("")) {
       * try {
       * ICustomer debtorAccount = DebtorAccount(bo.getCrossOfficeCode(), bo.getDebtorCode(), user);
       * bo.setDebtorName(debtorAccount.getDebtorName());
       * bo.setTin(debtorAccount.getTaxIdentificationNumber());
       * }
       * catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
       * sessionContext.setRollbackOnly();
       * throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[] { bo.getDebtorCode(), DebtorAccountLabelId.DEBTOR_ACCOUNT });
       * }
       * }
       */
	   if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) { 
      bo.setDocumentNumber(cf.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentType(), user));
	   }
      bo.setCrossOfficeDocumentNumber(cf.getNextDocumentNumber(bo.getCrossOfficeCode(), bo.getFiscalYear(), bo.getCrossOfficeDocumentType(), user));

      // generate receipt number
      try {
        String invoicePrefix = null;
        if (bo.getInvoiceNumber() != null) {
          try {
            List invoiceList = new java.util.ArrayList(invoiceHome.findByOfficeCodeInvoiceNumber(bo.getCrossOfficeCode(), bo.getInvoiceNumber()));

            if (invoiceList.size() > 0) {
              Invoice invoiceMaster = (Invoice) invoiceList.get(0);
              //Chee Seng 07th June 2005, bugId: 10296
              List invoiceGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByDocumentNumber(invoiceMaster.getOfficeCode(), invoiceMaster.getFiscalYear(), invoiceMaster.getDocumentNumber()));
              for (int i = 0; i < invoiceGLAccountItemList.size(); i++) {
                GLAccountItem invoice = (GLAccountItem) invoiceGLAccountItemList.get(i);
                if (invoice.getHeaderIndicator() != null && invoice.getHeaderIndicator().booleanValue()) {
                  bo.setInvoiceAmount(invoice.getAmount());
                  bo.setCrossOfficeCostCenterId(invoice.getCostCenterId());
                  bo.setTaxIndicator(invoice.getTaxIndicator());

                  // for clear invoice purpose
                  bo.setId(invoice.getId());

                  /*
                   * Jason 15th Oct 2003
                   * if ((invoice.isTaxIndicator() != null) && invoice.isTaxIndicator().booleanValue()) {
                   * bo.setTaxIndicator(invoice.isTaxIndicator());
                   * invoicePrefix = ICMSConnector.getDocumentType(user.getIcmsSession(), "RV");
                   * } else {
                   * bo.setTaxIndicator(new Boolean(false));
                   * invoicePrefix = ICMSConnector.getDocumentType(user.getIcmsSession(), "RE");
                   * }
                   */
                  if ((invoice.getTaxIndicator() != null) && invoice.getTaxIndicator().booleanValue()) {
                    bo.setTaxIndicator(invoice.getTaxIndicator());
                    invoicePrefix = ICMSConnector.getDocumentType(user.getIcmsSession(), IConstants.Prefix.RV);
                  }
                  else {
                    bo.setTaxIndicator(new Boolean(false));
                    invoicePrefix = ICMSConnector.getDocumentType(user.getIcmsSession(), IConstants.Prefix.RE);
                  }
                }
              }
            }
            else {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{InterOfficeCollectionLabelId.CROSS_OFFICE_CODE_AND_INVOICE_NUMBER_AND_DEBTOR_CODE, InvoiceLabelId.INVOICE});
            }
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{InterOfficeCollectionLabelId.CROSS_OFFICE_CODE_AND_INVOICE_NUMBER_AND_DEBTOR_CODE, InvoiceLabelId.INVOICE});
          }
        }
        else {
          // invoice Number not entered
          bo.setTaxIndicator(null);
          // Jason 15th Oct 2003 invoicePrefix = ICMSConnector.getDocumentType(user.getIcmsSession(), "RE");
          invoicePrefix = ICMSConnector.getDocumentType(user.getIcmsSession(), IConstants.Prefix.RE);
        }
        java.util.Calendar calendar = com.portrade.ipms.afms.util.AFMSUtilities.getCalendar();
        bo.setReceiptNumber(ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), invoicePrefix, bo.getOfficeCode(), String.valueOf(calendar.get(Calendar.MONTH) + 1), String.valueOf(calendar.get(Calendar.YEAR)), null));
        if (bo.getReceiptNumber() == null) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{InterOfficeCollectionLabelId.RECEIPT});
        }
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
      String sDocumentNumber = bo.getDocumentNumber().toString();
      while (sDocumentNumber.length() < 10) {
        sDocumentNumber = "0" + sDocumentNumber;
      }
      bo.setCrossOfficeNumber(sDocumentNumber + bo.getOfficeCode() + bo.getCrossOfficeCode());

      ICalculateExchangeRateAmount exchangeRate = cf.calculateExchangeRateAmount(bo.getAmount(), bo.getAmountInLocalCurrency(), bo.getExchangeRate(), bo.getCurrency(), bo.getCrossOfficeCode(), bo.getDocumentDate(), user);
      bo.setAmount(exchangeRate.getAmount().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION));
      bo.setCurrency(exchangeRate.getToCurrency());
      bo.setExchangeRate(exchangeRate.getExchangeRate().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION));
      bo.setAmountInLocalCurrency(exchangeRate.getAmountLocalCurrency().setScale(IConstants.ROUNDING_SCALE.AMOUNT, IConstants.ROUNDING_MODE.DIVISION));
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
  }


  /**
   * @param bo The new nonDebtorPaymentValue value
   * @param user The new nonDebtorPaymentValue value
   * @exception AFMSException Description of the Exception
   * @modelguid {4E6CC29A-1F56-405D-9EC1-9343A6ABC782}
   */
  private void setNonDebtorPaymentValue(INonDebtorPayment bo, IUser user) throws AFMSException {

    GeneralLedgerSetup glSetup = null;
    CommonFunction commonFunction = null;
    List costCenterList = new ArrayList();

    try {
      glSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

	Logger.getInstance().logDebug("Inside setNonDebtorPaymentValue--->");
	Logger.getInstance().logDebug("debtorCategory : " + bo.getDebtorCategory());
    try {
      bo.setDocumentType(IConstants.TransactionDocumentType.NON_DEBTOR_PAYMENT);
      bo.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);

      if ((bo.getDebitCreditType() == null) || (bo.getDebitCreditType().equals(""))) {
        IPostingKey postingKey = glSetup.retrievePostingKey(bo.getPostingKey(), user);
        bo.setDebitCreditType(postingKey.getDebitCredit());
      }

      ICalculateExchangeRateAmount calcExch = commonFunction.calculateExchangeRateAmount(bo.getAmount(), bo.getAmountInLocalCurrency(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
      bo.setAmount(calcExch.getAmount());
      bo.setAmountInLocalCurrency(calcExch.getAmountLocalCurrency());
      bo.setExchangeRate(calcExch.getExchangeRate());

      bo.setInterOfficePostingIndicator(Boolean.FALSE);

      com.portrade.ipms.afms.dao.CostCenterDAO dao = (com.portrade.ipms.afms.dao.CostCenterDAO) DAOProxy.getDAO("costCenter", user);

      Iterator iterator = bo.getItems().iterator();
      while (iterator.hasNext()) {
        INonDebtorPaymentItem boItem = (INonDebtorPaymentItem) iterator.next();

        // might occur the cost center that belongs to the other office code
        // find the different office code
        if (boItem.getCostCenterId() != null && !boItem.getCostCenterId().equals("")) {

          if (boItem.getDebitCreditType().equals(DebitCreditType.CREDIT)) {
            boItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
          }
          else {
            boItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          }

          boItem.setTransactionGLAccount(boItem.getGLAccount());
          boItem.setTransactionCostCenterId(boItem.getCostCenterId());
          Logger.getInstance().logDebug("item.getDifferentOfficeGLAccount()====" + boItem.getTransactionGLAccount());
          Logger.getInstance().logDebug("item.getDifferentOfficeCostCenterId()====" + boItem.getTransactionCostCenterId());
          if (dao != null) {
            AbstractCriteria[] filter = {
                new Criteria(com.portrade.ipms.afms.dao.CostCenterDAO.FILTER_COSTCENTERID, "=", boItem.getCostCenterId()),
                };

            java.util.List results = DAOProxy.list("costCenter", user, filter);
            if (results.size() > 0) {
              ICostCenter costCenter = (ICostCenter) results.get(0);
              boItem.setTransactionOfficeCode(costCenter.getOfficeCode());
            }

            if (!bo.getOfficeCode().equals(boItem.getTransactionOfficeCode())) {
              //directPostingJournalFlag is use to determine whether the journal is require
              bo.setDirectPostingJournalFlag(Boolean.TRUE);
              bo.setInterOfficePostingIndicator(Boolean.TRUE);
              boItem.setInterOfficePostingIndicator(Boolean.TRUE);
              boItem.setCostCenterId(null);
              try {
                IOffice office = glSetup.retrieveOffice(boItem.getTransactionOfficeCode(), user);

                IAutomaticAccountAssignment automaticAccountAssignment = glSetup.retrieveAutomaticAccountAssignment(office.getCOA(), boItem.getTransactionOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, boItem.getPostingKey(), user);

                boItem.setGLAccount(automaticAccountAssignment.getGlAccount());
              }
              catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
                sessionContext.setRollbackOnly();
                throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
              }
            }
          }
          else {
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
          }
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NonDebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
  }



  /**
   * Gets the cargoAccrualAmount attribute of the AccountReceivableManagerBean
   * object
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return The cargoAccrualAmount value
   * @exception AFMSException Description of the Exception
   * @modelguid {B428BAFB-84DA-4B74-893A-005416B3F177}
   */
  private BigDecimal getCargoAccrualAmount(ICustomer bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    BigDecimal cargoAccrualAmt = ICMSConnector.getCargoAccrualAmount(user.getIcmsSession(), bo.getId());
    return cargoAccrualAmt;
  }


  /**
   * @param invoiceItemListdetails Description of the Parameter
   * @modelguid {07FFC6CF-CAA8-4EB7-B846-9D8DD7D4F58C}
   */
  private void sortInvoiceItems(List invoiceItemListdetails) {
    Collections.sort(invoiceItemListdetails,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof IInvoiceItem && o2 instanceof IInvoiceItem) {
                IInvoiceItem d1 = (IInvoiceItem) o1;
                IInvoiceItem d2 = (IInvoiceItem) o2;
                if (d1.getCostCenterOfficeCode() != null && !d1.getCostCenterOfficeCode().equals("") && d2.getCostCenterOfficeCode() != null && !d2.getCostCenterOfficeCode().equals("")) {
                  returnValue = d1.getCostCenterOfficeCode().compareTo(d2.getCostCenterOfficeCode());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * @param debitCreditItemListdetails Description of the Parameter
   * @modelguid {AE6EF085-FC46-4FA1-936D-E4F1BF66CC7F}
   */
  private void sortDebitCreditItems(List debitCreditItemListdetails) {
    Collections.sort(debitCreditItemListdetails,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof IDebtorDebitCreditMemoItem && o2 instanceof IDebtorDebitCreditMemoItem) {
                IDebtorDebitCreditMemoItem d1 = (IDebtorDebitCreditMemoItem) o1;
                IDebtorDebitCreditMemoItem d2 = (IDebtorDebitCreditMemoItem) o2;
                if (d1.getCostCenterOfficeCode() != null && !d1.getCostCenterOfficeCode().equals("") && d2.getCostCenterOfficeCode() != null && !d2.getCostCenterOfficeCode().equals("")) {
                  returnValue = d1.getCostCenterOfficeCode().compareTo(d2.getCostCenterOfficeCode());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * @param debtorPaymentItemListdetails Description of the Parameter
   * @modelguid {BB6814D8-EDB9-4CC9-81EC-7C6EE1A09E13}
   */
  private void sortDebtorPaymentItems(List debtorPaymentItemListdetails) {
    Collections.sort(debtorPaymentItemListdetails,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof IDebtorPaymentItem && o2 instanceof IDebtorPaymentItem) {
                IDebtorPaymentItem d1 = (IDebtorPaymentItem) o1;
                IDebtorPaymentItem d2 = (IDebtorPaymentItem) o2;
                if (d1.getTransactionOfficeCode() != null && !d1.getTransactionOfficeCode().equals("") && d2.getTransactionOfficeCode() != null && !d2.getTransactionOfficeCode().equals("")) {
                  returnValue = d1.getTransactionOfficeCode().compareTo(d2.getTransactionOfficeCode());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * @param clearingTransactionItemListdetails Description of the Parameter
   * @modelguid {56C609B7-B181-4987-A218-DAC17724F93A}
   */
  private void sortClearingTransactionItems(List clearingTransactionItemListdetails) {
    Collections.sort(clearingTransactionItemListdetails,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof IClearingTransactionItem && o2 instanceof IClearingTransactionItem) {
                IClearingTransactionItem d1 = (IClearingTransactionItem) o1;
                IClearingTransactionItem d2 = (IClearingTransactionItem) o2;
                if (d1.getTransactionOfficeCode() != null && !d1.getTransactionOfficeCode().equals("") && d2.getTransactionOfficeCode() != null && !d2.getTransactionOfficeCode().equals("")) {
                  returnValue = d1.getTransactionOfficeCode().compareTo(d2.getTransactionOfficeCode());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {BB7DFC3B-F715-4837-9EDE-944D3BE17F91}
   */
  private void validateCreateSurchargeInvoiceItem(com.portrade.ipms.afms.ISurchargeInvoiceItem bo, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {D500696F-EEEF-46E3-A9FF-CC76D731559C}
   */
  private void validateSurchargeInvoiceItem(com.portrade.ipms.afms.ISurchargeInvoiceItem bo, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {3F769567-EB5E-42E9-8C94-75D03ADB9F69}
   */
  private void validateCreateSurchargeInvoice(com.portrade.ipms.afms.ISurchargeInvoice bo, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {D886970A-0645-4485-9963-6C923EEE55FD}
   */
  private void validateSurchargeInvoice(com.portrade.ipms.afms.ISurchargeInvoice bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    if (bo.getInvoiceNumber() == null) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.INVOICE_NUMBER});
    }
  }


  /**
   * Description of the Method
   *
   * @param item Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {028398D5-1AF8-435F-8C08-AADABC36E853}
   */
  private List createAdditionalGLAccountItem(IAbstractGLAccountItem item, IUser user) throws AFMSException {
    List glAccountItemList = new ArrayList();
    String glAccount = null;
    AccountReceivableSetup ars = null;

    try {
      ars = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    Logger.getInstance().logDebug("item.getReconAccountType() ===" + item.getReconAccountType());
    try {
      AbstractCriteria[] filter = {
          new Criteria(GLIndicatorDAO.FILTER_RECON_ACCOUNT_TYPE, "=", item.getReconAccountType())
          };
      List glIndicatorList = DAOProxy.list("gLIndicator", user, filter);
      if (glIndicatorList.size() == 0) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLIndicatorLabelId.RECON_ACCOUNT_TYPE});
      }
      glAccount = ((ISpecialGLIndicator) glIndicatorList.get(0)).getGLAccount();
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLIndicatorLabelId.RECON_ACCOUNT_TYPE});
			}
    }

    //  add the debit item into bo
    IAbstractGLAccountItem abstractGLAccountItemBO = new AbstractGLAccountItemValue();
    //abstractGLAccountItemBO.copyPropertiesFrom(item);
    abstractGLAccountItemBO.setOfficeCode(item.getOfficeCode());
    abstractGLAccountItemBO.setFiscalYear(item.getFiscalYear());
    abstractGLAccountItemBO.setDocumentNumber(item.getDocumentNumber());
    abstractGLAccountItemBO.setItemNo(new Integer(item.getItemNo().intValue() + 1));
    abstractGLAccountItemBO.setAccountType(item.getAccountType());
    abstractGLAccountItemBO.setDocumentType(item.getDocumentType());
    abstractGLAccountItemBO.setDocumentDate(item.getDocumentDate());
    abstractGLAccountItemBO.setDebitCreditType(DebitCreditType.DEBIT);
    abstractGLAccountItemBO.setPostingKey(TransactionPostingKey.JOURNAL_DEBIT);
    abstractGLAccountItemBO.setPostingPeriod(item.getPostingPeriod());
    abstractGLAccountItemBO.setPostingDate(item.getPostingDate());
    abstractGLAccountItemBO.setProcessStatus(item.getProcessStatus());
    abstractGLAccountItemBO.setCurrency(item.getCurrency());
    abstractGLAccountItemBO.setExchangeRate(item.getExchangeRate());
    abstractGLAccountItemBO.setHeaderIndicator(new Boolean(false));
    abstractGLAccountItemBO.setAmount(item.getAmount());
    abstractGLAccountItemBO.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
    abstractGLAccountItemBO.setReconAccountType(item.getReconAccountType());
    abstractGLAccountItemBO.setGLAccount(glAccount);
    abstractGLAccountItemBO.setConversionIndicator(item.isConversionIndicator());
    //abstractGLAccountItemBO.setClearedRefDocumentNumber(null);
    //abstractGLAccountItemBO.setClearedRefFiscalYear(null);

//    if (item.getSpecialGLIndicator() != null && !item.getSpecialGLIndicator().equals("")) {
//      try {
//        AccountPayableManager accountPayableManager = null;
//        accountPayableManager = accountPayableHome.create();
//        ISpecialGLIndicator specialGLIndicatorBO = accountPayableManager.retrieveSpecialGLIndicator(item.getOfficeCode(), item.getSpecialGLIndicator(), user);
//        abstractGLAccountItemBO.setGLAccount(specialGLIndicatorBO.getGLAccount());
//        abstractGLAccountItemBO.setReconAccountType(specialGLIndicatorBO.getReconAccountType());
//      }
//      catch (javax.ejb.CreateException ex) {
//        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
//      }
//      catch (java.rmi.RemoteException ex) {
//        throw new javax.ejb.EJBException(ex.toString());
//      }
//    }
//    else {
//      try {
//        Logger.getInstance().logDebug("bbbbbbbbbbbbbbbbb");
//        Logger.getInstance().logDebug("item.getReconAccountType() " + item.getReconAccountType());
//        Logger.getInstance().logDebug("item.getOfficeCode() " + item.getOfficeCode());
//        GeneralLedgerManager generalLedgerManager = null;
//        generalLedgerManager = generalLedgerManagerHome.create();
//        IDebtorReconAccountType debtorReconAccountTypeBO = generalLedgerManager.retrieveDebtorReconAccountType(item.getOfficeCode(), item.getReconAccountType(), user);
//        abstractGLAccountItemBO.setGLAccount(debtorReconAccountTypeBO.getReconciliationGLAccount());
//        Logger.getInstance().logDebug("debtorReconAccountTypeBO.getReconciliationGLAccount() " + debtorReconAccountTypeBO.getReconciliationGLAccount());
//        abstractGLAccountItemBO.setReconAccountType(item.getReconAccountType());
//      }
//      catch (javax.ejb.CreateException ex) {
//        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
//      }
//      catch (java.rmi.RemoteException ex) {
//        throw new javax.ejb.EJBException(ex.toString());
//      }
//    }
    glAccountItemList.add(abstractGLAccountItemBO);

    //add the credit item into bo
    //abstractGLAccountItemBO.copyPropertiesFrom(item);
    abstractGLAccountItemBO = new AbstractGLAccountItemValue();
    abstractGLAccountItemBO.setOfficeCode(item.getOfficeCode());
    abstractGLAccountItemBO.setFiscalYear(item.getFiscalYear());
    abstractGLAccountItemBO.setDocumentNumber(item.getDocumentNumber());
    abstractGLAccountItemBO.setItemNo(new Integer(item.getItemNo().intValue() + 2));
    abstractGLAccountItemBO.setAccountType(item.getAccountType());
    abstractGLAccountItemBO.setDocumentType(item.getDocumentType());
    abstractGLAccountItemBO.setDocumentDate(item.getDocumentDate());
    try {
      //tml 04 July 2006, BugId: 17433
      ICustomer customerBo = retrieveDebtorAccount(item.getOfficeCode(), item.getSubledgerAccount(), user);
      //IDebtorReconAccount debtorReconAccountBO = ars.retrieveDebtorReconAccount(item.getOfficeCode(), item.getSubledgerAccount(), user);
      IDebtorReconAccount debtorReconAccountBO = ars.retrieveDebtorReconAccount(customerBo.getOfficeCode(), item.getSubledgerAccount(), user);
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    abstractGLAccountItemBO.setDebitCreditType(DebitCreditType.CREDIT);
    abstractGLAccountItemBO.setPostingKey(TransactionPostingKey.JOURNAL_CREDIT);
    abstractGLAccountItemBO.setPostingPeriod(item.getPostingPeriod());
    abstractGLAccountItemBO.setPostingDate(item.getPostingDate());
    abstractGLAccountItemBO.setProcessStatus(item.getProcessStatus());
    abstractGLAccountItemBO.setCurrency(item.getCurrency());
    abstractGLAccountItemBO.setExchangeRate(item.getExchangeRate());
    abstractGLAccountItemBO.setHeaderIndicator(new Boolean(false));
    abstractGLAccountItemBO.setAmount(item.getAmount());
    abstractGLAccountItemBO.setAmountInLocalCurrency(item.getAmountInLocalCurrency());
    abstractGLAccountItemBO.setReconAccountType(item.getReconAccountType());
    abstractGLAccountItemBO.setGLAccount(glAccount);
    abstractGLAccountItemBO.setConversionIndicator(item.isConversionIndicator());
//    for (int i = 0; i < debtorReconAccountBO.getItems().size(); i++) {
//      IDebtorReconAccount debtorReconAccountItem = (IDebtorReconAccount) debtorReconAccountBO.getItems().get(i);
//      if (debtorReconAccountItem.getAccountType() != null && debtorReconAccountItem.getAccountType().equals(item.getReconAccountType())) {
//        abstractGLAccountItemBO.setGLAccount(debtorReconAccountItem.getReconciliationGLAccount());
//      }
//    }
//    abstractGLAccountItemBO.setReconAccountType(creditLineReconAccountType);
    //abstractGLAccountItemBO.setClearedRefDocumentNumber(null);
    //abstractGLAccountItemBO.setClearedRefFiscalYear(null);
    glAccountItemList.add(abstractGLAccountItemBO);
    return glAccountItemList;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A56F2FAD-5D8D-4932-9278-A111D76BFB38}
   */
  private void validateSurchargeType(com.portrade.ipms.afms.ISurchargeType bo, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {F1F1366D-F40B-43EC-AD7B-90A6BE26741F}
   */
  private void validateCreateDebtorPayment(com.portrade.ipms.afms.IDebtorPayment bo, IUser user) throws AFMSException {
    ICustomer debtorAccount = null;
//    ICompanyAccount companyAccount = null;
//    GeneralLedgerManager generalLedgerManager = null;
//
    if (bo.isMultipleReconAccountFlag() == null || bo.isMultipleReconAccountFlag().booleanValue() == false) {
      try {
        debtorAccount = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }
////    catch (RemoteException ex) {
////      throw new javax.ejb.EJBException(ex.toString());
////    }
//
//    try {
//      generalLedgerManager = generalLedgerManagerHome.create();
//      companyAccount = generalLedgerManager.retrieveCompanyAccount(debtorAccount.getReconAccountId(), bo.getOfficeCode(), user);
//    }
//    catch (RecordNotFoundException ex) {
//      sessionContext.setRollbackOnly();
//      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
//    }
//    catch (javax.ejb.CreateException ex) {
//      sessionContext.setRollbackOnly();
//      throw new CannotCreateRecordException(new Object[]{DebtorPaymentLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
      if (!AccStatus.ACTIVE.equals(debtorAccount.getAccountStatus())) {
        sessionContext.setRollbackOnly();
        throw new AccountNotActiveException(new Object[]{debtorAccount});
      }
    }
//
//    //if( !"D".equals(companyAccount.getReconciliationAccount()) )
//    //  throw new DependentRecordNotFoundException(new Object[] { "CompanyAccount.ReconciliationAccount" } );
//
//    if (companyAccount.isBlockPost().booleanValue()) {
//      sessionContext.setRollbackOnly();
//      throw new AccountBlockForPostingException(new Object[]{companyAccount});
//    }
//    if (companyAccount.isDeleted().booleanValue()) {
//      sessionContext.setRollbackOnly();
//      throw new AccountMarkForDeletionException(new Object[]{companyAccount});
//    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {F9063931-3D9B-4B0C-94FB-022E6DE47D64}
   */
  private void validateDebtorPayment(com.portrade.ipms.afms.IDebtorPayment bo, IUser user) throws AFMSException {
    //List items = bo.getItems();
    //Iterator iterator = items.iterator();
    BigDecimal debitTotal = new BigDecimal(0);
    BigDecimal creditTotal = new BigDecimal(0);
    ICustomer debtorAccount = null;
    ICompanyAccount companyAccount = null;

    Logger.getInstance().logDebug("bo.getDebitCreditType : " + bo.getDebitCreditType());
    Logger.getInstance().logDebug("bo.getAmount : " + bo.getAmount());
    Logger.getInstance().logDebug("bo.getDiscountAmount : " + bo.getDiscountAmount());

    if (bo.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
      //bugId: 18568 karen 13 Oct 2006
      if (bo.getDiscountAmount() != null && !bo.getDiscountAmount().equals("")) {
        debitTotal = bo.getAmount().add(bo.getDiscountAmount());
      }
      else {
        debitTotal = bo.getAmount();
      }
    }

    if (bo.getDebitCreditType().equals(DebitCreditType.CREDIT)) {
      //bugId: 18568 karen 13 Oct 2006
      if (bo.getDiscountAmount() != null && !bo.getDiscountAmount().equals("")) {
        creditTotal = bo.getAmount().add(bo.getDiscountAmount());
      }
      else {
        creditTotal = bo.getAmount();
      }
    }

    //Jason 06th Oct 2003
    if (bo.getItems().size() <= 0) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.NoItemsEnteredException(new Object[]{});
    }
    else {
      for (int i = 0; i < bo.getItems().size(); i++) {
        IDebtorPaymentItem item = (IDebtorPaymentItem) bo.getItems().get(i);
        Logger.getInstance().logDebug("item.getDebitCreditType : " + item.getDebitCreditType());
        if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
          debitTotal = debitTotal.add(item.getAmount());
        }

        if (item.getDebitCreditType().equals(DebitCreditType.CREDIT)) {
          creditTotal = creditTotal.add(item.getAmount());
        }
      }
    }

    Logger.getInstance().logDebug("debitTotal : " + debitTotal.toString());
    Logger.getInstance().logDebug("creditTotal : " + creditTotal.toString());

    //if (debitTotal.doubleValue() != creditTotal.doubleValue()) {
    if (debitTotal.compareTo(creditTotal) != 0) {
      sessionContext.setRollbackOnly();
      throw new IncorrectDebitCreditBalanceException(new Object[]{});
    }

    Logger.getInstance().logDebug("bo.getCollectionAccount() : " + bo.getCollectionAccount());

    try {
      GeneralLedgerSetup generalLedgerSetup = generalLedgerSetupHome.create();
      companyAccount = generalLedgerSetup.retrieveCompanyAccount(bo.getCollectionAccount(), bo.getOfficeCode(), user);
    }
    catch (RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{CompanyAccountLabelId.CODE});
    }
    catch (javax.ejb.CreateException ex) {
      sessionContext.setRollbackOnly();
      throw new CannotCreateRecordException(new Object[]{CompanyAccountLabelId.CODE});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {A3E02492-E00B-46B0-BF98-3428E19EACD1}
   */
  private void validateUpdateDebtorPayment() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {5BDBFE7A-32D5-4641-9CEE-1D6319484FF6}
   */
  private void validateCreateDebtorAccount(ICustomer bo, IUser user) throws AFMSException {
    GeneralLedgerSetup glSetup = null;
    try {
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    try {
      IOffice office = glSetup.retrieveOffice(bo.getOfficeCode(), user);
      if (office.getSubsidiaryLedgerIndicator().equals(Boolean.FALSE)) {
        throw new com.portrade.ipms.afms.exceptions.NotSubsidiaryOfficeException(null);
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

  }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {0061D8E1-C6F7-4629-A75F-581253D328B0}
   */
  private void validateUpdateDebtorAccount() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param accountNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {D55AAA65-0126-4B68-B491-607F4EF506C4}
   */
  private void validateDeleteDebtorAccount(String accountNumber, IUser user) throws AFMSException {
    try {
      IAbstractGLAccountItem glAccountItem = null;
      com.portrade.ipms.afms.dao.GLAccountItemDAO dao = (com.portrade.ipms.afms.dao.GLAccountItemDAO) DAOProxy.getDAO("GLAccountItem", user);
      List l = new ArrayList();

      if (dao != null) {
        AbstractCriteria[] filter = {
            new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_SUBLEDGERACCOUNT, "=", accountNumber),
            new Criteria(com.portrade.ipms.afms.dao.GLAccountItemDAO.FILTER_HEADERINDICATOR, "=", new Boolean(true)),
            };
        l = DAOProxy.list("GLAccountItem", user, filter);
        if (l.size() > 0) {
          throw new com.portrade.ipms.afms.exceptions.DeleteNotAllowedException(new Object[]{});
        }
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.DEBTOR_ACCOUNT});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {1B1DFF50-9DB3-42FE-B57D-68682EEB43D0}
   */
  private void validateDebtorAccount(com.portrade.ipms.afms.ICustomer bo, IUser user) throws AFMSException {
    /*
    try {
      com.portrade.ipms.afms.dao.DebtorAccountDAO dao = (com.portrade.ipms.afms.dao.DebtorAccountDAO) DAOProxy.getDAO("DebtorAccount", user);
      List l = new ArrayList();
      if (dao != null) {
        //Chee Seng 26th July 2004, bugId: 6743
        /*
        if (bo.getAccountNumber() != null) {
          AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_ACCOUNTNUMBER, "!=", bo.getAccountNumber()),
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_TAXIDENTIFICATIONNUMBER, "=", bo.getTaxIdentificationNumber())
              };
          l = DAOProxy.list("DebtorAccount", user, filter);
        }
        else {
          AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_TAXIDENTIFICATIONNUMBER, "=", bo.getTaxIdentificationNumber())
              };
          l = DAOProxy.list("DebtorAccount", user, filter);
        }
        if (l.size() > 0) {
          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorAccountLabelId.TAXIDENTIFICATIONNUMBER});
        }
        */
    /*tml 15 June 2006, BugId: 17199
        List l2 = new ArrayList();
        if (bo.getAccountNumber() != null) {
          AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_ACCOUNTNUMBER, "!=", bo.getAccountNumber()),
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_SHORTNAME, "=", bo.getShortName())
              };
          l2 = DAOProxy.list("DebtorAccount", user, filter);
        }
        else {
 			if(bo.getShortName()!=null && !bo.getShortName().equals("")){
	          AbstractCriteria[] filter = {
	              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_SHORTNAME, "=", bo.getShortName())
	              };
	          l2 = DAOProxy.list("DebtorAccount", user, filter);
 			}
        }
        if (l2.size() > 0) {
          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DebtorAccountLabelId.SHORTNAME});
        }
      }
    }
    catch (java.sql.SQLException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.TAXIDENTIFICATIONNUMBER});
    }*/
    GeneralLedgerSetup glSetup = null;
    try {
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Jason 13th Jan 2004
    if (bo.getMultipleReconAccount() != null && !bo.getMultipleReconAccount().equals("") && bo.getMultipleReconAccount().booleanValue() == false) {
      try {
        ICompanyAccount companyAcc = (ICompanyAccount) glSetup.retrieveCompanyAccount(bo.getReconAccountId(), bo.getOfficeCode(), user);
      }
      catch (AFMSException ex) {
        throw new ReconciliationAccNotExistInGLAccException(null);
      }
      catch (java.rmi.RemoteException ex) {
        throw new ReconciliationAccNotExistInGLAccException(null);
      }
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {18838D2A-80BF-4F29-90A7-A0A25C0AF6E0}
   */
  private void validateCreateDebtorBankGuarantee(com.portrade.ipms.afms.IBankGuarantee bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    //Chee Seng 13th Aug 2004, bugId: 6849
    try {
      AbstractCriteria[] filter = {
          new Criteria(BankGuaranteeDAO.FILTER_ACCOUNTNUMBER, "=", bo.getAccountNumber()),
          new Criteria(BankGuaranteeDAO.FILTER_GUARANTEEREFERENCE, "=", bo.getGuaranteeReference())
          };

      List bankGuaranteeList = DAOProxy.list("bankGuarantee", bo.getOfficeCode(), user, filter);
      if (bankGuaranteeList.size() > 0) {
        throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_ACCOUNTNUMBER_GUARANTEEREFERENCE});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.OFFICECODE_AND_REFERENCENUMBER});
			}
    }

    try {
      ICustomer debtorAccount = retrieveDebtorAccount(bo.getOfficeCode(), bo.getAccountNumber(), user);
      if (DebCategory.NON_TRADE_STAFF.equals(debtorAccount.getDebtorCategory())) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.ACCOUNTNUMBER});
      }
    }
    catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{BankGuaranteeLabelId.ACCOUNTNUMBER});
    }

    validateDebtorBankGuarantee(bo);
  }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {937A504A-25F1-4C6A-9A3E-3268888D42CB}
   */
  private void validateDeleteDebtorBankGuarantee() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A3B40FF8-EBAA-41E5-9E3A-1B8DC1CFB9E8}
   */
  private void validateUpdateDebtorBankGuarantee(com.portrade.ipms.afms.IBankGuarantee bo) throws AFMSException {
    validateDebtorBankGuarantee(bo);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {3BD73C22-69A4-4CEF-9181-7E06ED20930C}
   */
  private void validateDebtorBankGuarantee(com.portrade.ipms.afms.IBankGuarantee bo) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {DB1F07D5-A765-4507-876D-7E06D0EF9353}
   */
  private void validateCreateDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    validateDepositToBank(bo, user);
  }

//erma 07/07/2011 validation when posting deposit to bank

  private void validatePostDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
	  IDepositToBankReceipt depositToBankReceiptBO = new DepositToBankReceiptValue();
	  CommonFunction commonFunction = null;
		try {
			  commonFunction = commonFunctionHome.create();
			
			  Integer fiscalYear = null;
			  Integer orFiscalYear = null;
	  
			  fiscalYear = commonFunction.deriveFiscalYear(bo.getOfficeCode(),bo.getPostingDate(), user);
				
				Logger.getInstance().logDebug("fiscalYear = " + fiscalYear); 
				Logger.getInstance().logDebug("bo.getFiscalYear = " + bo.getFiscalYear());
				
			  if(!fiscalYear.equals(bo.getFiscalYear())){
				throw new com.portrade.ipms.afms.exceptions.DocumentFiscalYearNotEqualsToPostingYearException(new Object[]{});
			  }
			
			 /* for (int i = 0; i < bo.getReceipts().size(); i++) {
				depositToBankReceiptBO = (IDepositToBankReceipt) bo.getReceipts().get(i);
				orFiscalYear = commonFunction.deriveFiscalYear(depositToBankReceiptBO.getOfficeCode(), depositToBankReceiptBO.getOrPostingDate(), user);
				Logger.getInstance().logDebug("bo.getPostingDate - " + bo.getPostingDate());
				Logger.getInstance().logDebug("depositToBankReceiptBO.getOrPostingDate - " + depositToBankReceiptBO.getOrPostingDate());
				if(!fiscalYear.equals(orFiscalYear)){
					throw new com.portrade.ipms.afms.exceptions.DocumentFiscalYearNotEqualsToPostingYearException(new Object[]{});
				}
			  }*/
		}
		catch (javax.ejb.CreateException ex) {
		  Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
		}
		catch (java.rmi.RemoteException ex) {
		  throw new javax.ejb.EJBException(ex.toString());
		}

	}

  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {48A813FE-0EB9-4112-847E-6F18EF4388B2}
   */
  private void validateDepositToBank(com.portrade.ipms.afms.IDepositToBank bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    IDepositToBankReceipt depositToBankReceiptBO = new DepositToBankReceiptValue();
    BigDecimal totalReceiptAmount = new BigDecimal("0");
    DepositToBank depositToBank = null;

    if (bo.getOfficeCodeOfBankAccount() != null && !bo.getOfficeCodeOfBankAccount().equals("")) {
      if (bo.getOfficeCode().equals(bo.getOfficeCodeOfBankAccount())) {
        throw new com.portrade.ipms.afms.exceptions.CannotBeTheSameException(new Object[]{DepositToBankLabelId.OFFICE_CODE, DepositToBankLabelId.OFFICE_CODE_OF_BANK_ACCOUNT});
      }
    }

    for (int i = 0; i < bo.getReceipts().size(); i++) {
      depositToBankReceiptBO = (IDepositToBankReceipt) bo.getReceipts().get(i);
      Logger.getInstance().logDebug("depositToBankReceiptBO.getOrAmount() = " + depositToBankReceiptBO.getOrAmount());
	  Logger.getInstance().logDebug("bo.getPostingDate - " + bo.getPostingDate());
	  Logger.getInstance().logDebug("depositToBankReceiptBO.getOrPostingDate - " + depositToBankReceiptBO.getOrPostingDate());
      /*
      if (depositToBankReceiptBO.getBankInSlipNumber() != null && !depositToBankReceiptBO.getBankInSlipNumber().equals("")) {
        Logger.getInstance().logDebug("I m in");
        totalReceiptAmount = totalReceiptAmount.add(depositToBankReceiptBO.getOrAmount());
      }
      */
      totalReceiptAmount = totalReceiptAmount.add(depositToBankReceiptBO.getOrAmount());
      //karen BugId:21228 check whether this cheque has been used for investment payment or not
      if (depositToBankReceiptBO.getChequeNumber() != null) {
        try {
          List glList = new java.util.ArrayList(gLAccountItemHome.findByChequeNumber(depositToBankReceiptBO.getChequeNumber()));

          for (int j = 0; j < glList.size(); j++) {
            GLAccountItem glItem = (GLAccountItem) glList.get(j);
            if (glItem.getUtilizedAmount() != null) {
              throw new HasBeenUtilizedException(new Object[]{depositToBankReceiptBO.getChequeNumber()});
            }
          }

        }
        catch (java.rmi.RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }
        catch (javax.ejb.FinderException fx) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{CheckLabelId.CHECK_NUMBER});
        }
      }
    }

    Logger.getInstance().logDebug("totalReceiptAmount = " + totalReceiptAmount);

    Logger.getInstance().logDebug("bo.getTotalAmount = " + bo.getTotalAmount());

    //tml 21 Nov 2006, BugId: 19256 - Total Amount in header becomes optional now.
    if (bo.getTotalAmount() != null) {
      if (bo.getTotalAmount().compareTo(totalReceiptAmount) != 0) {
        throw new IncorrectDebitCreditBalanceException(null);
      }
    }
    else {
      bo.setTotalAmount(totalReceiptAmount);
    }
    /*
    try {
      depositToBank = depositToBankHome.findByRemittanceAdviceNumber(bo.getRemittanceAdviceNumber());
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{DepositToBankLabelId.REMITTANCE_ADVICE_NUMBER});
    }
    catch (javax.ejb.FinderException ex) {
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }*/
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {AD8E15FA-91EF-4253-A9AE-BBE20089B678}
   */
  private void validateCreateParkNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    validateGenerateParkNotesReceivable(bo, user);
    validateNotesReceivable(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {4FEC9FD4-CE27-4801-AF2E-EE2BAD410A85}
   */
  private void validateNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    GeneralLedgerSetup generalLedgerSetup = null;

    List items = bo.getItems();
    try {
      try {
        generalLedgerSetup = generalLedgerSetupHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }
      for (int i = 0; i < items.size(); i++) {
        INotesReceivableItem item = (INotesReceivableItem) items.get(i);
        ICompanyAccount companyAccount = null;
        try {
          companyAccount = generalLedgerSetup.retrieveCompanyAccount(item.getGLAccount(), bo.getOfficeCode(), user);
        }
        catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
          throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{item.getGLAccount(), CompanyAccountLabelId.COMPANY_ACCOUNT});
        }
        if (!item.isGeneratedIndicator().booleanValue() && !ReconciliationAccountType.NOT_CONTROL_ACC.equals(companyAccount.getReconciliationAccount())) {
          throw new com.portrade.ipms.afms.exceptions.NotControlAccountException(new Object[]{NotesReceivableItemLabelId.GLACCOUNT, item.getGLAccount(), bo.getOfficeCode()});
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E0E192C8-2AD2-4132-9DED-B6EE97A5760B}
   */
  private void validateGenerateParkNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    ICustomer debtorAccount = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    try {
      try {
        debtorAccount = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{NotesReceivableLabelId.DEBTOR_ACCOUNT});
      }
      if (!AccStatus.ACTIVE.equals(debtorAccount.getAccountStatus())) {
        throw new com.portrade.ipms.afms.exceptions.AccountNotActiveException(new Object[]{NotesReceivableLabelId.DEBTOR_ACCOUNT});
      }

      try {
        generalLedgerSetup = generalLedgerSetupHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      ICompanyAccount companyAccount = null;
      try {
        companyAccount = generalLedgerSetup.retrieveCompanyAccount(debtorAccount.getReconAccountId(), bo.getOfficeCode(), user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{NotesReceivableLabelId.DEBTOR_ACCOUNT_RECONCILIATION_ACCOUNT, CompanyAccountLabelId.COMPANY_ACCOUNT});
      }
      if (companyAccount.isBlockPost().booleanValue()) {
        throw new com.portrade.ipms.afms.exceptions.AccountBlockForPostingException(new Object[]{NotesReceivableLabelId.DEBTOR_ACCOUNT_RECONCILIATION_ACCOUNT, debtorAccount.getReconAccountId(), bo.getOfficeCode()});
      }
      if (companyAccount.isDeleted().booleanValue()) {
        throw new com.portrade.ipms.afms.exceptions.AccountMarkForDeletionException(new Object[]{NotesReceivableLabelId.DEBTOR_ACCOUNT_RECONCILIATION_ACCOUNT, debtorAccount.getReconAccountId(), bo.getOfficeCode()});
      }

      for (int i = 0; i < bo.getInvoiceItems().size(); i++) {
        INotesReceivableInvoiceItem item = (INotesReceivableInvoiceItem) bo.getInvoiceItems().get(i);

        IARDocument invoice = null;
        try {
          invoice = retrieveOutstandingInvoicesForNR(bo.getOfficeCode(), item.getInvoiceFiscalYear(), item.getInvoiceDocumentNumber(), user);
        }
        catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
          throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{item.getInvoiceNumber(), InvoiceLabelId.INVOICE});
        }

        if (!(invoice.getCurrency().equals(bo.getCurrency()))) {
          throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{item.getInvoiceNumber(), InvoiceLabelId.INVOICE});
        }
        BigDecimal clearedAmount = invoice.getClearedAmount() == null ? new BigDecimal(0.00) : invoice.getClearedAmount();

        if (invoice.getAmount().subtract(clearedAmount).compareTo(new BigDecimal(0)) <= 0) {
          throw new com.portrade.ipms.afms.exceptions.InvoiceHasBeenPaidException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {21ED1DA0-EE02-498E-9EE3-89AD5904AF51}
   */
  private void validateDeleteParkNotesReceivable(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A8042F4D-CCE3-40C2-B059-6430CE5D9881}
   */
  private void validateUpdateParkNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    validateNotesReceivable(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {2BC83475-96DB-4139-93E4-0AA8125672EA}
   */
  private void validateUpdatePostedNotesReceivable(com.portrade.ipms.afms.INotesReceivable bo, IUser user) throws AFMSException {
    validateNotesReceivable(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {77A43886-292E-4228-8DCB-CC91EA408C45}
   */
  private com.portrade.ipms.afms.IARDocument retrieveOutstandingInvoicesForNR(String officeCode, Integer fiscalYear, Long documentNumber, com.portrade.ipms.icms.IUser user) throws AFMSException {
    com.portrade.ipms.afms.IARDocument bo = new DebtorInvoiceValue();

    try {
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.OutstandingInvoicesForNRDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.OutstandingInvoicesForNRDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.OutstandingInvoicesForNRDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
          };

      java.util.List results = DAOProxy.list("outstandingInvoicesForNR", user, filter);
      if (results.size() > 0) {
        bo = (IARDocument) results.get(0);
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param invoiceNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {34C23806-FB83-4316-8BB2-D3B5DFB98711}
   */
  private com.portrade.ipms.afms.IARDocument retrieveOutstandingInvoicesForNR(String officeCode, String invoiceNumber, com.portrade.ipms.icms.IUser user) throws AFMSException {
    com.portrade.ipms.afms.IARDocument bo = new DebtorInvoiceValue();

    try {
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.OutstandingInvoicesForNRDAO.FILTER_OFFICECODE, "=", officeCode),
          new Criteria(com.portrade.ipms.afms.dao.OutstandingInvoicesForNRDAO.FILTER_INVOICENUMBER, "=", invoiceNumber),
          };

      java.util.List results = DAOProxy.list("outstandingInvoicesForNR", user, filter);
      if (results.size() > 0) {
        bo = (IARDocument) results.get(0);
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
			}
    }
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {7A688B45-E324-4CE6-91B3-B9015AF613BB}
   */
  private void generateDebitCreditNoteNumber(IDebtorDebitCreditMemo bo, IUser user) throws AFMSException {
    java.util.Calendar calendar = com.portrade.ipms.afms.util.AFMSUtilities.getCalendar();
    List debtorDebitCreditMemoList = new java.util.ArrayList();
    String creditNoteNumber = null;
    String documentType = null;

    //Chee Seng 08th Dec 2004, bugId: 8866
    /*
    try {
      documentType = ICMSConnector.getDocumentType(user.getIcmsSession(), Prefix.CN);
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.DOCUMENT_CONTROL_DOCUMENT_TYPE});
    }
    */
    try {
      if (bo.getTransactionType().equals(IConstants.TransactionDocumentType.DEBTOR_DEBIT_NOTES)) {
        creditNoteNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.DebitCreditNotePrefixParameter.DN, bo.getOfficeCode(), null, null, null, false);
      }
      else {
        creditNoteNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), IConstants.DebitCreditNotePrefixParameter.CN, bo.getOfficeCode(), null, null, null, false);
      }
      //creditNoteNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(),documentType , bo.getOfficeCode(), String.valueOf(calendar.get(Calendar.MONTH) + 1), String.valueOf(calendar.get(Calendar.YEAR)), null);
      bo.setCreditNoteNumber(creditNoteNumber);

      DebtorDebitCreditMemoDAO debtorDebitCreditMemoDAO = (DebtorDebitCreditMemoDAO) DAOProxy.getDAO("debtorDebitCreditMemo", user);
      debtorDebitCreditMemoList = debtorDebitCreditMemoDAO.findByOfficeCodeCreditNoteNumber(bo.getOfficeCode(), creditNoteNumber);
      //debtorDebitCreditMemoList = new java.util.ArrayList(debtorDebitCreditMemoHome.findByCreditNoteNumber(bo.getOfficeCode(), creditNoteNumber));
      if (debtorDebitCreditMemoList.size() > 0) {
        generateDebitCreditNoteNumber(bo, user);
      }
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.DOCUMENT_CONTROL_DOCUMENT_TYPE});
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A4E456D1-1CDC-412D-9203-12F80A162062}
   */
  private void calculateTaxForDebtorCreditNoteItem(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException {
    CommonFunction commonFunction = null;
    GeneralLedgerManager generalLedgerManager = null;
    IDebtorDebitCreditMemoItem item = new DebtorDebitCreditMemoItemValue();
    ITaxCalculation taxCalculationBO = new TaxCalculationValue();
    IPostingKey postingKeyBO = new PostingKeyValue();
    IDebtorDebitCreditMemoItem taxItem = new DebtorDebitCreditMemoItemValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      if (Boolean.TRUE.toString().equals(SystemProfile.get(SystemProfile.MULTIPLE_TAX_CODE_FLAG))) {
        int i = 0;
        BigDecimal totalTax = new BigDecimal(0);
        boolean hasTax = false;
        while (i < bo.getItems().size()) {
          item = (IDebtorDebitCreditMemoItem) bo.getItems().get(i);

          if (item.isNewItemIndicator() != null && item.isNewItemIndicator().equals(Boolean.TRUE)) {
            if (item.getTaxCode() != null && !item.getTaxCode().equals("")) {
              taxCalculationBO = commonFunction.calculateTax(item.getTaxCode(), item.getAmount(), user);
              if (taxCalculationBO.getTaxAmount().compareTo(new BigDecimal(0)) > 0) {
                //item.setAmount(item.getAmount().subtract(taxCalculationBO.getTaxAmount()));
                item.setTaxAmount(taxCalculationBO.getTaxAmount());
				hasTax = true;
				totalTax = totalTax.add(taxCalculationBO.getTaxAmount());
                System.out.println("item("+ i +")'s amount = "+item.getAmount());
				System.out.println("item("+ i +")'s tax amount = "+item.getTaxAmount());
                
                taxItem = new DebtorDebitCreditMemoItemValue();
                taxItem.copyPropertiesFrom(item);
                taxItem.setQuantity(item.getQuantity());
                taxItem.setUOM(item.getUOM());
                taxItem.setUnitPrice(item.getUnitPrice());
                taxItem.setPostingKey(taxCalculationBO.getPostingKey());
                taxItem.setAmount(taxCalculationBO.getTaxAmount());
                taxItem.setGLAccount(taxCalculationBO.getGLAccount());
                taxItem.setTaxIndicator(new Boolean(true));
                taxItem.setParentItemNumber(new Integer(i + 1));
                
                
				if(!taxCalculationBO.getPostingOfficeCode().equalsIgnoreCase(bo.getOfficeCode())){
					taxItem.setCostCenterId(taxCalculationBO.getPostingOfficeCode());
					taxItem.setDifferentOfficeGLAccount(taxCalculationBO.getGLAccount());
					taxItem.setDifferentOfficeCostCenterId(taxCalculationBO.getPostingOfficeCode());
					taxItem.setCostCenterOfficeCode(taxCalculationBO.getPostingOfficeCode());
				 }
				else{
					taxItem.setOfficeCode(taxCalculationBO.getPostingOfficeCode());
					taxItem.setGLAccount(taxCalculationBO.getGLAccount());
					taxItem.setCostCenterId(taxCalculationBO.getPostingOfficeCode());
				  }
                //GST remove tax amount for tax
                taxItem.setTaxAmount(null);
                bo.getItems().add(i + 1, taxItem);
                i++;
              }
              else{
              	System.out.println("item("+ i +")'s Tax Amount is null or zero");
              }
            }
          }
          i++;
        }
        if(hasTax)
        bo.setTaxAmount(totalTax);
        bo.setTaxIndicator(null);
      }
      else {
        if (bo.isNewCreditNotesIndicator() != null && bo.isNewCreditNotesIndicator().equals(Boolean.TRUE)) {
          if (bo.getTaxCode() != null && !bo.getTaxCode().equals("")) {
            ITaxCalculation taxCalculation = commonFunction.calculateTax(bo.getTaxCode(), bo.getAmount(), user);

            if (taxCalculation.getTaxAmount() != null || taxCalculation.getTaxAmount().doubleValue() != 0) {
              bo.setTaxAmount(bo.getAmount().subtract(taxCalculation.getTaxAmount()));
              bo.setTaxAmountInLocalCurrency(null);
              taxItem = new DebtorDebitCreditMemoItemValue();
              taxItem.copyPropertiesFrom(bo);
              taxItem.setPostingKey(taxCalculation.getPostingKey());
			  
			  if(!taxCalculationBO.getPostingOfficeCode().equalsIgnoreCase(bo.getOfficeCode())){
				  taxItem.setCostCenterId(null);
				  taxItem.setDifferentOfficeGLAccount(taxCalculationBO.getGLAccount());
				  taxItem.setDifferentOfficeCostCenterId(taxCalculationBO.getPostingOfficeCode());
				  taxItem.setCostCenterOfficeCode(taxCalculationBO.getPostingOfficeCode());
			   }
			  else{
				  taxItem.setGLAccount(taxCalculationBO.getGLAccount());
				  taxItem.setCostCenterId(taxCalculationBO.getPostingOfficeCode());
				}
			  
              taxItem.setTaxIndicator(Boolean.TRUE);
              taxItem.setParentItemNumber(new Integer(0));
              taxItem.setAmount(taxCalculation.getTaxAmount());
              taxItem.setAmountInLocalCurrency(null);

              bo.getItems().add(0, taxItem);
            }
          }
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception java.rmi.RemoteException Description of the Exception
   * @exception AFMSException Description of the Exception
   * @modelguid {948E7BBD-C0B7-498F-8F49-19136BE1323F}
   */
  private void validateCreateParkDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException, java.rmi.RemoteException {
    validateDebtorCreditNote(bo, user);
  }


  /**
   * Description of the Method
   *
   * @exception java.rmi.RemoteException Description of the Exception
   * @exception AFMSException Description of the Exception
   * @modelguid {F9CFBAD0-3115-458A-97F3-C6B8DE434D61}
   */
  private void validateDeleteParkDebtorDebitCreditNote() throws AFMSException, java.rmi.RemoteException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception java.rmi.RemoteException Description of the Exception
   * @exception AFMSException Description of the Exception
   * @modelguid {47392EA0-58BE-4BB1-B006-CE2A9FE595AD}
   */
  private void validateUpdateParkDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException, java.rmi.RemoteException {
    validateDebtorCreditNote(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception java.rmi.RemoteException Description of the Exception
   * @exception AFMSException Description of the Exception
   * @modelguid {3155E4E8-7080-4D66-937A-61F27FA1EE1F}
   */
  private void validateUpdatePostedDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException, java.rmi.RemoteException {
    validateDebtorCreditNote(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception java.rmi.RemoteException Description of the Exception
   * @exception AFMSException Description of the Exception
   * @modelguid {D3CDBB3B-35B8-4E27-A80C-FF166E9E6E5E}
   */
  private void validateDebtorCreditNote(com.portrade.ipms.afms.IDebtorDebitCreditMemo bo, IUser user) throws AFMSException, java.rmi.RemoteException {
    CommonFunction commonFunction = null;
    ICustomer debtorAccountBO = new DebtorAccountValue();
//  ICompanyAccount companyAccountBO = new CompanyAccountValue();
//  GeneralLedgerManager generalLedgerManager = null;
    IDebtorDebitCreditMemoItem item = new DebtorDebitCreditMemoItemValue();

    Logger.getInstance().logDebug("Inside validateDebtorCreditNote");
//    try {
//      generalLedgerManager = generalLedgerManagerHome.create();
//    }
//    catch (javax.ejb.CreateException ex) {
//      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
//    try {
//      commonFunction = commonFunctionHome.create();
//    }
//    catch (javax.ejb.CreateException ex) {
//      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
    if (bo.isMultipleReconAccountFlag() == null || bo.isMultipleReconAccountFlag().booleanValue() == false) {
      try {
        debtorAccountBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      }
      catch (RecordNotFoundException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }
    }
//
//    Logger.getInstance().logDebug("Before retrieveCompanyAccount");
//    Logger.getInstance().logDebug("debtorAccountBO.getReconAccountId() = " + debtorAccountBO.getReconAccountId());
//    Logger.getInstance().logDebug("bo.getOfficeCode() " + bo.getOfficeCode());
//    try {
//      companyAccountBO = generalLedgerManager.retrieveCompanyAccount(debtorAccountBO.getReconAccountId(), bo.getOfficeCode(), user);
//    }
//    catch (RecordNotFoundException ex) {
//      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{CompanyAccountLabelId.CODE});
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
    if (debtorAccountBO.getAccountStatus().equals(AccStatus.DELETED)) {
      throw new com.portrade.ipms.afms.exceptions.AccountMarkForDeletionException(new Object[]{DebtorAccountLabelId.DEBTOR_ACCOUNT, debtorAccountBO.getAccountNumber(), bo.getOfficeCode()});
    }
    //BPSB allow issue credit not for suspected debtor karen Bugid: 23207 9 August 2007
    if(bo.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_DEBIT_NOTES)){
		if (debtorAccountBO.getAccountStatus().equals(AccStatus.SUSPENDED)) {
		  //BugId: 18300 karen 22 September 2006
		  String label = "Debtor Code " + debtorAccountBO.getAccountNumber() + " (" + debtorAccountBO.getDebtorName() + " )";
		  throw new com.portrade.ipms.afms.exceptions.AccountIsSuspendedException(new Object[]{label});
		}
    
    }
//Hui Mian, 09/01/2009 26469
    if (debtorAccountBO.getAccountStatus().equals(AccStatus.CLOSED)) {
      String label = "Debtor Code " + debtorAccountBO.getAccountNumber() + " (" + debtorAccountBO.getDebtorName() + " )";
      throw new com.portrade.ipms.afms.exceptions.AccountMarkForClosedException(new Object[]{label});
    }
    
//    if (companyAccountBO.getReconciliationAccount().equals(ReconciliationAccountType.NOT_CONTROL_ACC)) {
//      throw new com.portrade.ipms.afms.exceptions.NotControlAccountException(new Object[]{CompanyAccountLabelId.CODE});
//    }
//    Logger.getInstance().logDebug("Before isBlockPost");
//    if (companyAccountBO.isBlockPost().booleanValue()) {
//      throw new AccountBlockForPostingException(new Object[]{CompanyAccountLabelId.CODE});
//    }
//    Logger.getInstance().logDebug("Before isDeleted");
//    if (companyAccountBO.isDeleted().booleanValue()) {
//      throw new AccountMarkForDeletionException(new Object[]{CompanyAccountLabelId.CODE});
//    }
//
    List items = bo.getItems();
    Iterator iterator = items.iterator();
    BigDecimal totalDebitAmount = new BigDecimal("0");
    BigDecimal totalCreditAmount = new BigDecimal("0");

    while (iterator.hasNext()) {
      item = (IDebtorDebitCreditMemoItem) iterator.next();
      if (item.getAmount() != null && !item.getAmount().equals("")) {
        //karen 18 January 2007 BugId: 20261
        if (bo.isConversionIndicator() != null && bo.isConversionIndicator().equals(Boolean.TRUE)) {
          if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {
            totalDebitAmount = totalDebitAmount.add(item.getAmount());
          }
          else {
            totalCreditAmount = totalCreditAmount.add(item.getAmount());
          }
        }
        else {
          if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
            totalDebitAmount = totalDebitAmount.add(item.getAmount());
          }
          else {
            totalCreditAmount = totalCreditAmount.add(item.getAmount());
          }
        }
      }
      Logger.getInstance().logDebug("item.getCostCenter === " + item.getCostCenterId());
      Logger.getInstance().logDebug("item.getCostCenterOfficeCode === " + item.getCostCenterOfficeCode());
      if (item.getCostCenterId() == null) {
        throw new com.portrade.ipms.afms.exceptions.CannotBeNullException(new Object[]{CostCenterLabelId.COSTCENTER});
      }
    }
    Logger.getInstance().logDebug("bo.getTransactionType()==" + bo.getTransactionType());
    Logger.getInstance().logDebug("bo.getAmount()===" + bo.getAmount());
    Logger.getInstance().logDebug("totalDebitAmount===" + totalDebitAmount);
    Logger.getInstance().logDebug("totalCreditAmount===" + totalCreditAmount);
    if (bo.getTransactionType().equals(TransactionDocumentType.DEBTOR_CREDIT_NOTES)) {
      if (bo.getAmount().add(totalCreditAmount).compareTo(totalDebitAmount) != 0) {
        throw new IncorrectDebitCreditBalanceException(new Object[]{});
      }

    }
    else {
      if (bo.getAmount().add(totalDebitAmount).compareTo(totalCreditAmount) != 0) {
        throw new IncorrectDebitCreditBalanceException(new Object[]{});
      }
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {64936C71-0ED2-4AE5-B8CD-DD6A001915B1}
   */
  private void generateInvoiceNumber(IARDocument bo, IUser user) throws AFMSException {
    java.util.Calendar calendar = com.portrade.ipms.afms.util.AFMSUtilities.getCalendar();
    List invoiceList = new java.util.ArrayList();
    Invoice invoice = null;
    String invoiceNumber = null;
    String invoiceType = null;

    /*
    try {
      documentType = ICMSConnector.getDocumentType(user.getIcmsSession(), bo.getInvoicePrefix());
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.DOCUMENT_CONTROL_DOCUMENT_TYPE});
    }
    Logger.getInstance().logDebug("bo.getInvoicePrefix() " + bo.getInvoicePrefix());
    Logger.getInstance().logDebug("documentType " + documentType);
    Logger.getInstance().logDebug("bo.getExternalSystemType() " + bo.getExternalSystemType());
    Logger.getInstance().logDebug("bo.getOfficeCode() " + bo.getOfficeCode());
    Logger.getInstance().logDebug("String.valueOf(calendar.get(Calendar.MONTH) + 1) " + String.valueOf(calendar.get(Calendar.MONTH) + 1));
    Logger.getInstance().logDebug("String.valueOf(calendar.get(Calendar.YEAR)) " + String.valueOf(calendar.get(Calendar.YEAR)));
    */
    IInvoicePrefix invPrefix = retrieveInvoicePrefix(bo.getInvoicePrefix(), user);
    Logger.getInstance().logDebug("bo.getInvoicePrefix() = " + bo.getInvoicePrefix());
    Logger.getInstance().logDebug("invPrefix.getInvoiceType() = " + invPrefix.getInvoiceType());
    ResourceBundle rb = ResourceBundle.getBundle(InvoicePrefixParameter.DOC_PROPERTIES);

    String documentType = rb.getString(invPrefix.getInvoiceType());
    Logger.getInstance().logDebug("--documentType--" + documentType);
    try {
      if (bo.getExternalSystemType() != null && !bo.getExternalSystemType().equals("") && bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
        Logger.getInstance().logDebug("Inside if ");
        invoiceNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), documentType, user.getCurrentSiteCode(), String.valueOf(calendar.get(Calendar.MONTH) + 1), String.valueOf(calendar.get(Calendar.YEAR)), null);
        //invoiceNumber = ICMSConnector.getNextDocumentControlNumber(user.getIcmsSession(), bo.getInvoicePrefix(), user.getCurrentSiteCode(), String.valueOf(calendar.get(Calendar.MONTH) + 1), String.valueOf(calendar.get(Calendar.YEAR)), null);
      }
      else {
        Logger.getInstance().logDebug("Inside else ");
        invoiceNumber = ICMSConnector.getNextDocumentNumber(user.getIcmsSession(), documentType, bo.getOfficeCode(), String.valueOf(calendar.get(Calendar.MONTH) + 1), String.valueOf(calendar.get(Calendar.YEAR)), null);
        //invoiceNumber = ICMSConnector.getNextDocumentControlNumber(user.getIcmsSession(), bo.getInvoicePrefix(), bo.getOfficeCode(), String.valueOf(calendar.get(Calendar.MONTH) + 1), String.valueOf(calendar.get(Calendar.YEAR)), null);
      }
      Logger.getInstance().logDebug("invoiceNumber " + invoiceNumber);
      bo.setInvoiceNumber(invoiceNumber);

      InvoiceDAO dao = (InvoiceDAO) DAOProxy.getDAO("invoice", user);
      invoiceList = dao.findByOfficeCodeInvoiceNumber(bo.getOfficeCode(), invoiceNumber);
      //invoiceList = new java.util.ArrayList(invoiceHome.findByOfficeCodeInvoiceNumber(bo.getOfficeCode(), invoiceNumber));
      if (invoiceList.size() > 0) {
        generateInvoiceNumber(bo, user);
      }
    }
    catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.DOCUMENT_CONTROL_DOCUMENT_TYPE});
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param VATableInvoice Description of the Parameter
   * @param nonVATableInvoice Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {0EBACD41-E89C-470C-BFF3-A97C29F79ECA}
   */
  private void validateConfirmParkDebtorInvoice(IARDocument bo, IARDocument VATableInvoice, IARDocument nonVATableInvoice, IUser user) throws AFMSException {
//    if (VATableInvoice.getItems().size() > 0 && nonVATableInvoice.getItems().size() > 0) {
//      throw new com.portrade.ipms.afms.exceptions.CannotAcceptMixtualTaxAndNonTaxInvoiceItemException(new Object[]{});
//    }
//    IPostingKey postingKeyBO = new PostingKeyValue();
//
//    IInvoiceItem item = new DebtorInvoiceItemValue();
//    BigDecimal totalInvoiceAmount = new BigDecimal("0");
//    BigDecimal totalDebitAmount = new BigDecimal("0");
//    BigDecimal totalCreditAmount = new BigDecimal("0");
//    GeneralLedgerManager generalLedgerManager = null;
//
//    try {
//      generalLedgerManager = generalLedgerManagerHome.create();
//    }
//    catch (javax.ejb.CreateException ex) {
//      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
//    try {
//      for (int i = 0; i < VATableInvoice.getItems().size(); i++) {
//        item = (IInvoiceItem) VATableInvoice.getItems().get(i);
//
//        postingKeyBO = generalLedgerManager.retrievePostingKey(item.getPostingKey(), user);
//        if (postingKeyBO.getDebitCredit().equals(IConstants.DebitCreditType.CREDIT)) {
//          totalCreditAmount = totalCreditAmount.add(item.getAmount());
//          totalInvoiceAmount = totalInvoiceAmount.add(item.getAmount());
//        }
//        else {
//          totalDebitAmount = totalDebitAmount.add(item.getAmount());
//          totalInvoiceAmount = totalInvoiceAmount.subtract(item.getAmount());
//        }
//      }
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
//    if (totalInvoiceAmount.compareTo(new BigDecimal("0")) < 0) {
//      throw new UnableToSplitDebitRevenueException(new Object[]{});
//    }
//
//    totalInvoiceAmount = new BigDecimal("0");
//
//    try {
//      for (int i = 0; i < nonVATableInvoice.getItems().size(); i++) {
//        item = (IInvoiceItem) nonVATableInvoice.getItems().get(i);
//
//        postingKeyBO = generalLedgerManager.retrievePostingKey(item.getPostingKey(), user);
//        if (postingKeyBO.getDebitCredit().equals(IConstants.DebitCreditType.CREDIT)) {
//          totalCreditAmount = totalCreditAmount.add(item.getAmount());
//          totalInvoiceAmount = totalInvoiceAmount.add(item.getAmount());
//        }
//        else {
//          totalDebitAmount = totalDebitAmount.add(item.getAmount());
//          totalInvoiceAmount = totalInvoiceAmount.subtract(item.getAmount());
//        }
//      }
//    }
//    catch (java.rmi.RemoteException ex) {
//      throw new javax.ejb.EJBException(ex.toString());
//    }
//
//    if (totalInvoiceAmount.compareTo(new BigDecimal("0")) < 0) {
//      throw new UnableToSplitDebitRevenueException(new Object[]{});
//    }
//
//    //Validate the total debit and total credit invoice
//    if (bo.getAmount().add(totalDebitAmount).compareTo(totalCreditAmount) != 0) {
//      throw new com.portrade.ipms.afms.exceptions.IncorrectDebitCreditBalanceException(new Object[]{});
//    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {77B703F4-9D46-4386-89BA-A010AF5024C5}
   */
  private void validateParkDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    try {
      validateDebtorInvoice(bo, user);
    }
    catch (AFMSException ex) {
      throw ex;
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {AFB064DE-AF68-435B-B8FF-15D87A4D11E3}
   */
  private void validateDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    AccountReceivableManager accountReceivableManager = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    ICompanyAccount companyAccountBO = new CompanyAccountValue();
    IInvoiceItem invoiceItemBO = new DebtorInvoiceItemValue();
    ICustomer customerBO = new DebtorAccountValue();
    IPostingKey postingKeyBO = new PostingKeyValue();

    try {
      generalLedgerSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);

    if (customerBO.getAccountStatus().equals(AccStatus.DELETED)) {
      throw new com.portrade.ipms.afms.exceptions.AccountMarkForDeletionException(new Object[]{InvoiceLabelId.CUSTOMER_ID, bo.getSubledgerAccount(), bo.getOfficeCode()});
    }
    //Liang - 23803
    if (customerBO.getAccountStatus().equals(AccStatus.CLOSED)) {
      String label = "Debtor Code " + customerBO.getAccountNumber() + " (" + customerBO.getDebtorName() + " )";
      throw new com.portrade.ipms.afms.exceptions.AccountMarkForClosedException(new Object[]{label});
    }
    //End of Liang

   // karen BugId: 23798 cater for PBIS side
   Logger.getInstance().logDebug("bo.getInvoicePrefix() "+bo.getInvoicePrefix()+" "+bo.getExternalSystemType()+" "+bo.getImportExportFlag());
   if (bo.getExternalSystemType() != null && bo.getExternalSystemType().equals(ExternalSystemType.POM)) {
    if(bo.getInvoicePrefix().equals("PC") && bo.getImportExportFlag()!=null && bo.getImportExportFlag().equals(ImportExportFlag.IMPORT)){
  		if (customerBO.getAccountStatus().equals(AccStatus.SUSPENDED)) {
  		  //BugId: 18302 karen 2 September 2006
  		  String label = "Debtor Code " + customerBO.getAccountNumber() + " (" + customerBO.getDebtorName() + " )";
  		  throw new com.portrade.ipms.afms.exceptions.AccountIsSuspendedException(new Object[]{label});
  		} 
    }
   }else{	
	if (customerBO.getAccountStatus().equals(AccStatus.SUSPENDED)) {
	  //BugId: 18302 karen 2 September 2006
	  String label = "Debtor Code " + customerBO.getAccountNumber() + " (" + customerBO.getDebtorName() + " )";
	  throw new com.portrade.ipms.afms.exceptions.AccountIsSuspendedException(new Object[]{label});
	}

   }

    try {
      //ffgan - 22684 (Performance Tuning)
      Map companyAccountMap = new HashMap();
      String companyAccountKey = null;
      String costCenterOfficeCode = null;
      long retrieveCompanyAccStartTime = System.currentTimeMillis();
      for (int i = 0; i < bo.getItems().size(); i++) {
        invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
        Logger.getInstance().logDebug("invoiceItemBO.getGLAccount() = " + invoiceItemBO.getGLAccount());
        Logger.getInstance().logDebug("invoiceItemBO.getCostCenterOfficeCode() = " + invoiceItemBO.getCostCenterOfficeCode());
        if (invoiceItemBO.getCostCenterOfficeCode() != null && !invoiceItemBO.getCostCenterOfficeCode().equals("")) {
          companyAccountKey = invoiceItemBO.getGLAccount() + invoiceItemBO.getCostCenterOfficeCode();
          costCenterOfficeCode = invoiceItemBO.getCostCenterOfficeCode();
          //companyAccountBO = generalLedgerSetup.retrieveCompanyAccount(invoiceItemBO.getGLAccount(), invoiceItemBO.getCostCenterOfficeCode(), user);

        }
        else {
          companyAccountKey = invoiceItemBO.getGLAccount() + bo.getOfficeCode();
          costCenterOfficeCode = bo.getOfficeCode();
          //companyAccountBO = generalLedgerSetup.retrieveCompanyAccount(invoiceItemBO.getGLAccount(), bo.getOfficeCode(), user);
        }

        if (companyAccountMap.containsKey(companyAccountKey)) {
          companyAccountBO = (ICompanyAccount) companyAccountMap.get(companyAccountKey);
        }
        else {
          companyAccountBO = generalLedgerSetup.retrieveCompanyAccount(invoiceItemBO.getGLAccount(), costCenterOfficeCode, user);
          companyAccountMap.put(companyAccountKey, companyAccountBO);
        }

        if (companyAccountBO.isBlockPost().booleanValue() == true) {
          throw new com.portrade.ipms.afms.exceptions.AccountBlockForPostingException(new Object[]{CompanyAccountLabelId.CODE, invoiceItemBO.getGLAccount(), costCenterOfficeCode});
        }
      }
      Logger.getInstance().logDebug("AFMS Time Taken ACR.retrieveCompanyAccount = " + (System.currentTimeMillis() - retrieveCompanyAccStartTime));
    }
    catch (RecordNotFoundException ex) {
      //Jason 15th Dec 2003, bugId: 3814
      String glAccountCannotBeFound = "GL Account " + invoiceItemBO.getGLAccount();
      //Chee Seng 14th July 2005, bugId: none
      //Pass in tariff code that would used by PBIS module to display their own error message.
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{IConstants.CompanyAccountLabelId.CODE, invoiceItemBO.getTariffCode()});
    }
    catch (java.rmi.RemoteException ex) {
		ex.printStackTrace();
      throw new javax.ejb.EJBException(ex.toString());
    }

    /*
     * if(bo.getSCN() != null && !bo.getSCN().equals("") && bo.getBLNumber() != null && !bo.getBLNumber().equals("")) {
     * try {
     * ICMSConnector.validateManifestBlNumberAndScn(user.getIcmsSession(), bo.getSCN(), bo.getBLNumber());
     * }
     * catch (com.portrade.ipms.afms.exceptions.RecordNotFoundException ex) {
     * throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[] { InvoiceLabelId.SCN_AND_BL_NUMBER });
     * }
     * }
     */
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A964A1A4-9028-409B-BF91-E04DFA49A58F}
   */
  private void validateCreateParkDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    /*
     * boolean generateFlag = false;
     * String officeCode = "";
     * IInvoiceItem invoiceItemBO = new DebtorInvoiceItemValue();
     * for(int i=0; i<bo.getItems().size(); i++) {
     * invoiceItemBO = (IInvoiceItem)bo.getItems().get(i);
     * if(invoiceItemBO.getNewOfficeCode() != null && !bo.getOfficeCode().equals(invoiceItemBO.getNewOfficeCode()) && !invoiceItemBO.getNewOfficeCode().equals(officeCode)) {
     * if(generateFlag == true) {
     * throw new com.portrade.ipms.afms.exceptions.DifferentItemTypeException(new Object[] { InvoiceItemLabelId.TAX_CODE });
     * }
     * officeCode = invoiceItemBO.getNewOfficeCode();
     * generateFlag = true;
     * }
     * }
     * if(generateFlag == true) {
     * bo.setCrossOfficeCodeNumber(bo.getDocumentNumber() + bo.getOfficeCode() + officeCode);
     * }
     */
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {A84DAA96-90CA-428E-A850-A6FA5ADC7142}
   */
  private void validateUpdateParkDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    IInvoiceItem invoiceItemBO = new DebtorInvoiceItemValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    CommonFunction commonFunction = null;
    String taxCode = null;
    java.util.ArrayList invoiceItemList = null;
    BigDecimal totalInvoiceAmount = new BigDecimal("0");
    BigDecimal totalDebitAmount = new BigDecimal("0");
    BigDecimal totalCreditAmount = new BigDecimal("0");
    ICustomer customerBO = new DebtorAccountValue();

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }

    try {
      invoiceItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), user);
      if (invoiceItemList != null && invoiceItemList.size() > 1) {
        glAccountItemBO = (IAbstractGLAccountItem) invoiceItemList.get(1);
        taxCode = glAccountItemBO.getTaxCode();
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }

    if (bo.getProcessStatus().equals(ProcessStatus.POST)) {
      throw new com.portrade.ipms.afms.exceptions.UpdatePostedDeniedException(new Object[]{InvoiceLabelId.PROCESS_STATUS});
    }

    if (taxCode != null && !taxCode.equals("")) {
      for (int i = 0; i < bo.getItems().size(); i++) {
        invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
        if (invoiceItemBO.getTaxCode() == null || invoiceItemBO.getTaxCode().equals("")) {
          throw new com.portrade.ipms.afms.exceptions.ModifyTaxCodeException(new Object[]{});
        }
      }
    }
    else {
      for (int i = 0; i < bo.getItems().size(); i++) {
        invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
        if (invoiceItemBO.getTaxCode() != null) {
          if (!invoiceItemBO.getTaxCode().equals("")) {
            throw new com.portrade.ipms.afms.exceptions.DifferentItemTaxCodeException(new Object[]{InvoiceItemLabelId.TAX_CODE});
          }
        }
      }
    }

    for (int i = 0; i < bo.getItems().size(); i++) {
      invoiceItemBO = (IInvoiceItem) bo.getItems().get(i);
      if (invoiceItemBO.getDebitCreditType().equals(IConstants.DebitCreditType.CREDIT)) {
        totalCreditAmount = totalCreditAmount.add(invoiceItemBO.getAmount());
        totalInvoiceAmount = totalInvoiceAmount.add(invoiceItemBO.getAmount());
      }
      else {
        totalDebitAmount = totalDebitAmount.add(invoiceItemBO.getAmount());
        totalInvoiceAmount = totalInvoiceAmount.subtract(invoiceItemBO.getAmount());
      }
    }

    if (bo.getAmount().add(totalDebitAmount).compareTo(totalCreditAmount) != 0) {
      throw new com.portrade.ipms.afms.exceptions.IncorrectDebitCreditBalanceException(new Object[]{});
    }

    if (bo.isProceedIndicator() == null || !bo.isProceedIndicator().equals(Boolean.TRUE)) {
      /*
       * Jason 14th Nov 2003 - retrieve information from debtor account
       * customerBO.setAccountNumber(bo.getSubledgerAccount());
       * customerBO.setOfficeCode(bo.getOfficeCode());
       */
      try {
        customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      }
      catch (RecordNotFoundException ex) {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }
//      catch (RemoteException ex) {
//        throw new javax.ejb.EJBException(ex.toString());
//      }

      //try {
      IOverridingApproval overridingApprovalBO = checkCreditLimit(customerBO, bo.getAmount(), bo.getFiscalYear(), true, null, user);
      BigDecimal overRideAmount = overridingApprovalBO.getAmount();
      if (overRideAmount.compareTo(new BigDecimal("0")) != 0) {
        throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
      }
      //}
    }
  }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {824320FB-D64C-4C61-878B-96BA58B13B17}
   */
  private void validateDeleteParkDebtorInvoice() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {0914EF25-499D-422C-A9D6-14C00ECFC630}
   */
  private void validateUpdatePostDebtorInvoice(IARDocument bo, IUser user) throws AFMSException {
    validateDebtorInvoice(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {28EF6421-5B89-4708-A2E2-A4B7727C996B}
   */
  private void validateCreateClearingTransaction(IClearingTransaction bo, IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {EA8F91E5-214E-4777-B32C-9473121E9A96}
   */
  private void validateClearingTransaction(IClearingTransaction bo, IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {9E993B08-F004-40AA-8B9C-2954B812B359}
   */
  private void validateClearingTransactionItem(IClearingTransactionItem bo, IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {4C238CBB-CC05-4614-AEA1-8D8FDFD282DF}
   */
  private void validateClearARTransaction(IClearingTransaction bo, IUser user) throws AFMSException {
    BigDecimal totalAmount = new BigDecimal("0");
    IClearingTransactionItem clearingTransactionItemBO = new ARClearingTransactionItemValue();
    for (int i = 0; i < bo.getGLAccountItems().size(); i++) {
      clearingTransactionItemBO = (IClearingTransactionItem) bo.getGLAccountItems().get(i);
      if (clearingTransactionItemBO.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
        totalAmount = totalAmount.add(clearingTransactionItemBO.getPaidAmount());
      }
      else {
        totalAmount = totalAmount.subtract(clearingTransactionItemBO.getPaidAmount());
      }
      Logger.getInstance().logDebug("clearingTransactionItemBO.getClearedAmount() " + clearingTransactionItemBO.getClearedAmount());
      Logger.getInstance().logDebug("clearingTransactionItemBO.getTransactionAmount() " + clearingTransactionItemBO.getTransactionAmount());
      Logger.getInstance().logDebug("clearingTransactionItemBO.getPaidAmount() " + clearingTransactionItemBO.getPaidAmount());
      /* Jason 04th Mar 2004, BugId: 4569
      if (clearingTransactionItemBO.getClearedAmount() != null && !clearingTransactionItemBO.getClearedAmount().equals("")) {
        if (clearingTransactionItemBO.getTransactionAmount().compareTo(clearingTransactionItemBO.getClearedAmount().add(clearingTransactionItemBO.getPaidAmount())) < 0) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{ClearingTransactionItemLabelId.PAID_AMOUNT, ClearingTransactionItemLabelId.TRANSACTION_AMOUNT});
        }
      }
      else {*/
      if (clearingTransactionItemBO.getTransactionAmount().compareTo(clearingTransactionItemBO.getPaidAmount()) < 0) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{ClearingTransactionItemLabelId.PAID_AMOUNT, ClearingTransactionItemLabelId.TRANSACTION_AMOUNT});
      }
      //}

      if (!bo.getOfficeCode().equals(clearingTransactionItemBO.getTransactionOfficeCode())) {
        bo.setDirectPostingJournalFlag(new Boolean(false));
        bo.setInterOfficePostingIndicator(new Boolean(true));
      }

    }
    if (totalAmount.compareTo(new BigDecimal("0.00")) != 0) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.IncorrectDebitCreditBalanceException(new Object[]{});
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {E7D03BFF-B50D-4719-AE44-48854EB0DB8B}
   */
  private void createParkStaffAdvanceBudgetItem(IStaffAdvance bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    GeneralLedgerManager gl = null;
    AccountReceivableSetup ars = null;
    try {
      cf = commonFunctionHome.create();
      gl = generalLedgerManagerHome.create();
      ars = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      setStaffAdvanceItemValue(bo, user);

      for (int i = 0; i < bo.getItems().size(); i++) {
        IStaffAdvanceBudgetItem budgetItem = (IStaffAdvanceBudgetItem) bo.getItems().get(i);
        //Chee Seng 13th Aug 2004, bugId: 6948
        IStaffAdvanceType staffAdvanceTypeBO = ars.retrieveStaffAdvanceType(budgetItem.getAdvanceType(), bo.getCoa(), user);
        //StaffAdvanceType advanceType = staffAdvanceTypeHome.findByPrimaryKey(new StaffAdvanceTypePK(ICMSConnector.IGNORE, budgetItem.getAdvanceType(), bo.getCoa()));
        budgetItem.setGlAccount(staffAdvanceTypeBO.getBudgetaryGlAccount());

        try {
          //Chee Seng 18th Aug 2005, bugId: 13116
          //String budgetStatus = cf.checkAndReserveBudget(budgetItem.getCostCenterOfficeCode(), bo.getFiscalYear(), budgetItem.getCostCenterId(), "", budgetItem.getGlAccount(), bo.getPostingPeriod(), DebitCreditType.DEBIT, budgetItem.getAmountInLocalCurrency(), bo.getDocumentDate(), user);
          String budgetStatus = cf.checkAndReserveBudget(budgetItem.getCostCenterOfficeCode(), bo.getFiscalYear(), budgetItem.getCostCenterId(), "", budgetItem.getGlAccount(), bo.getPostingPeriod(), DebitCreditType.DEBIT, budgetItem.getAmountInLocalCurrency(), bo.getDocumentDate(), bo.getFiscalYear(), bo.getDocumentNumber(), user);
        }
        catch (AFMSException ax) {
          sessionContext.setRollbackOnly();
          throw ax;
        }
        //Chee Seng 7th July 2005, bugId: 11719
        StaffAdvanceBudgetItem staffAdvanceBudgetItem = staffAdvanceBudgetItemHome.create(new StaffAdvanceBudgetItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), budgetItem.getItemNumber()),
            user.getCurrentSiteCode(), budgetItem.getAdvanceType(), budgetItem.getCostCenterId(), budgetItem.getCostCenterOfficeCode(), budgetItem.getGlAccount(), budgetItem.getAmount(), budgetItem.getAmountInLocalCurrency(), budgetItem.getReference(), budgetItem.getReferenceType(), budgetItem.getAssignment(), budgetItem.getRemark(),
            user.getId(), AFMSUtilities.getCurrentTime());
        ACRAuditTrail.insertLogAuditTrail(staffAdvanceBudgetItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (AFMSException ex) {
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param postingPeriod Description of the Parameter
   * @param documentDate Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {48CA495D-E1DD-4A73-99C6-B6D8E9E399EA}
   */
  private void deleteParkStaffAdvanceBudgetItem(String officeCode, Integer fiscalYear, Long documentNumber, Integer postingPeriod, java.sql.Date documentDate, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      //Chee Seng 7th July 2005, bugId: 11719
      List staffAdvanceBudgetItemList = new ArrayList(staffAdvanceBudgetItemHome.findByDocumentNumber(officeCode, fiscalYear, new Long(documentNumber.toString())));
      //Chee Seng 13th Aug 2004, bugId: 6948
      /*
      AbstractCriteria[] filter = {
          new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceBudgetItemDAO.FILTER_FISCALYEAR, "=", fiscalYear),
          new Criteria(com.portrade.ipms.afms.dao.StaffAdvanceBudgetItemDAO.FILTER_DOCUMENTNUMBER, "=", documentNumber)
          };
      OrderBy[] orderBy = {new OrderBy(StaffAdvanceBudgetItemDAO.FILTER_ITEMNUMBER)};
      java.util.List budgetItemList = DAOProxy.list("staffAdvanceBudgetItem", officeCode, user, filter, orderBy);
      //List budgetItemList = new ArrayList(staffAdvanceBudgetItemHome.findByDocumentNumber(officeCode, fiscalYear, new Integer(documentNumber.toString())));
      for (int i = 0; i < budgetItemList.size(); i++) {
        IStaffAdvanceBudgetItem budgetItem = (IStaffAdvanceBudgetItem) budgetItemList.get(i);
        try {
          cf.checkAndReserveBudget(officeCode, fiscalYear, budgetItem.getCostCenterId(), "", budgetItem.getGlAccount(), postingPeriod, DebitCreditType.CREDIT, budgetItem.getAmountInLocalCurrency(), user);
        }
        catch (AFMSException ax) {
          sessionContext.setRollbackOnly();
          throw ax;
        }
        AbstractCriteria[] filter1 = {new Criteria(StaffAdvanceBudgetItemDAO.FILTER_FISCALYEAR, "=", budgetItem.getFiscalYear()), new Criteria(StaffAdvanceBudgetItemDAO.FILTER_DOCUMENTNUMBER, "=", budgetItem.getDocumentNumber()), new Criteria(StaffAdvanceBudgetItemDAO.FILTER_ITEMNUMBER, "=", budgetItem.getItemNumber())};
        DAOProxy.setAuditUserInformation("afmsStaffAdvanceBudgetItem", "StaffAdvanceBudgetItem", budgetItem.getOfficeCode(), filter1, user);
        staffAdvanceBudgetItemHome.remove(new StaffAdvanceBudgetItemPK(budgetItem.getOfficeCode(), budgetItem.getFiscalYear(), budgetItem.getDocumentNumber(), budgetItem.getItemNumber()));
      }
      */
      if (staffAdvanceBudgetItemList != null && staffAdvanceBudgetItemList.size() > 0) {
        for (int i = 0; i < staffAdvanceBudgetItemList.size(); i++) {
          StaffAdvanceBudgetItem staffAdvanceBudgetItem = (StaffAdvanceBudgetItem) staffAdvanceBudgetItemList.get(i);
          //cf.checkAndReserveBudget(officeCode, fiscalYear, staffAdvanceBudgetItem.getCostCenterId(), "", staffAdvanceBudgetItem.getGlAccount(), postingPeriod, DebitCreditType.CREDIT, staffAdvanceBudgetItem.getAmountInLocalCurrency(), documentDate, user);
          cf.checkAndReserveBudget(officeCode, fiscalYear, staffAdvanceBudgetItem.getCostCenterId(), "", staffAdvanceBudgetItem.getGlAccount(), postingPeriod, DebitCreditType.CREDIT, staffAdvanceBudgetItem.getAmountInLocalCurrency(), documentDate, staffAdvanceBudgetItem.getFiscalYear(), staffAdvanceBudgetItem.getDocumentNumber(), user);
          ACRAuditTrail.deleteLogAuditTrail(staffAdvanceBudgetItem, user);
          staffAdvanceBudgetItem.remove();
        }
      }

    }
    catch (AFMSException ax) {
      sessionContext.setRollbackOnly();
      throw ax;
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {FDBB109A-4565-47AE-9E62-E1FC96C40853}
   */
  private void validatePostCheque(IStaffAdvance bo) throws AFMSException {
    if (bo.isPostChequeTransactionFlag() != null && bo.isPostChequeTransactionFlag().booleanValue()) {
      if (bo.isPrintChequeFlag() == null) {
        throw new com.portrade.ipms.afms.exceptions.MandatoryFieldException(new Object[]{GLAccountItemLabelId.PRINT_CHEQUE_FLAG});
      }
    }
    else {
      if (bo.isPrintChequeFlag() != null) {
        throw new com.portrade.ipms.afms.exceptions.InvalidFieldException(new Object[]{GLAccountItemLabelId.PRINT_CHEQUE_FLAG});
      }
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {8E6A229B-F965-4E56-82F6-5A591FCAFA12}
   */
  private void validateCreateParkStaffAdvance(IStaffAdvance bo, IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {ED78701D-3B94-4B5C-8034-DD30CF92DFED}
   */
  private void validateDeleteParkStaffAdvance() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {186EFDAF-6307-46DE-86BA-742CC39EFCAC}
   */
  private void validateUpdateParkStaffAdvance() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {11A5383E-0AE9-4A51-B0B4-E65458ABB55B}
   */
  private void validateUpdatePostedStaffAdvance() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {FCC485A5-A22C-4B6E-A608-149B95020CA7}
   */
  private void validateStaffAdvance(IStaffAdvance bo, IUser user) throws AFMSException {
    GeneralLedgerSetup glSetup = null;
    CommonFunction cf = null;
    AccountReceivableSetup ars = null;

    ICustomer debtor = new DebtorAccountValue();
    ICompanyAccount companyAccount = new CompanyAccountValue();
    IOffice office = null;
    try {
      cf = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
      ars = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      /*
       * Total of staffAdvanceBudgetItem amount shall equal to the staffAdvance amount
       */
      BigDecimal totalBudget = new BigDecimal(0);
      BigDecimal totalBudgetLocal = new BigDecimal(0);

      if (bo.getItems().size() == 0) {
        throw new RecordNotFoundException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
      }
      for (int i = 0; i < bo.getItems().size(); i++) {
        IStaffAdvanceBudgetItem budgetItem = (IStaffAdvanceBudgetItem) bo.getItems().get(i);
        totalBudget = totalBudget.add(budgetItem.getAmount());
        if (budgetItem.getAmountInLocalCurrency() != null) {
          totalBudgetLocal = totalBudgetLocal.add(budgetItem.getAmountInLocalCurrency());
        }

        try {
          /* Get Chart of Account for the selected office */
          office = (IOffice) glSetup.retrieveOffice(bo.getOfficeCode(), user);
        }
        catch (java.rmi.RemoteException ex) {
          throw new javax.ejb.EJBException(ex.toString());
        }

        Logger.getInstance().logDebug("budgetItem.getAdvanceType() = " + budgetItem.getAdvanceType());

        Logger.getInstance().logDebug("budgetItem.getOfficeCode() = " + budgetItem.getOfficeCode());

        //Chee Seng 13th Aug 2004, bugId: 6849
        IStaffAdvanceType staffAdvanceTypeBO = ars.retrieveStaffAdvanceType(budgetItem.getAdvanceType(), office.getCOA(), user);
        //StaffAdvanceType staffAdvanceType = staffAdvanceTypeHome.findByPrimaryKey(new StaffAdvanceTypePK(ICMSConnector.IGNORE, budgetItem.getAdvanceType(), office.getCOA()));
        try {
          Logger.getInstance().logDebug("staffAdvanceType.getBudgetaryGlAccount() = " + staffAdvanceTypeBO.getBudgetaryGlAccount());
          companyAccount = glSetup.retrieveCompanyAccount(staffAdvanceTypeBO.getBudgetaryGlAccount(), budgetItem.getCostCenterOfficeCode(), user);
        }
        catch (AFMSException ex) {
          throw new ValueNotExistException(new Object[]{((bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) ? StaffAdvanceLabelId.GL_INDICATOR_ACCOUNT : StaffAdvanceLabelId.RECONCILIATION_ACCOUNT), CompanyAccountLabelId.COMPANY_ACCOUNT});
        }
        if (companyAccount.isDeleted().booleanValue()) {
          throw new AccountMarkForDeletionException(new Object[]{((bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) ? StaffAdvanceLabelId.GL_INDICATOR_ACCOUNT : StaffAdvanceLabelId.RECONCILIATION_ACCOUNT), staffAdvanceTypeBO.getBudgetaryGlAccount(), budgetItem.getCostCenterOfficeCode()});
        }
        if (companyAccount.isBlockPost().booleanValue()) {
          throw new AccountBlockForPostingException(new Object[]{StaffAdvanceTypeLabelId.GL_ACCOUNT, staffAdvanceTypeBO.getBudgetaryGlAccount(), budgetItem.getCostCenterOfficeCode()});
        }
        Logger.getInstance().logDebug("companyAccount.getReconciliationAccount() " + companyAccount.getReconciliationAccount());
        Logger.getInstance().logDebug("ReconciliationAccountType.NOT_CONTROL_ACC " + ReconciliationAccountType.NOT_CONTROL_ACC);

//		Erma, 10/06/10 BugId: 28679 - No need to check for control account
       /* if (!companyAccount.getReconciliationAccount().equals(ReconciliationAccountType.NOT_CONTROL_ACC)) {
          throw new NotControlAccountException(new Object[]{StaffAdvanceTypeLabelId.GL_ACCOUNT, staffAdvanceTypeBO.getBudgetaryGlAccount(), budgetItem.getCostCenterOfficeCode()});
        }*/
        
      }

      if (totalBudget.compareTo(bo.getAmount()) != 0) {
        throw new com.portrade.ipms.afms.exceptions.MustBeSameException(new Object[]{StaffAdvanceLabelId.TOTAL_AMOUNT, StaffAdvanceBudgetItemLabelId.ITEM_TOTAL_AMOUNT});
      }
      if ((bo.getAmountInLocalCurrency() == null && totalBudgetLocal.compareTo(new BigDecimal(0)) > 0) ||
          (bo.getAmountInLocalCurrency() != null && totalBudgetLocal.compareTo(bo.getAmountInLocalCurrency()) != 0)) {
        throw new com.portrade.ipms.afms.exceptions.MustBeSameException(new Object[]{StaffAdvanceLabelId.TOTAL_LOCAL_AMOUNT, StaffAdvanceBudgetItemLabelId.ITEM_TOTAL_LOCAL_AMOUNT});
      }

      /*
       * Validate Debtor's Status
       */
      try {
        debtor = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
      }
      catch (AFMSException ex) {
        throw new com.portrade.ipms.afms.exceptions.DebtorsForCashAdvanceException(new Object[]{});
      }
      if (debtor.getAccountStatus().equals(AccStatus.DELETED)) {
        throw new AccountMarkForDeletionException(new Object[]{StaffAdvanceLabelId.DEBTOR_CODE, bo.getSubledgerAccount(), bo.getOfficeCode()});
      }
      if (!debtor.getAccountStatus().equals(AccStatus.ACTIVE)) {
        throw new AccountNotActiveException(new Object[]{StaffAdvanceLabelId.DEBTOR_CODE});
      }
      if (debtor.getDebtorCategory().equals(DebCategory.NORMAL)) {
        throw new IncorrectValueException(new Object[]{StaffAdvanceLabelId.DEBTOR_CATEGORY, StaffAdvanceLabelId.NOT_NORMAL_STAFF});
      }

      /*
       * Validate Debtor's or Special GL Indicator's GL Account
       */
      Logger.getInstance().logDebug("bo.getAdvanceGLAccount() " + bo.getAdvanceGLAccount());
      try {
        companyAccount = glSetup.retrieveCompanyAccount(bo.getAdvanceGLAccount(), bo.getOfficeCode(), user);
      }
      catch (AFMSException ex) {
        throw new ValueNotExistException(new Object[]{((bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) ? StaffAdvanceLabelId.GL_INDICATOR_ACCOUNT : StaffAdvanceLabelId.RECONCILIATION_ACCOUNT), CompanyAccountLabelId.COMPANY_ACCOUNT});
      }
      if (companyAccount.isDeleted().booleanValue()) {
        throw new AccountMarkForDeletionException(new Object[]{((bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) ? StaffAdvanceLabelId.GL_INDICATOR_ACCOUNT : StaffAdvanceLabelId.RECONCILIATION_ACCOUNT), bo.getAdvanceGLAccount(), bo.getOfficeCode()});
      }
      if (companyAccount.isBlockPost().booleanValue()) {
        throw new AccountBlockForPostingException(new Object[]{((bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) ? StaffAdvanceLabelId.GL_INDICATOR_ACCOUNT : StaffAdvanceLabelId.RECONCILIATION_ACCOUNT), bo.getAdvanceGLAccount(), bo.getOfficeCode()});
      }
      Logger.getInstance().logDebug("bo.getAdvanceGLAccount() " + bo.getAdvanceGLAccount());
      Logger.getInstance().logDebug("companyAccount.getReconciliationAccount() " + companyAccount.getReconciliationAccount());
      Logger.getInstance().logDebug("ReconciliationAccountType.AR_CONTROL_ACC " + ReconciliationAccountType.AR_CONTROL_ACC);
      if (!companyAccount.getReconciliationAccount().equals(ReconciliationAccountType.AR_CONTROL_ACC)) {
        throw new MustBeControlAccountException(new Object[]{((bo.getSpecialGLIndicator() != null && !bo.getSpecialGLIndicator().equals("")) ? StaffAdvanceLabelId.GL_INDICATOR_ACCOUNT : StaffAdvanceLabelId.RECONCILIATION_ACCOUNT), bo.getAdvanceGLAccount(), bo.getOfficeCode()});
      }

      /*
       * Validate Bank GL Account
       */
      /*
       * Jason 22th Sept 2003 FIX ME BY KAREN
       * try {
       * for (int i=0; i < bo.getItems().size(); i++) {
       * IStaffAdvanceBudgetItem staffAdvanceBudgetItem = (IStaffAdvanceBudgetItem) bo.getItems().get(i);
       * companyAccount = (ICompanyAccount) gl.retrieveCompanyAccount(staffAdvanceBudgetItem.getGlAccount(), bo.getOfficeCode(), user);
       * }
       * }
       * catch (AFMSException ex) {
       * throw new RecordNotFoundException(new Object[] { StaffAdvanceLabelId.GL_ACCOUNT });
       * }
       * if (companyAccount.isDeleted().booleanValue()) {
       * throw new AccountMarkForDeletionException(new Object[] { StaffAdvanceLabelId.GL_ACCOUNT });
       * }
       * if (companyAccount.isBlockPost().booleanValue()) {
       * throw new AccountBlockForPostingException(new Object[] { StaffAdvanceLabelId.GL_ACCOUNT });
       * }
       * if (!companyAccount.getReconciliationAccount().equals(ReconciliationAccountType.NOT_CONTROL_ACC)) {
       * throw new NotControlAccountException(new Object[] { StaffAdvanceLabelId.GL_ACCOUNT });
       * }
       */
    }
    catch (java.rmi.RemoteException rx) {
      throw new javax.ejb.EJBException(rx.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {BEF09333-1524-4BDA-812A-0DEF4B125BED}
   */
  private void createLiquidateStaffAdvanceItems(ILiquideStaffAdvance bo, IUser user) throws AFMSException {
    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(i);

        //Chee Seng 6th July 2005, bugId: 11719
        StaffAdvanceLiquidationItem staffAdvanceLiquidationItem = staffAdvanceLiquidateItemHome.create(new StaffAdvanceLiquidationItemPK(bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber(), new Integer(i + 1)),
            user.getCurrentSiteCode(), item.getAdvanceType(), item.getStaffAdvanceItemNumber(), item.getStaffAdvanceAmount(), item.getBudgetItemOfficeCode(), item.getBudgetItemCostCenter(), item.getStaffAdvanceAmountInLocalCurrency(), item.getBudgetItemGLAccount(), user.getId(), AFMSUtilities.getCurrentTime());
        ACRAuditTrail.insertLogAuditTrail(staffAdvanceLiquidationItem, user);
      }
    }
    catch (javax.ejb.DuplicateKeyException ex) {
      throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{StaffAdvanceLiquidationItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.CreateException ex) {
      throw new CannotCreateRecordException(new Object[]{StaffAdvanceLiquidationItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {72FEDF16-8669-4746-A7A6-F38D8D1A4642}
   */
  private void validateCreateLiquidateStaffAdvance() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @exception AFMSException Description of the Exception
   * @modelguid {D1A5C34F-9360-4075-B861-007AC9E5DD66}
   */
  private void validateUpdateLiquidateStaffAdvance() throws AFMSException { }


  /**
   * @exception AFMSException Description of the Exception
   * @modelguid {B01D831B-5B9D-4EE4-8AF1-A8D74BA4E342}
   */
  private void validateDeleteParkLiquidateStaffAdvance() throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {F2624F55-042D-4C82-BDAE-B3A86A4E3DF4}
   */
  private void validateLiquidateStaffAdvance(ILiquideStaffAdvance bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    GeneralLedgerSetup glSetup = null;
    try {
      cf = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      /*
       * validate Debtor's status
       */
      ICustomer debtor = (ICustomer) retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);

      if (debtor.getAccountStatus().equals(AccStatus.DELETED)) {
        throw new AccountMarkForDeletionException(new Object[]{StaffAdvanceLiquidationLabelId.DEBTOR_CODE, bo.getSubledgerAccount(), bo.getOfficeCode()});
      }

      if (!debtor.getAccountStatus().equals(AccStatus.ACTIVE)) {
        throw new AccountNotActiveException(new Object[]{StaffAdvanceLiquidationLabelId.DEBTOR_CODE});
      }

      /*
       * validate header's Reconciliattion Account
       */
      Logger.getInstance().logDebug("bo.getGLAccount() = " + bo.getGLAccount());
      Logger.getInstance().logDebug("bo.getOfficeCode() = " + bo.getOfficeCode());

      ICompanyAccount glAccount = (ICompanyAccount) glSetup.retrieveCompanyAccount(bo.getGLAccount(), bo.getOfficeCode(), user);

      if (glAccount.isDeleted().booleanValue()) {
        throw new AccountMarkForDeletionException(new Object[]{StaffAdvanceLabelId.GL_ACCOUNT, bo.getGLAccount(), bo.getOfficeCode()});
      }

      if (glAccount.isBlockPost().booleanValue()) {
        throw new AccountBlockForPostingException(new Object[]{StaffAdvanceLabelId.GL_ACCOUNT, bo.getGLAccount(), bo.getOfficeCode()});
      }

      if (!glAccount.getReconciliationAccount().equals(ReconciliationAccountType.AR_CONTROL_ACC)) {
        throw new MustBeControlAccountException(new Object[]{StaffAdvanceLabelId.GL_ACCOUNT, bo.getGLAccount(), bo.getOfficeCode()});
      }

      /*
       * validate item's GL Account
       */
      BigDecimal totalItemAmount = new BigDecimal(0);
      for (int i = 0; i < bo.getItems().size(); i++) {
        ILiquideStaffAdvanceItem liqItem = (ILiquideStaffAdvanceItem) bo.getItems().get(i);
        Logger.getInstance().logDebug("liqItem.getGLAccount() = " + liqItem.getGLAccount());
        Logger.getInstance().logDebug("liqItem.getBudgetItemOfficeCode() = " + liqItem.getBudgetItemOfficeCode());
        glAccount = (ICompanyAccount) glSetup.retrieveCompanyAccount(liqItem.getGLAccount(), liqItem.getBudgetItemOfficeCode(), user);

        if (glAccount.isDeleted().booleanValue()) {
          throw new AccountMarkForDeletionException(new Object[]{StaffAdvanceLabelId.GL_ACCOUNT, liqItem.getGLAccount(), liqItem.getBudgetItemOfficeCode()});
        }

        if (glAccount.isBlockPost().booleanValue()) {
          throw new AccountBlockForPostingException(new Object[]{StaffAdvanceLabelId.GL_ACCOUNT, liqItem.getGLAccount(), liqItem.getBudgetItemOfficeCode()});
        }
//		Erma, 10/06/10 BugId: 28679 - No need to check for control account
        /*if (!glAccount.getReconciliationAccount().equals(ReconciliationAccountType.NOT_CONTROL_ACC)) {
          throw new NotControlAccountException(new Object[]{StaffAdvanceLabelId.GL_ACCOUNT, liqItem.getGLAccount(), liqItem.getBudgetItemOfficeCode()});
        }*/
        if (liqItem.getBudgetItemOfficeCode() != null && !bo.getOfficeCode().equals(liqItem.getBudgetItemOfficeCode())) {
          bo.setInterOfficePostingIndicator(new Boolean(true));
        }
        totalItemAmount = totalItemAmount.add(liqItem.getAmount());
      }

    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {BE9AFB38-36C5-4F45-AB78-FCFEE9D7DC89}
   */
  private void calculateTaxForLiquidateStaffAdvanceItems(ILiquideStaffAdvance bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    List newItemList = new ArrayList();
    BigDecimal taxAmount = new BigDecimal("0");
    int j = 0;

    try {
      for (int i = 0; i < bo.getItems().size(); i++) {
        ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(i);

        if (item.getTaxCode() != null && !item.getTaxCode().equals("")) {
          ITaxCalculation taxCal1 = (ITaxCalculation) cf.calculateTax(item.getTaxCode(), item.getAmount(), user);

          if (taxCal1.getTaxAmount().compareTo(new BigDecimal(0)) > 0) {
            bo.setTaxIndicator(Boolean.TRUE);
            item.setAmount(item.getAmount().subtract(taxCal1.getTaxAmount()));

            Integer originalItemNumber = item.getItemNo();
            item.setItemNo(new Integer(++j));
            newItemList.add(item);

            ILiquideStaffAdvanceItem newTaxItem = new LiquideStaffAdvanceItemValue();
            newTaxItem.setStaffAdvanceItemNumber(originalItemNumber);
            newTaxItem.setAdvanceType(item.getAdvanceType());
            newTaxItem.setCostCenterId(item.getCostCenterId());
            newTaxItem.setStaffAdvanceAmount(item.getStaffAdvanceAmount());
            newTaxItem.setStaffAdvanceAmountInLocalCurrency(item.getStaffAdvanceAmountInLocalCurrency());
            newTaxItem.setParentItemNumber(new Integer(j));
            newTaxItem.setItemNo(new Integer(++j));
            newTaxItem.setTaxIndicator(Boolean.TRUE);
            newTaxItem.setTaxCode(item.getTaxCode());
            newTaxItem.setAmount(taxCal1.getTaxAmount());
            newTaxItem.setGLAccount(taxCal1.getGLAccount());
            newItemList.add(newTaxItem);

            taxAmount = taxAmount.add(taxCal1.getTaxAmount());
          }
          else {
            item.setItemNo(new Integer(++j));
            newItemList.add(item);
          }
        }
        else {
          item.setItemNo(new Integer(++j));
          newItemList.add(item);
        }
      }
    }
    catch (java.rmi.RemoteException rx) {
      throw new javax.ejb.EJBException(rx.toString());
    }
    bo.setTaxAmount(taxAmount);
    bo.setItems(newItemList);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {545A31F6-BA76-4A00-BC74-6E8B0674C8F2}
   */
  private void validateCreateInterOfficeCollection(IInterOfficeCollection bo, IUser user) throws AFMSException {
    validateInterOfficeCollection(bo, user);
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {67D654E6-6566-408D-8191-907661DDD9DA}
   */
  private void validateInterOfficeCollection(IInterOfficeCollection bo, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException ex) {
        Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
      }

      if (bo.getOfficeCode().equals(bo.getCrossOfficeCode())) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.CannotBeTheSameException(new Object[]{InterOfficeCollectionLabelId.CROSS_OFFICE_CODE, InterOfficeCollectionLabelId.OFFICE_CODE});
      }
      //Jason 07th Aug 2003 ICustomer debtorAccount = DebtorAccount(bo.getCrossOfficeCode(), bo.getDebtorCode(), user);

      if (bo.getInvoiceNumber() != null && bo.getId() != null) {
        IAbstractGLAccountItem invoice = cf.retrieveGLAccountItem(bo.getId(), user);

        if (!ProcessStatus.POST.equals(invoice.getProcessStatus())) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.RecordProcessStatusNotPostedException(new Object[]{InvoiceLabelId.INVOICE});
        }
        if (invoice.isReversalDocumentIndicator() != null) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.HasBeenReversedException(new Object[]{InvoiceLabelId.INVOICE});
        }
        if (invoice.getClearedRefDocumentNumber() != null) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.InvoiceHasBeenPaidException(new Object[]{InvoiceLabelId.INVOICE});
        }
        if (invoice.getSubledgerAccount() != null && !invoice.getSubledgerAccount().equals(bo.getDebtorCode())) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.ValueNotExistException(new Object[]{InterOfficeCollectionLabelId.CROSS_OFFICE_CODE_AND_INVOICE_NUMBER_AND_DEBTOR_CODE, InvoiceLabelId.INVOICE});
        }
        if (invoice.getClearedAmount() == null) {
          invoice.setClearedAmount(new BigDecimal(0.00));
        }

        BigDecimal totalClearedAmount = invoice.getClearedAmount().add(bo.getAmount());
        if (totalClearedAmount.compareTo(bo.getInvoiceAmount()) > 0) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{InterOfficeCollectionLabelId.CLEARED_AMOUNT, InterOfficeCollectionLabelId.INVOICE_AMOUNT});
        }
      }
    }
    catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
    catch (java.rmi.RemoteException ex) {
      throw new com.portrade.ipms.afms.exceptions.RemoteException(new Object[]{ex});
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {AA34D493-D4F1-4536-B984-33364708899F}
   */
  private void calculateTaxForInvoiceItemWithRems(com.portrade.ipms.afms.IARDocument bo, IUser user) throws AFMSException {
    IInvoiceItem item = null;
    ITaxCalculation taxCalculationBO = new TaxCalculationValue();
    IInvoiceItem invoiceItemBO = new DebtorInvoiceItemValue();
    ICalculateExchangeRateAmount calculateExchangeRateAmount = new CalculateExchangeRateAmountValue();
    CommonFunction commonFunction = null;
    GeneralLedgerManager generalLedgerManager = null;
    boolean vatInvoiceIndicator = false;

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      int i = 0;
      while (i < bo.getItems().size()) {
        item = (IInvoiceItem) bo.getItems().get(i);
        if (item.getTaxCode() != null && !item.getTaxCode().equals("")) {
          taxCalculationBO = commonFunction.calculateTax(item.getTaxCode(), item.getAmount(), user);
          if (taxCalculationBO.getTaxAmount() != null && taxCalculationBO.getTaxAmount().compareTo(new BigDecimal("0")) != 0) {
            item.setAmount(item.getAmount().subtract(taxCalculationBO.getTaxAmount()));
            item.setAmountInLocalCurrency(null);
            invoiceItemBO = new DebtorInvoiceItemValue();
            invoiceItemBO.copyPropertiesFrom(item);
            invoiceItemBO.setQuantity(item.getQuantity());
            invoiceItemBO.setGLAccount(taxCalculationBO.getGLAccount());
            invoiceItemBO.setPostingKey(taxCalculationBO.getPostingKey());
            invoiceItemBO.setAmount(taxCalculationBO.getTaxAmount());
            invoiceItemBO.setAmountInLocalCurrency(null);
            invoiceItemBO.setTariffCode(item.getTariffCode());
            invoiceItemBO.setTaxIndicator(new Boolean(true));
            invoiceItemBO.setParentItemNumber(new Integer(i + 1));
            invoiceItemBO.setUOM(item.getUOM());
            invoiceItemBO.setUnitPrice(item.getUnitPrice());
            bo.getItems().add(i + 1, invoiceItemBO);
            i = i + 1;
          }

        }
        i = i + 1;
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ExtraInfoException(ex, new Object[]{item.getDocumentNumber(), item.getGLAccount(), item.getAmount(), item.getAmountInLocalCurrency()});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {37ADFB76-8C63-4B1D-A23D-C1D9CA910A9F}
   */
  private IARDocument createDebtorInvoiceWithRems(IARDocument bo, IUser user) throws AFMSException {
    Long documentNumber = null;
    String invoiceNumber = null;
    Integer postingPeriod = null;
    java.sql.Date documentDueDate = null;
    Invoice invoice = null;
    InvoiceItem invoiceItem = null;
    IInvoiceItem item = null;
    BigDecimal totalAmount = new BigDecimal(0);
    BigDecimal totalAmountInLocalCurrency = new BigDecimal(0);
    CommonFunction commonFunction = null;
    IAbstractGLAccountItem accountItemBO = new AbstractGLAccountItemValue();
    ICustomer customerBO = new DebtorAccountValue();
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    java.util.List invoiceList = new java.util.ArrayList();
    String idSet = null;

    postParkedDocumentBO.setId(bo.getId());

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      // reconciliation account
      customerBO = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);

      bo.setGLAccount(customerBO.getReconAccountId());
      bo.setPaymentTerm(customerBO.getPaymentTermType());
      java.sql.Date entryDate = java.sql.Date.valueOf(String.valueOf(AFMSUtilities.getCalendar().get(Calendar.YEAR)) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.MONTH) + 1) + "-" + String.valueOf(AFMSUtilities.getCalendar().get(Calendar.DATE)));
      documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), entryDate, bo.getDocumentDate(), bo.getPostingDate(), user);
      bo.setDocumentDueDate(documentDueDate);

      if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")) {
        try {
          //Chee Seng 13th Aug 2004, bugId: 6948
          AbstractCriteria[] filter = {
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
              new Criteria(com.portrade.ipms.afms.dao.InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber())
              };
          invoiceList = DAOProxy.list("invoice", user, filter);
          if (invoiceList.size() > 0) {
            throw new com.portrade.ipms.afms.exceptions.RecordAlreadyExistedException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
          }
        }
        catch (java.sql.SQLException ex) {
					if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE_NUMBER});
					}
        }
      }
      else {
        if (bo.getInvoicePrefix() != null && !bo.getInvoicePrefix().equals("")) {
          generateInvoiceNumber(bo, user);
        }
      }

      validateCreateParkDebtorInvoice(bo, user);
      validateParkDebtorInvoice(bo, user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ExtraInfoException(ex, new Object[]{bo.getDocumentNumber(), bo.getGLAccount(), bo.getAmount(), bo.getAmountInLocalCurrency()});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    //Assign value from invoice to glaccount item header
    accountItemBO = new AbstractGLAccountItemValue();
    accountItemBO.copyPropertiesFrom(bo);
    accountItemBO.setHeaderIndicator(new Boolean(true));
    postParkedDocumentBO.addGLAccountItems(accountItemBO);

    for (int i = 0; i < bo.getItems().size(); i++) {
      item = (IInvoiceItem) bo.getItems().get(i);

      //Jason 17th Oct 2003
      if (i == 0) {
        idSet = item.getId().toString();
      }
      else {
        idSet = idSet + ", " + item.getId().toString();
      }

      item.setCustomerType(bo.getCustomerType());
      item.setOfficeCode(bo.getOfficeCode());
      item.setItemNo(new Integer(i + 1));

      //assign value from invoice item to account item detail
      accountItemBO = new AbstractGLAccountItemValue();
      accountItemBO.copyPropertiesFrom(item);
      accountItemBO.setDocumentType(bo.getDocumentType());
      accountItemBO.setDocumentDate(bo.getDocumentDate());
      accountItemBO.setPostingDate(bo.getPostingDate());
      accountItemBO.setProcessStatus(bo.getProcessStatus());
      accountItemBO.setCurrency(bo.getCurrency());
      accountItemBO.setHeaderIndicator(new Boolean(false));
			
      postParkedDocumentBO.addGLAccountItems(accountItemBO);
    }

    try {
      java.util.List glAccountItemList = commonFunction.postDocument(postParkedDocumentBO.getGLAccountItems(), bo.getBudgetActionType(), user);
      postParkedDocumentBO.setGLAccountItems(glAccountItemList);
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

    bo.copyPropertiesFrom((IAbstractGLAccountItem) postParkedDocumentBO.getGLAccountItems().get(0));

    try {
      try {
        IOverridingApproval overridingApprovalBO = checkCreditLimit(customerBO, bo.getAmount(), bo.getFiscalYear(), true, null, user);
        BigDecimal overRideAmount = overridingApprovalBO.getAmount();
        if (overRideAmount.compareTo(new BigDecimal("0")) != 0) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.AccountBalanceNotEnoughException(new Object[]{});
        }
      }
      catch (AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ExtraInfoException(ex, new Object[]{bo.getDocumentNumber(), bo.getGLAccount(), bo.getAmount(), bo.getAmountInLocalCurrency()});
    }

    //create invoice master
    try {
      try {
        //Chee Seng 3rd Feb 2005, bugId: 9790
        invoice = invoiceHome.create(new InvoicePK(bo.getCustomerType(), bo.getOfficeCode(), bo.getFiscalYear(), bo.getDocumentNumber()), bo.getInvoiceNumber(), bo.getInvoicePrefix(), bo.getDocumentDueDate(), bo.getTranslationDate(), bo.getSCN(), bo.getPaymentTerm(), bo.isPaymentBlockStatus(), bo.getSurchargeCount(), bo.getLastSurchargeDate(), bo.getLastSurchargeDueDate(), bo.getLocation(), bo.getProtestStatus(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
      }
      catch (javax.ejb.DuplicateKeyException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      catch (javax.ejb.CreateException ex) {
        sessionContext.setRollbackOnly();
        throw new CannotCreateRecordException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
      }
      catch (java.rmi.RemoteException ex) {
        sessionContext.setRollbackOnly();
        throw new javax.ejb.EJBException(ex.toString());
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ExtraInfoException(ex, new Object[]{bo.getDocumentNumber(), bo.getGLAccount(), bo.getAmount(), bo.getAmountInLocalCurrency()});
    }

    try {
      //create invoice item
      for (int i = 0; i < bo.getItems().size(); i++) {
        item = (IInvoiceItem) bo.getItems().get(i);
        item.setScn(bo.getSCN());
        try {
          //Chee Seng 11th June 2004, bugId: 6116
          //Chee Seng 29th Nov 2004, bugId: 8703
          invoiceItem = invoiceItemHome.create(new InvoiceItemPK(bo.getCustomerType(), bo.getFiscalYear(), bo.getOfficeCode(), bo.getDocumentNumber(), item.getItemNo()), item.getQuantity(), item.getTariffCode(), item.getUOM(), item.getUnitPrice(), item.getCargoType(), item.getCommodityType(), item.getQuantity2(), item.getUOM2(), item.getTonnage(), item.getCostCenterOfficeCode(), item.getDifferentOfficeGLAccount(), item.getDifferentOfficeCostCenterId(), item.getImportExportFlag(), item.getBlNumber(), item.getScn(), user.getCurrentSiteCode(), user.getId(), AFMSUtilities.getCurrentTime());
        }
        catch (javax.ejb.DuplicateKeyException ex) {
          sessionContext.setRollbackOnly();
          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
        }
        catch (javax.ejb.CreateException ex) {
          sessionContext.setRollbackOnly();
          throw new CannotCreateRecordException(new Object[]{InvoiceItemLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NO});
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
      }
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ExtraInfoException(ex, new Object[]{item.getDocumentNumber(), item.getGLAccount(), item.getAmount(), item.getAmountInLocalCurrency()});
    }

    //Jason 17th Oct 2003 Update REMS Billing
    try {
      if (idSet != null && !idSet.equals("")) {
        ExternalSystemConnector.updateRealEstateSystem(new Integer(1), idSet);
      }
    }
    catch (java.sql.SQLException ex) {
      sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{RemsBillingToAfmsLabelId.ID});
			}
    }

    /* try {
      //deleteRemsBilling(postParkedDocumentBO.getId(), user);
    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ExtraInfoException(ex, new Object[]{bo.getDocumentNumber(), bo.getGLAccount(), bo.getAmount(), bo.getAmountInLocalCurrency()});
    }
  */
    return bo;
  }


  /**
   * Description of the Method
   *
   * @param id Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {44BC87C4-F907-4A5D-9395-B1E3246B65AB}
   */
  private void deleteRemsBilling(Integer id, IUser user) throws AFMSException {
    try {
      com.portrade.ipms.afms.dao.RemsBillingToAfmsDAO dao = (com.portrade.ipms.afms.dao.RemsBillingToAfmsDAO) DAOProxy.getDAO("remsBillingToAfms", user);
      if (dao != null) {
        dao.deleteRemsBillingToAfms(id);
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{RemsBillingToAfmsLabelId.ID});
      }
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{RemsBillingToAfmsLabelId.ID});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param debtorClearingTransactionList Description of the Parameter
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {5D665097-9AF7-4F8B-BFDE-7FAAFA9A70F6}
   */
  private void createDebtorClearingTransaction(java.util.List debtorClearingTransactionList, IAbstractGLAccountItem bo, IUser user) throws AFMSException {
    java.util.List debitItemList = new java.util.ArrayList();
    java.util.List creditItemList = new java.util.ArrayList();
    java.util.List tempClearingTransactionList = new java.util.ArrayList();
    IDebtorClearingTransaction tempBO = null;
    CommonFunction commonFunction = null;
    
    Logger.getInstance().logDebug("in createDebtorClearingTransaction");

    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    for (int i = 0; i < debtorClearingTransactionList.size(); i++) {
      IDebtorClearingTransaction debtorClearingTransactionBO = (IDebtorClearingTransaction) debtorClearingTransactionList.get(i);
      if (debtorClearingTransactionBO.getDebitCreditType().equals(IConstants.DebitCreditType.DEBIT)) {
        debitItemList.add(debtorClearingTransactionBO);
      }
      else {
        creditItemList.add(debtorClearingTransactionBO);
      }
    }
    sortListByDocumentDate(debitItemList);
    sortListByDocumentDate(creditItemList);

    int j = 0;
    try {
      for (int i = 0; i < debitItemList.size(); i++) {
        IDebtorClearingTransaction debitItem = (IDebtorClearingTransaction) debitItemList.get(i);
        while (j < creditItemList.size()) {
          IDebtorClearingTransaction creditItem = (IDebtorClearingTransaction) creditItemList.get(j);
          tempBO = new DebtorClearingTransactionValue();
          tempBO.setOfficeCode(bo.getOfficeCode());
          tempBO.setFiscalYear(bo.getFiscalYear());
          tempBO.setDocumentNumber(bo.getDocumentNumber());
          tempBO.setFiscalYear1(debitItem.getFiscalYear());
          tempBO.setDocumentNumber1(debitItem.getDocumentNumber());
          tempBO.setItemNumber1(debitItem.getItemNumber());
          tempBO.setDebitCreditType1(debitItem.getTransactionDebitCreditType());
          tempBO.setFiscalYear2(creditItem.getFiscalYear());
          tempBO.setDocumentNumber2(creditItem.getDocumentNumber());
          tempBO.setItemNumber2(creditItem.getItemNumber());
          tempBO.setDebitCreditType2(creditItem.getTransactionDebitCreditType());
          Logger.getInstance().logDebug("debitItem.getClearedAmountInLocalCurrency() = " + debitItem.getClearedAmountInLocalCurrency());
					Logger.getInstance().logDebug("creditItem.getClearedAmountInLocalCurrency() = " + creditItem.getClearedAmountInLocalCurrency());
          if (debitItem.getClearedAmountInLocalCurrency().compareTo(creditItem.getClearedAmountInLocalCurrency()) > 0) {
            tempBO.setClearedAmountInLocalCurrency(creditItem.getClearedAmountInLocalCurrency());
            ICalculateExchangeRateAmount calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(tempBO.getClearedAmount(), tempBO.getClearedAmountInLocalCurrency(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
            tempBO.setClearedAmount(calculateExchangeRateAmountBO.getAmount());
            tempBO.setClearedAmountInLocalCurrency(calculateExchangeRateAmountBO.getAmountLocalCurrency());
            tempClearingTransactionList.add(tempBO);
            j++;
            debitItem.setClearedAmountInLocalCurrency(debitItem.getClearedAmountInLocalCurrency().subtract(creditItem.getClearedAmountInLocalCurrency()));
          }
          else if (debitItem.getClearedAmountInLocalCurrency().compareTo(creditItem.getClearedAmountInLocalCurrency()) < 0) {
            tempBO.setClearedAmountInLocalCurrency(debitItem.getClearedAmountInLocalCurrency());
            ICalculateExchangeRateAmount calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(tempBO.getClearedAmount(), tempBO.getClearedAmountInLocalCurrency(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
            tempBO.setClearedAmount(calculateExchangeRateAmountBO.getAmount());
            tempBO.setClearedAmountInLocalCurrency(calculateExchangeRateAmountBO.getAmountLocalCurrency());
            tempClearingTransactionList.add(tempBO);
            creditItem.setClearedAmountInLocalCurrency(creditItem.getClearedAmountInLocalCurrency().subtract(debitItem.getClearedAmountInLocalCurrency()));
            break;
          }
          else {
            tempBO.setClearedAmountInLocalCurrency(creditItem.getClearedAmountInLocalCurrency());
            ICalculateExchangeRateAmount calculateExchangeRateAmountBO = commonFunction.calculateExchangeRateAmount(tempBO.getClearedAmount(), tempBO.getClearedAmountInLocalCurrency(), bo.getExchangeRate(), bo.getCurrency(), bo.getOfficeCode(), bo.getDocumentDate(), user);
            tempBO.setClearedAmount(calculateExchangeRateAmountBO.getAmount());
            tempBO.setClearedAmountInLocalCurrency(calculateExchangeRateAmountBO.getAmountLocalCurrency());
            tempClearingTransactionList.add(tempBO);
            j++;
            break;
          }
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      for (int i = 0; i < tempClearingTransactionList.size(); i++) {
        IDebtorClearingTransaction debtorClearingTransactionBO = (IDebtorClearingTransaction) tempClearingTransactionList.get(i);
        com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO dao = (com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO) DAOProxy.getDAO("debtorClearingTransaction", user);
        dao.createDebtorClearingTransaction(debtorClearingTransactionBO, user);
      }
    }
    catch (SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorClearingTransactionLabelId.ID});
			}
    }
  }


  /**
   * Description of the Method
   *
   * @param details Description of the Parameter
   * @modelguid {4A1CBBB3-50A3-4124-9205-C11990A32964}
   */
  private void sortListByDocumentDate(List details) {
    Collections.sort(details,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof IDebtorClearingTransaction && o2 instanceof IDebtorClearingTransaction) {
                IDebtorClearingTransaction d1 = (IDebtorClearingTransaction) o1;
                IDebtorClearingTransaction d2 = (IDebtorClearingTransaction) o2;
                if (d1.getDocumentDate() != null && !d1.getDocumentDate().equals("")) {
                  returnValue = d1.getDocumentDate().compareTo(d2.getDocumentDate());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {2B048E00-553C-4023-A0E9-D99DFEF219F7}
   */
  private void validateSuspendDebtor(ICustomer bo, IUser user) throws AFMSException {

    ICustomer customerVO = this.retrieveDebtorAccount(
        bo.getOfficeCode(), bo.getAccountNumber(), user);
    Logger.getInstance().logDebug("Session Bean validateSuspendDebtor getOfficeCode=" + bo.getOfficeCode());
    if (!AccStatus.ACTIVE.equals(customerVO.getAccountStatus())
        && !AccCategory.CREDIT.equals(customerVO.getAccountCategory())) {
      throw new com.portrade.ipms.afms.exceptions.AccountNotActiveException(
          new Object[]{});
    }

  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {9920FCFB-08EF-4EED-9E49-5E4DFDE5B526}
   */
  private void validateCreateDebtorCashDeposit(IDebtorCashDeposit bo, IUser user) throws AFMSException {
    GeneralLedgerSetup glSetup = null;

    try {
      glSetup = generalLedgerSetupHome.create();

      ICustomer debtorAccount = (ICustomer) retrieveDebtorAccount(bo.getOfficeCode(), bo.getDebtorCode(), user);
      //karen BugId:18301 27 September 2006
      // System will allow collection of money if the debtor is suspended
      /*if (debtorAccount.getAccountStatus().equals(AccStatus.SUSPENDED)) {
		String label = "Debtor Code "+debtorAccount.getAccountNumber()+ " ("+debtorAccount.getDebtorName()+ " )";
		throw new com.portrade.ipms.afms.exceptions.AccountIsSuspendedException(new Object[]{label});
        //throw new com.portrade.ipms.afms.exceptions.AccountNotActiveException(new Object[]{InvoiceLabelId.CUSTOMER_ID});
      }
      */
      ICompanyAccount glAccount = glSetup.retrieveCompanyAccount(bo.getGLAccount(), bo.getOfficeCode(), user);
      if (glAccount.isBlockPost().booleanValue()) {
        throw new com.portrade.ipms.afms.exceptions.AccountBlockForPostingException(new Object[]{glAccount.getGlAccount(), bo.getGLAccount(), bo.getOfficeCode()});
      }

      ICompanyAccount bankGLAccount = glSetup.retrieveCompanyAccount(bo.getBankGLAccount(), bo.getOfficeCode(), user);
      if (glAccount.isBlockPost().booleanValue()) {
        throw new com.portrade.ipms.afms.exceptions.AccountBlockForPostingException(new Object[]{bankGLAccount.getGlAccount(), bo.getBankGLAccount(), bo.getOfficeCode()});
      }

    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {76CF2971-C994-480A-BB9A-85657F6455BC}
   */
  private void validateDebtorCashDeposit(IDebtorCashDeposit bo, IUser user) { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {856C4E69-609B-4C1F-AE4F-417BED82B7DF}
   */
  private void validateDeleteDebtorCashDeposit(IDebtorCashDeposit bo, IUser user) { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {7A503045-B965-4C68-AC23-C6AC77386ECE}
   */
  private void validateUpdateDebtorCashDeposit(IDebtorCashDeposit bo, IUser user) { }


  /**
   * @modelguid {089AADCD-80FF-413D-B334-223AC1A34D42}
   */
  /**
   * @modelguid {6D87807E-0869-4AF9-9605-C0B36F1C33CE}
   */
  /**
   * @modelguid {C3EBB26D-53FB-4125-9DB8-5CF7B3058BD2}
   */
  /**
   * @modelguid {05BF193B-0C53-4352-88A1-12D7D9F06585}
   */
  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {0719A2A4-D1AB-41C3-B995-393A3C4F99B7}
   */
  private void validateDebtorCashDepositRefund(IDebtorCashDepositRefund bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    if (bo.isPrintChequeFlag() != null && bo.isPrintChequeFlag().equals(Boolean.TRUE)) {
      if (bo.getPvNumber() != null) {
        Logger.getInstance().logDebug("Error : pvNumber should be null");
        //throw exception
      }
      if (bo.getChequeNumber() != null) {
        Logger.getInstance().logDebug("Error : chequeNumber should be null");
        //throw exception
      }
    }

    IDebtorCashDeposit cashDeposit = bo.getCashDeposit();
    if (!cashDeposit.getProcessStatus().equals(ProcessStatus.POST)) {
      throw new com.portrade.ipms.afms.exceptions.RecordProcessStatusNotPostedException(null);
    }
    if (cashDeposit.isReversalDocumentIndicator() != null) {
      throw new com.portrade.ipms.afms.exceptions.HasBeenReversedException(new Object[]{DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT});
    }
    if (bo.getAmount().compareTo(cashDeposit.getAmount().subtract(cashDeposit.getClearedAmount())) > 0) {
      throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorCashDepositRefundLabelId.REFUND_AMOUNT, DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT_AMOUNT});
    }

    if (!bo.getCurrency().equals(cashDeposit.getCurrency())) {
      throw new com.portrade.ipms.afms.exceptions.MustBeSameException(new Object[]{DebtorCashDepositRefundLabelId.CURRENCY, DebtorCashDepositRefundLabelId.DEBTOR_CASH_DEPOSIT_CURRENCY});
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {1B158651-679F-4492-A887-C95979CEB1AC}
   */
  private void validateCreateDebtorCashDepositRefund(IDebtorCashDepositRefund bo, IUser user) { }


  /**
   * @modelguid {14A48823-7FA9-476D-AC01-1956219CDDD3}
   */
  private void validateDeleteDebtorCashDepositToCOA() { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {20C6A1E2-38AE-442B-98B5-E9CAB03B5C29}
   */
  private void validateUpdateDebtorCashDepositToCOA(IDebtorCashDepositToCOA bo, IUser user) { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {45ECA855-9ADF-461A-8846-C9D8E0317B11}
   */
  private void validateDebtorCashDepositToCOA(IDebtorCashDepositToCOA bo, IUser user) throws AFMSException {
    if (!bo.getCashDeposit().getProcessStatus().equals(ProcessStatus.POST)) {
      throw new com.portrade.ipms.afms.exceptions.RecordProcessStatusNotPostedException(new Object[]{});
    }

    if (bo.getCashDeposit().isReversalDocumentIndicator() != null) {
      throw new com.portrade.ipms.afms.exceptions.HasBeenReversedException(new Object[]{DebtorCashDepositToCOALabelId.DOCUMENT});
    }
    Logger.getInstance().logDebug("bo.getAmount()=" + bo.getAmount());
    Logger.getInstance().logDebug("bo.getCashDeposit().getAmount()=" + bo.getCashDeposit().getAmount());
    Logger.getInstance().logDebug("bo.getCashDeposit().getClearedAmount()=" + bo.getCashDeposit().getClearedAmount());

    if (bo.getAmount().compareTo(bo.getCashDeposit().getAmount().subtract(bo.getCashDeposit().getClearedAmount() == null ? new BigDecimal(0) : bo.getCashDeposit().getClearedAmount())) > 0) {
      throw new com.portrade.ipms.afms.exceptions.CannotBeGreaterThanValueException(new Object[]{DebtorCashDepositToCOALabelId.AMOUNT, DebtorCashDepositToCOALabelId.AMOUNT_FOR_CASH_DEPOSITE});
    }
    if (!bo.getCurrency().equals(bo.getCashDeposit().getCurrency())) {
      throw new com.portrade.ipms.afms.exceptions.IsNotTheSameAsException(new Object[]{DebtorCashDepositToCOALabelId.CURRENCY, DebtorCashDepositToCOALabelId.CASH_DEPOSIT_CURRENCY});
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {E02F83F2-CC4F-45A6-8BA0-D7E8D67EF715}
   */
  private void validateCreateDebtorCashDepositToCOA(IDebtorCashDepositToCOA bo, IUser user) { }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {80F24CB3-9F0D-4D18-AD35-E2FD94D8DAE6}
   */
  private void validateCreateProtestInvoice(IProtestInvoice bo, IUser user) throws AFMSException {
    String protestStatus = null;
    String processStatus = null;
    String referenceNumber = null;

    if (bo.getInvoiceNumber() != null && !bo.getInvoiceNumber().equals("")) {
      AbstractCriteria[] filter = {
      //        new Criteria(InvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
          new Criteria(InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber()),
          new Criteria(InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", "1"),
          new FieldCriteria(InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new FieldCriteria(InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

      AbstractCriteria[] filter1 = {
          new Criteria(ProtestInvoiceDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode()),
          new Criteria(ProtestInvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber()),
          new Criteria(ProtestInvoiceDAO.FILTER_FISCALYEAR, "=", bo.getFiscalYear())};

      try {
        java.util.List invoiceList = DAOProxy.list("invoice", user, filter);
        java.util.List protestList = DAOProxy.list("protestInvoice", user, filter1);
        int size = 0;
        //GLAccountItem
        BigDecimal outstanding = null;
        //GLAccountItem
        BigDecimal clearedAmt = null;

        IARDocument docObj = null;
        if (invoiceList != null) {
          size = invoiceList.size();
        }

        if (invoiceList == null || invoiceList.size() < 1) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]
              {InvoiceLabelId.INVOICE});
        }
        else {
          IARDocument invoice = (IARDocument) invoiceList.get(0);
          Logger.getInstance().logDebug("invoice.getOfficeCode()=== " + invoice.getOfficeCode());
          Logger.getInstance().logDebug("invoice.getSubledgerAccount()=== " + invoice.getSubledgerAccount());
          bo.setOfficeCode(invoice.getOfficeCode());
          bo.setAccountNumber(invoice.getSubledgerAccount());
          bo.setFiscalYear(invoice.getFiscalYear());
        }
        if (protestList != null && protestList.size() > 0) {
          referenceNumber = ((IProtestInvoice) protestList.get(0)).getReferenceNumber();
        }

        for (int i = 0; i < size; i++) {
          docObj = (IARDocument) invoiceList.get(i);
          protestStatus = docObj.getProtestStatus();
          processStatus = docObj.getProcessStatus();
          clearedAmt = docObj.getClearedAmount() != null ? docObj.getClearedAmount() : new BigDecimal(0.0);
          outstanding = docObj.getAmount().subtract(clearedAmt);

          if (!ProcessStatus.POST.equals(processStatus)) {
            Logger.getInstance().logDebug("validation fail Not Posted ");
            throw new com.portrade.ipms.afms.exceptions.RecordProcessStatusNotPostedException(new Object[]
                {InvoiceLabelId.INVOICE});
          }
          if (Boolean.FALSE.toString().equals(SystemProfile.get(SystemProfile.FULLY_PAID_INV_FLAG))) {
            if (clearedAmt.doubleValue() >= docObj.getAmount().doubleValue()) {
              //Meaning fully paid

              Logger.getInstance().logDebug("validation fully paid  ");
              throw new com.portrade.ipms.afms.exceptions.InvoiceHasBeenPaidException(new Object[]
                  {InvoiceLabelId.INVOICE});
            }
          }
          if (protestStatus != null && ProtestStatus.PROTEST.equals(protestStatus)) {
            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
                {ProtestInvoiceLabelId.PROTEST_STATUS, referenceNumber});
          }
          else if (protestStatus != null && ProtestStatus.INVALID.equals(protestStatus)) {
            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
                {ProtestInvoiceLabelId.INVALID_PROTEST, referenceNumber});
          }
          else if (protestStatus != null && ProtestStatus.VALID.equals(protestStatus)) {
            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
                {ProtestInvoiceLabelId.VALID_PROTEST, referenceNumber});
          }
          /*
	        else if (protestStatus != null && ProtestStatus.SURCHARGED.equals(protestStatus)) {
	          throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
	              {ProtestInvoiceLabelId.SURCHARGED, referenceNumber});
	        }
	        else if (protestStatus != null && ProtestStatus.CLOSED.equals(protestStatus)) {
	          if (bo.isProceedIndicator() == null || !bo.isProceedIndicator().booleanValue()) {
	            Logger.getInstance().logDebug("validation fail -CLOSED in SB ");
	            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
	                {ProtestInvoiceLabelId.CLOSE_PROTEST, referenceNumber});
	          }
	        }
	*/
        }

      }
      catch (java.sql.SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
				}
      }
    }
    else {
      //karen BugId: 20120 15 January 2007 protest for debit note

      AbstractCriteria[] filter2 = {
          new Criteria(DebtorDebitCreditMemoDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber()),
          new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_OFFICECODE, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
          new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_DOCUMENTNUMBER, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
          new FieldCriteria(DebtorDebitCreditMemoDAO.FILTER_FISCALYEAR, "=", DebtorDebitCreditMemoDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

      AbstractCriteria[] filter3 = {
          new Criteria(ProtestInvoiceDAO.FILTER_CREDITNOTENUMBER, "=", bo.getCreditNoteNumber())};

      try {
        java.util.List debitCreditMemoList = DAOProxy.list("debtorDebitCreditMemo", user, filter2);
        java.util.List protestList = DAOProxy.list("protestInvoice", user, filter3);

        if (protestList != null && protestList.size() > 0) {
          referenceNumber = ((IProtestInvoice) protestList.get(0)).getReferenceNumber();
        }
        Logger.getInstance().logDebug("bo.getCreditNoteNumber()==" + bo.getCreditNoteNumber());
        Logger.getInstance().logDebug("debitCreditMemoList.size()==" + debitCreditMemoList.size());
        if (debitCreditMemoList.size() == 0) {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
        }
        else {
          IDebtorDebitCreditMemo debitCreditMemo = (IDebtorDebitCreditMemo) debitCreditMemoList.get(0);
          bo.setOfficeCode(debitCreditMemo.getOfficeCode());
          bo.setFiscalYear(debitCreditMemo.getFiscalYear());
          bo.setAccountNumber(debitCreditMemo.getSubledgerAccount());

          if (!ProcessStatus.POST.equals(debitCreditMemo.getProcessStatus())) {
            throw new com.portrade.ipms.afms.exceptions.RecordProcessStatusNotPostedException(new Object[]{DebtorDebitCreditMemoLabelId.CREDIT_NOTE_NUMBER});
          }

          if (protestStatus != null && ProtestStatus.PROTEST.equals(protestStatus)) {
            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
                {ProtestInvoiceLabelId.PROTEST_STATUS, referenceNumber});
          }
          else if (protestStatus != null && ProtestStatus.INVALID.equals(protestStatus)) {
            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
                {ProtestInvoiceLabelId.INVALID_PROTEST, referenceNumber});
          }
          else if (protestStatus != null && ProtestStatus.VALID.equals(protestStatus)) {
            throw new com.portrade.ipms.afms.exceptions.InvalidProtestStatusException(new Object[]
                {ProtestInvoiceLabelId.VALID_PROTEST, referenceNumber});
          }
        }

      }
      catch (java.sql.SQLException ex) {
				if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
					throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
				}
				else {
	        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ProtestInvoiceLabelId.PROTEST_INVOICE});
				}
      }
    }

  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {5722A6E3-9AE6-4F6E-A19A-C4A5C555A5D4}
   */
  private void validateDeleteDebtorCashDepositRefund(IDebtorCashDepositRefund bo, IUser user) { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @modelguid {960D704C-5BD8-417C-A4B8-4AE382563588}
   */
  private void validateUpdateDebtorCashDepositRefund(IDebtorCashDepositRefund bo, com.portrade.ipms.icms.IUser user) { }


  /**
   * Description of the Method
   *
   * @param officeCode Description of the Parameter
   * @param accountNumber Description of the Parameter
   * @param user Description of the Parameter
   * @return Description of the Return Value
   * @exception AFMSException Description of the Exception
   * @modelguid {52063632-9772-4A53-8AF1-B9AEE6A44635}
   */
  private List retrieveInvoicePaymentTerm(String officeCode, String accountNumber, IUser user) throws AFMSException {
    List cashDepositList = null;
    try {
      AbstractCriteria[] filter = {
          new Criteria(DebtorInvoicePaymentTermDAO.FILTER_OFFICE_CODE, "=", officeCode),
          new Criteria(DebtorInvoicePaymentTermDAO.FILTER_ACCOUNT_NUMBER, "=", accountNumber),
          new FieldCriteria(DebtorInvoicePaymentTermDAO.FILTER_DEBTACC_OFFICECODE, "=", DebtorInvoicePaymentTermDAO.FILTER_OFFICE_CODE),
          new FieldCriteria(DebtorInvoicePaymentTermDAO.FILTER_DEBTACC_ACCOUNTNUMBER, "=", DebtorInvoicePaymentTermDAO.FILTER_ACCOUNT_NUMBER)
          };

      cashDepositList = DAOProxy.list("debtorInvoicePaymentTerm", user, filter);

    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.INVOICE});
			}
    }

    return cashDepositList;
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {5E30132E-AB64-4839-834E-21434EEC4A4B}
   */
  private void validateCreateOverridingApproval(com.portrade.ipms.afms.IOverridingApproval bo, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {6083AB0F-0D11-490B-9CC7-C8CF99A753D2}
   */
  private void validateOverridingApproval(com.portrade.ipms.afms.IOverridingApproval bo, com.portrade.ipms.icms.IUser user) throws AFMSException { }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {34BFEE6F-6CF1-4235-BFE2-78643FE80EB7}
   */
  private void validateDeleteOverridingApproval(com.portrade.ipms.afms.IOverridingApproval bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    //Chee Seng 29th June 2005, bugId: 11986
    Logger.getInstance().logDebug("bo.getStatus() " + bo.getStatus());
    Logger.getInstance().logDebug("bo.getApprovalID() " + bo.getApprovalID());
    if ((bo.getStatus() != null && bo.getStatus().equals(IConstants.Approval.APPROVED_CODE)) || (bo.getApprovalID() != null && !"".equals(bo.getApprovalID()))) {
      //Chee Seng 29th June 2005, bugId: 11986
      Logger.getInstance().logDebug("Inside aaa ");
      throw new com.portrade.ipms.afms.exceptions.DeleteNotAllowedException(null);
    }

  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {44F32E02-1B75-4D66-9F75-E3D939A29FC2}
   */
  private void validateUpdateOverridingApproval(com.portrade.ipms.afms.IOverridingApproval bo, com.portrade.ipms.icms.IUser user) throws AFMSException {

    if (bo.getStatus() != null && bo.getStatus().equals(IConstants.Approval.REJECT_CODE)) {
      if (bo.getApprovalID() != null && !bo.getApprovalID().equals("")) {
        throw new com.portrade.ipms.afms.exceptions.UpdateNotAllowedException(null);
      }
    }
    else
        if (bo.getStatus() != null && bo.getStatus().equals(IConstants.Approval.APPROVED_CODE)) {
      ICMSConnector.validateAuthorizedAmount(user.getIcmsSession(), bo);
    }
    else {
      throw new MandatoryFieldException(new Object[]{IConstants.Approval.STATUS});
    }

  }


  /**
   * Description of the Method
   *
   * @param glItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {2B2813EC-6C1C-421C-80FC-1F91BCF52BC4}
   */
  private void generatePvNumber(IAbstractGLAccountItem glItem, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction cf = null;

    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException cx) {
        Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
      }
      boolean recordAlreadyExists = true;
      while (recordAlreadyExists) {
        glItem.setPvNumber("PV." + cf.getNextSpecialDocumentNumber(glItem.getOfficeCode(), glItem.getFiscalYear(), IConstants.Prefix.PAYMENT_VOUCHER, user).toString() + "/" + String.valueOf(AFMSUtilities.getCalendar(glItem.getDocumentDate()).get(Calendar.YEAR)));
        Logger.getInstance().logDebug("glItem.getPvNumber() = " + glItem.getPvNumber());
        try {
          AbstractCriteria[] filter = {
              new Criteria(GLAccountItemDAO.FILTER_OFFICECODE, "=", glItem.getOfficeCode()),
              new Criteria(GLAccountItemDAO.FILTER_PVNUMBER, "=", glItem.getPvNumber())};
          List pvList = DAOProxy.list("gLAccountItem", user, filter);
          if (pvList.size() > 0) {
            recordAlreadyExists = true;
          }
          else {
            recordAlreadyExists = false;
          }
        }
        catch (java.sql.SQLException ex) {
					if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new com.portrade.ipms.afms.exceptions.DuplicateKeyException(new Object[]{CreditorPaymentLabelId.OFFICE_CODE_AND_PVNUMBER});
					}
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {7A5C02B5-D6B1-42D6-AFBF-42137F17B721}
   */
  private void generateClearingTransaction(IDebtorDebitCreditMemo bo, com.portrade.ipms.icms.IUser user) throws AFMSException {
    CommonFunction cf = null;

    try {
      try {
        cf = commonFunctionHome.create();
      }
      catch (javax.ejb.CreateException cx) {
        Logger.getInstance().logDebug("Cannot create home interface: " + cx.toString());
      }

      if (bo.getFullInvoiceAmountFlag() == null || bo.getFullInvoiceAmountFlag().booleanValue() == false) {
        return;
      }
      else {

        if (!bo.getProcessStatus().equals(IConstants.ProcessStatus.POST)) {
          return;
        }

        IClearingTransaction clearingTransactionBO = new ClearingTransactionValue();
        clearingTransactionBO.setDocumentType(IConstants.TransactionDocumentType.CLEARING_TRANSACTION);
        clearingTransactionBO.setOfficeCode(bo.getOfficeCode());
        clearingTransactionBO.setDocumentDate(bo.getDocumentDate());
        clearingTransactionBO.setPostingDate(bo.getPostingDate());
        clearingTransactionBO.setFiscalYear(bo.getFiscalYear());
        clearingTransactionBO.setPostingPeriod(bo.getPostingPeriod());
        clearingTransactionBO.setSubledgerAccount(bo.getSubledgerAccount());
        clearingTransactionBO.setSubledgerName(bo.getSubledgerName());
        clearingTransactionBO.setTin(bo.getTin());
        //tml 15 May 2006, BugId: 16902
        clearingTransactionBO.setSubledgerOfficeCode(bo.getSubledgerOfficeCode());
        if (bo.getSubledgerAccount() != null && bo.getSubledgerOfficeCode() == null) {
          ICustomer debtorBo = retrieveDebtorAccount(bo.getOfficeCode(), bo.getSubledgerAccount(), user);
          clearingTransactionBO.setSubledgerOfficeCode(debtorBo.getOfficeCode());
        }
        clearingTransactionBO.setReference(bo.getReference());
        clearingTransactionBO.setReferenceType(bo.getReferenceType());
        clearingTransactionBO.setRemark(bo.getRemark());
        clearingTransactionBO.setCurrency(bo.getCurrency());
        clearingTransactionBO.setExchangeRate(bo.getExchangeRate());
        clearingTransactionBO.setCostCenterId(bo.getCostCenterId());

        try {
          AbstractCriteria[] filter = {
              new Criteria(InvoiceDAO.FILTER_INVOICENUMBER, "=", bo.getInvoiceNumber()),
              new Criteria(InvoiceDAO.FILTER_GLACCOUNTITEM_HEADERINDICATOR, "=", new Boolean(true)),
              new FieldCriteria(InvoiceDAO.FILTER_OFFICECODE, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_OFFICECODE),
              new FieldCriteria(InvoiceDAO.FILTER_DOCUMENTNUMBER, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_DOCUMENTNUMBER),
              new FieldCriteria(InvoiceDAO.FILTER_FISCALYEAR, "=", InvoiceDAO.FILTER_GLACCOUNTITEM_FISCALYEAR)};

          List invoiceList = DAOProxy.list("invoice", user, filter);
          if (invoiceList.size() == 0) {
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
          }
          else {
            IARDocument invoiceBo = (IARDocument) invoiceList.get(0);
            IClearingTransactionItem clearingTransactionBOItem = new ARClearingTransactionItemValue();
            clearingTransactionBOItem.copyPropertiesFrom(invoiceBo);
            clearingTransactionBOItem.setTransactionDocumentNumber(invoiceBo.getDocumentNumber());
            clearingTransactionBOItem.setTransactionFiscalYear(invoiceBo.getFiscalYear());
            clearingTransactionBOItem.setTransactionItemNumber(invoiceBo.getItemNo());
            clearingTransactionBOItem.setTransactionDebitCreditType(invoiceBo.getDebitCreditType());
            clearingTransactionBOItem.setTransactionDocumentDate(invoiceBo.getDocumentDate());
            clearingTransactionBOItem.setTransactionAmount(invoiceBo.getAmount());
            clearingTransactionBOItem.setPaidAmount(invoiceBo.getAmount());
            clearingTransactionBOItem.setTransactionNumber(invoiceBo.getInvoiceNumber());

            clearingTransactionBO.addGLAccountItems(clearingTransactionBOItem);
          }

          createClearingTransaction(clearingTransactionBO, user);

          if (clearingTransactionBO.getProcessStatus().equals(IConstants.ProcessStatus.PARK)) {
            cf.postParkedDocument(clearingTransactionBO, null, user);
          }

          bo.setClearingDocumentNumber(clearingTransactionBO.getDocumentNumber() != null ? clearingTransactionBO.getDocumentNumber().toString() : null);
        }
        catch (java.sql.SQLException ex) {
					if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
						throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
					}
					else {
	          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{InvoiceLabelId.CUSTOMER_TYPE_AND_OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
					}
        }
      }
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }
  
  
  /**
	 * delete Tender from the system 
	 *
	 * @param fileRefNo Tender File Reference Number
	 * @param user User information
	 * @exception AFMSException 
   * @modelguid {F3F63804-060A-4FE1-978E-97AB40AAB287}
   */
  public void deleteParkStaffAdvanceLiquidation(String officeCode, Integer fiscalYear, Long documentNumber, IUser user) throws AFMSException {

    CommonFunction commonFunction = null;
	com.portrade.ipms.afms.business.entity.gl.GLAccountItem glAccountItem = null;
    java.util.ArrayList glAccountItemList = new java.util.ArrayList();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("deleteParkStaffAdvanceLiquidation");
	Logger.getInstance().logDebug("officeCode = " + officeCode);
	Logger.getInstance().logDebug("fiscalYear = " + fiscalYear);
	Logger.getInstance().logDebug("documentNumber = " + documentNumber);
    try {
      commonFunction = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      glAccountItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(officeCode, fiscalYear, documentNumber, user);
      Logger.getInstance().logDebug("glAccountItemList.size = " + glAccountItemList.size());
		for (int i = 0; i < glAccountItemList.size(); i++) {
		  glAccountItemBO = (IAbstractGLAccountItem) glAccountItemList.get(i);
		  Logger.getInstance().logDebug("glAccountItemBO.getProcessStatus() = " + glAccountItemBO.getProcessStatus());
		  Logger.getInstance().logDebug("glAccountItemBO.getId() = " + glAccountItemBO.getId());
		  if (glAccountItemBO.getProcessStatus().equals(IConstants.ProcessStatus.PARK)) {
			glAccountItem = gLAccountItemHome.findByPrimaryKey(glAccountItemBO.getId());
			glAccountItem.setProcessStatus(IConstants.ProcessStatus.DELETED);
			glAccountItem.setLastUpdateBy(user.getId());
			glAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
		  }
		}		  
	}
	catch (javax.ejb.FinderException ex) {
		Logger.getInstance().logDebug("finderException = " + ex);
		throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
	}	
	catch (AFMSException ex) {
	  sessionContext.setRollbackOnly();
	  throw ex;
	}
	catch (java.rmi.RemoteException ex) {
	  throw new javax.ejb.EJBException(ex.toString());
	}
  }


  /**
   * @param officeCode Description of the Parameter
   * @param fiscalYear Description of the Parameter
   * @param documentNumber Description of the Parameter
   * @param postingPeriod Description of the Parameter
   * @param documentDate Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {97EB83FC-F144-4E57-A226-14BCD9674A5F}
   */
  private void deleteParkLiquidateStaffAdvanceItem(String officeCode, Integer fiscalYear, Long documentNumber, Integer postingPeriod, java.sql.Date documentDate, IUser user) throws AFMSException {
    CommonFunction cf = null;
    try {
      cf = commonFunctionHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {

      List staffAdvanceLiquidationItemList = new ArrayList(staffAdvanceLiquidateItemHome.findByDocumentNumber(officeCode, fiscalYear, documentNumber));

      if (staffAdvanceLiquidationItemList != null && staffAdvanceLiquidationItemList.size() > 0) {
        for (int i = 0; i < staffAdvanceLiquidationItemList.size(); i++) {
          StaffAdvanceLiquidationItem staffAdvanceLiquidationItem = (StaffAdvanceLiquidationItem) staffAdvanceLiquidationItemList.get(i);
          ACRAuditTrail.deleteLogAuditTrail(staffAdvanceLiquidationItem, user);
          staffAdvanceLiquidationItem.remove();
        }
      }

    }
    catch (AFMSException ax) {
      sessionContext.setRollbackOnly();
      throw ax;
    }
    catch (javax.ejb.FinderException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (javax.ejb.RemoveException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{StaffAdvanceBudgetItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {1F6EF7CC-46C1-4776-987E-F6FDA2C421BB}
   */
  private void validateCreateNonDebtorPayment(INonDebtorPayment bo, IUser user) throws AFMSException {
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {38303BB5-C52D-4E68-9C3C-566E9C8979B3}
   */
  private void validateNonDebtorPayment(INonDebtorPayment bo, IUser user) throws AFMSException {
    BigDecimal totalDebit = new BigDecimal(0);
    BigDecimal totalCredit = new BigDecimal(0);

    Iterator iterator = bo.getItems().iterator();
    while (iterator.hasNext()) {
      INonDebtorPaymentItem boItem = (INonDebtorPaymentItem) iterator.next();
      if ((boItem.getDebitCreditType() != null) && !(boItem.getDebitCreditType().equals(""))) {
        if ((boItem.getDebitCreditType().equals(IConstants.DebitCreditType.DEBIT))) {
          totalDebit = totalDebit.add(boItem.getAmount());
        }
        else {
          totalCredit = totalCredit.add(boItem.getAmount());
        }
      }
    }
    if (bo.getAmount().add(totalDebit).compareTo(totalCredit) != 0) {
      throw new IncorrectBalanceException(new Object[]{});
    }
  }


  /**
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {6154FF34-2C6F-4B71-BCB9-69D814E2DF97}
   */
  private void createJournalForNonDebtorPayment(INonDebtorPayment bo, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("********createJournalForNonDebtorPayment**************");
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();

      sortNonDebtorPaymentItems(bo.getItems());

      for (int i = 0; i < bo.getItems().size(); i++) {
        INonDebtorPaymentItem item = (INonDebtorPaymentItem) bo.getItems().get(i);
        BigDecimal headerAmount = new BigDecimal(0);
		BigDecimal totalCredit = new BigDecimal(0);
		BigDecimal totalDebit = new BigDecimal(0);
        if (item.getTransactionCostCenterId() == null || item.getTransactionCostCenterId().equals("")) {
          continue;
        }
        if (!item.getTransactionOfficeCode().equals(bo.getOfficeCode())) {
          IParkJournal parkJournal = new ParkJournalValue();
          String headerCostCenterId = null;
          String headerOfficeCode = null;

          //create items
          for (int j = i + 1; j < bo.getItems().size(); j++) {
            INonDebtorPaymentItem nextItem = (INonDebtorPaymentItem) bo.getItems().get(j);

            if (item.getTransactionOfficeCode().equals(nextItem.getTransactionOfficeCode())) {
              IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
              newParkJournalItem.setAmount(nextItem.getAmount());
              newParkJournalItem.setDebitCreditType(nextItem.getDebitCreditType());
              newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
              newParkJournalItem.setFiscalYear(bo.getFiscalYear());
              newParkJournalItem.setOfficeCode(nextItem.getTransactionOfficeCode());
              newParkJournalItem.setGlAccount(nextItem.getTransactionGLAccount());
              newParkJournalItem.setPostingKey(nextItem.getPostingKey());
              newParkJournalItem.setProjectId(nextItem.getProjectId());
              newParkJournalItem.setResponsibleCenter(nextItem.getTransactionCostCenterId());
              newParkJournalItem.setRemark(nextItem.getRemark());
              newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
              newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
			  //BPSB-2705
			  newParkJournalItem.setDocumentDate(bo.getDocumentDate());
			  newParkJournalItem.setPostingDate(bo.getPostingDate());

              if (nextItem.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                headerAmount = headerAmount.subtract(nextItem.getAmount());
                totalDebit = totalDebit.add(nextItem.getAmount());
              }
              else {
                headerAmount = headerAmount.add(nextItem.getAmount());
                totalCredit = totalCredit.add(nextItem.getAmount());
              }
              parkJournal.addParkJournalItemValue(newParkJournalItem);
              bo.getItems().remove(j);
              j--;
            }
          }

          IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
          newParkJournalItem.setAmount(item.getAmount());
          newParkJournalItem.setDebitCreditType(item.getDebitCreditType());
          newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newParkJournalItem.setOfficeCode(item.getTransactionOfficeCode());
          newParkJournalItem.setGlAccount(item.getTransactionGLAccount());
          newParkJournalItem.setPostingKey(item.getPostingKey());
          newParkJournalItem.setProjectId(item.getProjectId());
          newParkJournalItem.setResponsibleCenter(item.getTransactionCostCenterId());
          newParkJournalItem.setRemark(item.getRemark());
          newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
		  //BPSB-2705
		  newParkJournalItem.setDocumentDate(bo.getDocumentDate());
		  newParkJournalItem.setPostingDate(bo.getPostingDate());

          if (headerAmount.compareTo(new BigDecimal(0)) == 0 && bo.getItems().size() == 1) {
            headerAmount = item.getAmount();
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              totalDebit = totalDebit.add(item.getAmount());
            }
            else {
              totalCredit = totalCredit.add(item.getAmount());
            }
          }
          else {
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              headerAmount = headerAmount.subtract(item.getAmount());
              totalDebit = totalDebit.add(item.getAmount());
            }
            else {
              headerAmount = headerAmount.add(item.getAmount());
              totalCredit = totalCredit.add(item.getAmount());
            }
          }
          parkJournal.addParkJournalItemValue(newParkJournalItem);

          IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
          if (headerAmount.compareTo(new BigDecimal(0)) < 0) {
            headerAmount = headerAmount.negate();
          }
          newDebitParkJournalItem.setAmount(headerAmount);
          if (totalDebit.compareTo(totalCredit) > 0) {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
          }
          else {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          }
          newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newDebitParkJournalItem.setOfficeCode(item.getTransactionOfficeCode());

          try {
            IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);

            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, newDebitParkJournalItem.getPostingKey(), user);

            newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

          newDebitParkJournalItem.setProjectId(item.getProjectId());
          newDebitParkJournalItem.setResponsibleCenter(item.getCostCenterId());
          newDebitParkJournalItem.setRemark(item.getRemark());
          newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          newDebitParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

          if (i != bo.getItems().size() - 1) {
            bo.getItems().remove(i);
            i--;
          }

          //create dummy header
          parkJournal.setOfficeCode(item.getTransactionOfficeCode());
          parkJournal.setFiscalYear(bo.getFiscalYear());
          parkJournal.setDocumentNumber(bo.getDocumentNumber());
          parkJournal.setHeaderIndicator(Boolean.TRUE);
          parkJournal.setAmount(new BigDecimal("0"));
          parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
          parkJournal.setDirectPostingJournalFlag(new Boolean(true));
          parkJournal.setInterOfficePostingIndicator(new Boolean(true));
          parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          parkJournal.setCurrencyType(bo.getCurrency());
		  //BPSB-2705
		  parkJournal.setDocumentDate(bo.getDocumentDate());
		  parkJournal.setPostingDate(bo.getPostingDate());

          Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
          for (int k = 0; k < parkJournal.getParkJournalItemValue().size(); k++) {
            IParkJournalItem pp = (IParkJournalItem) parkJournal.getParkJournalItemValue().get(k);
            Logger.getInstance().logDebug("k :" + k);
            Logger.getInstance().logDebug("pp.getDebitCreditType()==" + pp.getDebitCreditType());
            Logger.getInstance().logDebug("pp.getGlAccount==" + pp.getGlAccount());
            Logger.getInstance().logDebug("pp.getAmount()==" + pp.getAmount());
            Logger.getInstance().logDebug("pp.getOfficeCode()==" + pp.getOfficeCode());
            Logger.getInstance().logDebug("pp.getCrossOfficeNumber()==" + pp.getCrossOfficeNumber());
          }
          Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
          IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
        }
      }
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * Description of the Method
   *
   * @param bo Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   */
  private void createJournalForLiquidateStaffAdvance(ILiquideStaffAdvance bo, String actionInd, IUser user) throws AFMSException {
    GeneralLedgerManager gl = null;
    GeneralLedgerSetup generalLedgerSetup = null;
    CommonFunction commonFunction = null;
    IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
    IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
    Logger.getInstance().logDebug("********createJournalForLiquidateStaffAdvance**************");
    try {
      gl = generalLedgerManagerHome.create();
      generalLedgerSetup = generalLedgerSetupHome.create();
      commonFunction = commonFunctionHome.create();

      sortLiquidateStaffAdvanceItems(bo.getItems());

      Logger.getInstance().logDebug("bo.getCrossOfficeNumber() = " + bo.getCrossOfficeNumber());
      for (int i = 0; i < bo.getItems().size(); i++) {
        ILiquideStaffAdvanceItem item = (ILiquideStaffAdvanceItem) bo.getItems().get(i);
        BigDecimal headerAmount = new BigDecimal(0);
				BigDecimal totalCredit = new BigDecimal(0);
				BigDecimal totalDebit = new BigDecimal(0);
        if (item.getBudgetItemCostCenter() == null || item.getBudgetItemCostCenter().equals("")) {
          continue;
        }
        if (!bo.getOfficeCode().equals(item.getBudgetItemOfficeCode())) {
          IParkJournal parkJournal = new ParkJournalValue();
          String headerCostCenterId = null;
          String headerOfficeCode = null;
          //create items
          for (int j = i + 1; j < bo.getItems().size(); j++) {
            ILiquideStaffAdvanceItem nextItem = (ILiquideStaffAdvanceItem) bo.getItems().get(j);

            if (nextItem.getBudgetItemOfficeCode() == null || nextItem.getBudgetItemOfficeCode().equals("")) {
              continue;
            }

            if (item.getBudgetItemOfficeCode().equals(nextItem.getBudgetItemOfficeCode())) {
              IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
              newParkJournalItem.setAmount(nextItem.getAmount());
              newParkJournalItem.setDebitCreditType(nextItem.getDebitCreditType());
              //newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
              newParkJournalItem.setFiscalYear(bo.getFiscalYear());
              newParkJournalItem.setOfficeCode(nextItem.getBudgetItemOfficeCode());
              newParkJournalItem.setGlAccount(nextItem.getGLAccount());
              if (nextItem.getPostingKey() != null && !nextItem.getPostingKey().equals("")) {
                newParkJournalItem.setPostingKey(nextItem.getPostingKey());
              }
              else {
                if (newParkJournalItem.getDebitCreditType().equals(IConstants.DebitCreditType.DEBIT)) {
                  newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
                }
                else if (newParkJournalItem.getDebitCreditType().equals(IConstants.DebitCreditType.CREDIT)) {
                  newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
                }
              }
              newParkJournalItem.setProjectId(nextItem.getProjectId());
              newParkJournalItem.setResponsibleCenter(nextItem.getBudgetItemCostCenter());
              newParkJournalItem.setRemark(nextItem.getRemark());
              newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
              newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
							newParkJournalItem.setDocumentDate(bo.getDocumentDate());
							newParkJournalItem.setPostingDate(bo.getPostingDate());
              if (nextItem.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
                headerAmount = headerAmount.subtract(nextItem.getAmount());
                totalDebit = totalDebit.add(nextItem.getAmount());
              }
              else {
                headerAmount = headerAmount.add(nextItem.getAmount());
                totalCredit = totalCredit.add(nextItem.getAmount());
              }
              parkJournal.addParkJournalItemValue(newParkJournalItem);
              bo.getItems().remove(j);
              j--;
            }
          }

          IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
          newParkJournalItem.setAmount(item.getAmount());
          newParkJournalItem.setDebitCreditType(item.getDebitCreditType());
          //newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newParkJournalItem.setOfficeCode(item.getBudgetItemOfficeCode());
          newParkJournalItem.setGlAccount(item.getGLAccount());
          newParkJournalItem.setPostingKey(item.getPostingKey());
          newParkJournalItem.setProjectId(item.getProjectId());
          newParkJournalItem.setResponsibleCenter(item.getBudgetItemCostCenter());
          newParkJournalItem.setRemark(item.getRemark());
          newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
					newParkJournalItem.setDocumentDate(bo.getDocumentDate());
					newParkJournalItem.setPostingDate(bo.getPostingDate());
          if (headerAmount.compareTo(new BigDecimal(0)) == 0 && bo.getItems().size() == 1) {
            headerAmount = item.getAmount();
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              totalDebit = totalDebit.add(item.getAmount());
              newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
            }
            else {
              totalCredit = totalCredit.add(item.getAmount());
              newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
            }
          }
          else {
            if (item.getDebitCreditType().equals(DebitCreditType.DEBIT)) {
              headerAmount = headerAmount.subtract(item.getAmount());
              totalDebit = totalDebit.add(item.getAmount());
              newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
            }
            else {
              headerAmount = headerAmount.add(item.getAmount());
              totalCredit = totalCredit.add(item.getAmount());
              newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
            }
          }
          Logger.getInstance().logDebug("newParkJournalItem.getGlAccount = " + newParkJournalItem.getGlAccount());
          Logger.getInstance().logDebug("newParkJournalItem.getPostingKey = " + newParkJournalItem.getPostingKey());
          parkJournal.addParkJournalItemValue(newParkJournalItem);

          IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
          if (headerAmount.compareTo(new BigDecimal(0)) < 0) {
            headerAmount = headerAmount.negate();
          }
          newDebitParkJournalItem.setAmount(headerAmount);
          if (totalDebit.compareTo(totalCredit) > 0) {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
          }
          else {
            newDebitParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
            newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
          }
          newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
          newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
          newDebitParkJournalItem.setOfficeCode(item.getBudgetItemOfficeCode());

          try {
            IOffice office = generalLedgerSetup.retrieveOffice(bo.getOfficeCode(), user);

            IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, newDebitParkJournalItem.getPostingKey(), user);

            newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
          }
          catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
          }

          newDebitParkJournalItem.setProjectId(item.getProjectId());
          newDebitParkJournalItem.setResponsibleCenter(item.getCostCenterId());
          newDebitParkJournalItem.setRemark(item.getRemark());
          newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
					newDebitParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
					newDebitParkJournalItem.setDocumentDate(bo.getDocumentDate());
					newDebitParkJournalItem.setPostingDate(bo.getPostingDate());
          Logger.getInstance().logDebug("newDebitParkJournalItem.getGlAccount = " + newDebitParkJournalItem.getGlAccount());
          Logger.getInstance().logDebug("newDebitParkJournalItem.getPostingKey = " + newDebitParkJournalItem.getPostingKey());
          parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

          if (i != bo.getItems().size() - 1) {
            bo.getItems().remove(i);
            i--;
          }

          //create dummy header
          parkJournal.setOfficeCode(item.getBudgetItemOfficeCode());
          parkJournal.setFiscalYear(bo.getFiscalYear());
          //parkJournal.setDocumentNumber(bo.getDocumentNumber());
          parkJournal.setHeaderIndicator(Boolean.TRUE);
          parkJournal.setAmount(new BigDecimal("0"));
          parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
          parkJournal.setDirectPostingJournalFlag(new Boolean(false));
          parkJournal.setInterOfficePostingIndicator(new Boolean(true));
          parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
          parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
          parkJournal.setCurrencyType("MYR");
					parkJournal.setDocumentDate(bo.getDocumentDate());
					parkJournal.setPostingDate(bo.getPostingDate());

          Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
          for (int k = 0; k < parkJournal.getParkJournalItemValue().size(); k++) {
            IParkJournalItem pp = (IParkJournalItem) parkJournal.getParkJournalItemValue().get(k);
            Logger.getInstance().logDebug("k :" + k);
            Logger.getInstance().logDebug("pp.getDebitCreditType()==" + pp.getDebitCreditType());
            Logger.getInstance().logDebug("pp.getGlAccount==" + pp.getGlAccount());
            Logger.getInstance().logDebug("pp.getAmount()==" + pp.getAmount());
            Logger.getInstance().logDebug("pp.getOfficeCode()==" + pp.getOfficeCode());
            Logger.getInstance().logDebug("pp.getCrossOfficeNumber()==" + pp.getCrossOfficeNumber());
            Logger.getInstance().logDebug("pp.getPostingKey==" + pp.getPostingKey());
          }
         
          	
		  if(actionInd.equals(IConstants.RECORD_INDICATOR.INSERT)){
			IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
		  }else{
			  try{
				  if(bo.getCrossOfficeNumber()!=null && !bo.getCrossOfficeNumber().equals("")){
					  ArrayList glAccountItemList = null;
					  glAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByCrossOfficeNumber(bo.getCrossOfficeNumber()));
					  Logger.getInstance().logDebug("%%%%%%%%% glAccountItemList.size()%%%%%%%"+ glAccountItemList.size());		
					  if(glAccountItemList != null && glAccountItemList.size() > 0) {
						  for (int a = 0; a < glAccountItemList.size(); a++) {
							  GLAccountItem glAccountItem = (GLAccountItem) glAccountItemList.get(a);
							  if(glAccountItem.getDocumentType().equals(TransactionDocumentType.BACKEND_JOURNAL)){
								  for(int b=0; b<parkJournal.getParkJournalItemValue().size(); b++){
									  IParkJournalItem parkJournalItem =(IParkJournalItem)parkJournal.getParkJournalItemValue().get(b);
									  if(glAccountItem.getOfficeCode().equals(parkJournalItem.getOfficeCode())){
										  AFMSAuditTrail.deleteLogAuditTrail(glAccountItem, user);
										  glAccountItem.remove();
										  break;
									  }
								  }
							  }
						  }								
					  }
					IParkJournal parkJournalGlAccountItem = gl.confirmCreateParkJournal(parkJournal, user);
				  }
			  }catch (javax.ejb.FinderException ex) {
				 sessionContext.setRollbackOnly();
				 throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
			  }
				catch (javax.ejb.RemoveException rx) {
				sessionContext.setRollbackOnly();
				throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
			  }
		  }
          
        }
      }
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
  }


  /**
   * @param nonDebtorPaymentItemList Description of the Parameter
   * @modelguid {F72E78EB-0DD1-4F35-8EA2-F9D452F414F3}
   */
  private void sortNonDebtorPaymentItems(List nonDebtorPaymentItemList) {
    Collections.sort(nonDebtorPaymentItemList,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof INonDebtorPaymentItem && o2 instanceof INonDebtorPaymentItem) {
                INonDebtorPaymentItem d1 = (INonDebtorPaymentItem) o1;
                INonDebtorPaymentItem d2 = (INonDebtorPaymentItem) o2;
                if (d1.getTransactionOfficeCode() != null && !d1.getTransactionOfficeCode().equals("") && d2.getTransactionOfficeCode() != null && !d2.getTransactionOfficeCode().equals("")) {
                  returnValue = d1.getTransactionOfficeCode().compareTo(d2.getTransactionOfficeCode());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * Description of the Method
   *
   * @param liquidateStaffAdvanceItemList Description of the Parameter
   */
  private void sortLiquidateStaffAdvanceItems(List liquidateStaffAdvanceItemList) {
    Collections.sort(liquidateStaffAdvanceItemList,
          new Comparator() {
            public int compare(Object o1, Object o2) {
              int returnValue = 0;
              if (o1 != null && o2 != null && o1 instanceof ILiquideStaffAdvanceItem && o2 instanceof ILiquideStaffAdvanceItem) {
                ILiquideStaffAdvanceItem d1 = (ILiquideStaffAdvanceItem) o1;
                ILiquideStaffAdvanceItem d2 = (ILiquideStaffAdvanceItem) o2;
                if (d1.getBudgetItemOfficeCode() != null && !d1.getBudgetItemOfficeCode().equals("") && d2.getBudgetItemOfficeCode() != null && !d2.getBudgetItemOfficeCode().equals("")) {
                  returnValue = d1.getBudgetItemOfficeCode().compareTo(d2.getBudgetItemOfficeCode());
                }
              }
              return returnValue;
            }
          });
  }


  /**
   * @param bo Description of the Parameter
   * @param glItem Description of the Parameter
   * @param user Description of the Parameter
   * @exception AFMSException Description of the Exception
   * @modelguid {63BBD2D9-93CA-4B77-8CED-8DD7C2624216}
   */
  private void createReversalJournal(IChequeClearing bo, IAbstractGLAccountItem glItem, IUser user) throws AFMSException {
    GeneralLedgerManager generalLedgerManager = null;
    try {
      generalLedgerManager = generalLedgerManagerHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }
    IDepositToBankReceipt receipt = null;
    try {
      DepositToBankReceiptDAO dao = (DepositToBankReceiptDAO) DAOProxy.getDAO("depositToBankReceipt", user);
      List receiptList = dao.retrieveDepositToBankReceiptByOR(glItem.getFiscalYear(), glItem.getDocumentNumber());

      if ((receiptList != null) && (receiptList.size() > 0)) {
        receipt = (IDepositToBankReceipt) receiptList.get(0);
      }
      else {
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankReceiptLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_ITEM_NUMBER});
      }

      IDepositToBank depositToBank = retrieveDepositToBank(receipt.getOfficeCode(), receipt.getFiscalYear(), receipt.getDocumentNumber(), user);

      IParkJournal parkjournal = new ParkJournalValue();

      parkjournal.setOfficeCode(depositToBank.getOfficeCode());
      parkjournal.setGLAccount(depositToBank.getGLAccount());
      parkjournal.setAmount(glItem.getAmount());
      parkjournal.setCurrencyType(glItem.getCurrency());
      parkjournal.setPostingDate(bo.getStatusDate());
      parkjournal.setAccountType(IConstants.PostingAccountType.DEBTOR);
      parkjournal.setOriginatingModuleType(IConstants.OriginatingModuleType.JOURNAL);
      parkjournal.setCid(bo.getCid());
      parkjournal.setCostCenterId(depositToBank.getCostCenterId());
      parkjournal.setClearedRefFiscalYear(glItem.getClearedRefFiscalYear());
      parkjournal.setClearedRefDocumentNumber(glItem.getClearedRefDocumentNumber());
      parkjournal.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
      parkjournal.setDebitCreditType(IConstants.DebitCreditType.CREDIT);
      parkjournal.setDocumentType(IConstants.TransactionDocumentType.DEBTOR_VOID_CHEQUE);
      parkjournal.setCreatedBy(user.getId());
      parkjournal.setCreatedOn(AFMSUtilities.getCurrentTime());

      IParkJournalItem parkjournalItem = new ParkJournalItemValue();

      if (glItem.getDocumentType().equals(IConstants.TransactionDocumentType.DEBTOR_PAYMENT)) {
        IDebtorPayment payment = retrieveDebtorPayment(glItem.getOfficeCode(), glItem.getFiscalYear(), glItem.getDocumentNumber(), user);
        IDebtorPaymentItem paymentItem = (IDebtorPaymentItem) payment.getItems().get(glItem.getItemNo().intValue() - 1);

        parkjournalItem.setOfficeCode(depositToBank.getOfficeCode());
        parkjournalItem.setAmount(glItem.getAmount());
        parkjournalItem.setCurrency(glItem.getCurrency());
        parkjournalItem.setPostingDate(bo.getStatusDate());
        parkjournalItem.setAccountType(IConstants.PostingAccountType.DEBTOR);
        parkjournalItem.setOriginatingModuleType(IConstants.OriginatingModuleType.JOURNAL);
        parkjournalItem.setCid(bo.getCid());
        parkjournalItem.setCostCenterOfficeCode(paymentItem.getTransactionOfficeCode());
        parkjournalItem.setDifferentOfficeGLAccount(paymentItem.getTransactionGLAccount());
        parkjournalItem.setGlAccount(glItem.getGLAccount());
        parkjournalItem.setCostCenterId(depositToBank.getCostCenterId());
        parkjournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
        parkjournalItem.setDebitCreditType(IConstants.DebitCreditType.DEBIT);
        parkjournalItem.setDocumentType(IConstants.TransactionDocumentType.DEBTOR_VOID_CHEQUE);
        parkjournalItem.setCreatedBy(user.getId());
        parkjournalItem.setCreatedOn(AFMSUtilities.getCurrentTime());
      }
      else if (glItem.getDocumentType().equals(IConstants.TransactionDocumentType.NON_DEBTOR_PAYMENT)) {
        INonDebtorPayment payment = retrieveNonDebtorPayment(glItem.getOfficeCode(), glItem.getFiscalYear(), glItem.getDocumentNumber(), user);
        INonDebtorPaymentItem paymentItem = (INonDebtorPaymentItem) payment.getItems().get(glItem.getItemNo().intValue() - 1);

        parkjournalItem.setOfficeCode(depositToBank.getOfficeCode());
        parkjournalItem.setAmount(glItem.getAmount());
        parkjournalItem.setCurrency(glItem.getCurrency());
        parkjournalItem.setPostingDate(bo.getStatusDate());
        parkjournalItem.setAccountType(IConstants.PostingAccountType.DEBTOR);
        parkjournalItem.setOriginatingModuleType(IConstants.OriginatingModuleType.JOURNAL);
        parkjournalItem.setCid(bo.getCid());
        parkjournalItem.setCostCenterOfficeCode(paymentItem.getTransactionOfficeCode());
        parkjournalItem.setDifferentOfficeGLAccount(paymentItem.getTransactionGLAccount());
        parkjournalItem.setGlAccount(glItem.getGLAccount());
        parkjournalItem.setCostCenterId(depositToBank.getCostCenterId());
        parkjournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
        parkjournalItem.setDebitCreditType(IConstants.DebitCreditType.DEBIT);
        parkjournalItem.setDocumentType(IConstants.TransactionDocumentType.DEBTOR_VOID_CHEQUE);
        parkjournalItem.setCreatedBy(user.getId());
        parkjournalItem.setCreatedOn(AFMSUtilities.getCurrentTime());
      }

      parkjournal.addParkJournalItemValue(parkjournalItem);
      generalLedgerManager.confirmCreateParkJournal(parkjournal, user);

      bo.setVoidChequeOfficeCode(parkjournal.getOfficeCode());
      bo.setVoidChequeFiscalYear(parkjournal.getFiscalYear());
      bo.setVoidChequeDocumentNumber(parkjournal.getDocumentNumber());
    }
    catch (java.sql.SQLException ex) {
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
	      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DepositToBankLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER});
			}
    }
    catch (java.rmi.RemoteException ex) {
      sessionContext.setRollbackOnly();
      throw new javax.ejb.EJBException(ex.toString());
    }

  }

	/**
	 * Description of the Method
	 *
	 * @param bo Description of the Parameter
	 * @param actionInd Description of the Parameter
	 * @param user Description of the Parameter
	 * @exception AFMSException Description of the Exception
	 */
	public void createJournalForDebtorPaymentBankCharges(IDebtorPayment bo, String actionInd, IUser user) throws AFMSException {
		GeneralLedgerManager gl = null;
		GeneralLedgerSetup generalLedgerSetup = null;
		CommonFunction commonFunction = null;
		IPostParkedDocument postParkedDocumentBO = new PostParkedDocumentValue();
		IAbstractGLAccountItem glAccountItemBO = new AbstractGLAccountItemValue();
		Logger.getInstance().logDebug("********createJournalForDebtorPaymentBankCharges**************");
		try {
			gl = generalLedgerManagerHome.create();
			generalLedgerSetup = generalLedgerSetupHome.create();
			commonFunction = commonFunctionHome.create();

			BigDecimal totalCredit = new BigDecimal(0);
			BigDecimal totalDebit = new BigDecimal(0);

			BigDecimal headerAmount = new BigDecimal(0);
			IParkJournal parkJournal = new ParkJournalValue();
			String headerCostCenterId = null;
			String headerOfficeCode = null;

			IParkJournalItem newParkJournalItem = new ParkJournalItemValue();
			newParkJournalItem.setAmount(bo.getDiscountAmount());
			newParkJournalItem.setDebitCreditType(DebitCreditType.DEBIT);
			newParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
			newParkJournalItem.setFiscalYear(bo.getFiscalYear());
			ICostCenter rc = generalLedgerSetup.retrieveResponsibleCenter("1402520", user);
			newParkJournalItem.setOfficeCode(rc.getOfficeCode());
			Logger.getInstance().logDebug("createJournalForDebtorPaymentBankCharges :: bo.getDiscountGlAccount()()>>" + bo.getDiscountGlAccount());
			Logger.getInstance().logDebug("createJournalForDebtorPaymentBankCharges :: rc.getOfficeCode()>>" + rc.getOfficeCode());

			newParkJournalItem.setGlAccount(bo.getDiscountGlAccount());
			newParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_DEBIT);
			newParkJournalItem.setResponsibleCenter("1402520");
			newParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
			newParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
			newParkJournalItem.setDocumentDate(bo.getDocumentDate());
			newParkJournalItem.setPostingDate(bo.getPostingDate());
			
			parkJournal.addParkJournalItemValue(newParkJournalItem);

			// item 1
			IParkJournalItem newDebitParkJournalItem = new ParkJournalItemValue();
			newDebitParkJournalItem.setAmount(bo.getDiscountAmount());

			newDebitParkJournalItem.setDebitCreditType(DebitCreditType.CREDIT);
			newDebitParkJournalItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);

			newDebitParkJournalItem.setDocumentNumber(bo.getDocumentNumber());
			newDebitParkJournalItem.setFiscalYear(bo.getFiscalYear());
			newDebitParkJournalItem.setOfficeCode(rc.getOfficeCode());

			try {
				IOffice office = generalLedgerSetup.retrieveOffice(rc.getOfficeCode(), user);

				IAutomaticAccountAssignment automaticAccountAssignment = generalLedgerSetup.retrieveAutomaticAccountAssignment(office.getCOA(), bo.getOfficeCode(), AutomaticAccountDetermination.INTER_OFFICE_POSTING, IConstants.TransactionPostingKey.JOURNAL_DEBIT, user);

				newDebitParkJournalItem.setGlAccount(automaticAccountAssignment.getGlAccount());
			}
			catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
				sessionContext.setRollbackOnly();
				throw new com.portrade.ipms.afms.exceptions.DependentRecordNotFoundException(new Object[]{AutomaticAccountAssignmentLabelId.CHART_OF_ACCOUNT_AND_OFFICE_CODE_AND_POSTING_TYPE_AND_POSTING_KEY});
			}
			newDebitParkJournalItem.setResponsibleCenter(null);
			newDebitParkJournalItem.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
			newDebitParkJournalItem.setCrossOfficeNumber(bo.getCrossOfficeNumber());
			newDebitParkJournalItem.setDocumentDate(bo.getDocumentDate());
			newDebitParkJournalItem.setPostingDate(bo.getPostingDate());
			
			parkJournal.getParkJournalItemValue().add(0, newDebitParkJournalItem);

			//create dummy header
			parkJournal.setOfficeCode(rc.getOfficeCode());
			parkJournal.setFiscalYear(bo.getFiscalYear());
			parkJournal.setDocumentNumber(bo.getDocumentNumber());
			parkJournal.setHeaderIndicator(Boolean.TRUE);
			parkJournal.setAmount(new BigDecimal("0"));
			parkJournal.setAmountInLocalCurrency(new BigDecimal("0"));
			parkJournal.setCrossOfficeNumber(bo.getCrossOfficeNumber());
			parkJournal.setDirectPostingJournalFlag(new Boolean(true));
			parkJournal.setInterOfficePostingIndicator(new Boolean(true));
			parkJournal.setDocumentType(TransactionDocumentType.BACKEND_JOURNAL);
//			parkJournal.setCurrencyType(bo.getCurrencyType());
			parkJournal.setDocumentDate(bo.getDocumentDate());
			parkJournal.setPostingDate(bo.getPostingDate());
			parkJournal.setCurrencyType(bo.getCurrency());
			
			Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
			for (int k = 0; k < parkJournal.getParkJournalItemValue().size(); k++) {
				IParkJournalItem pp = (IParkJournalItem) parkJournal.getParkJournalItemValue().get(k);
				Logger.getInstance().logDebug("debtor payment bank charges::k :" + k);
				Logger.getInstance().logDebug("debtor payment bank charges::pp.getDebitCreditType()==" + pp.getDebitCreditType());
				Logger.getInstance().logDebug("debtor payment bank charges::pp.getGlAccount==" + pp.getGlAccount());
				Logger.getInstance().logDebug("debtor payment bank charges::pp.getAmount()==" + pp.getAmount());
				Logger.getInstance().logDebug("debtor payment bank charges::pp.getOfficeCode()==" + pp.getOfficeCode());
				Logger.getInstance().logDebug("debtor payment bank charges::pp.getCrossOfficeNumber()==" + pp.getCrossOfficeNumber());
			}
			Logger.getInstance().logDebug("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%");

			if (actionInd.equals(IConstants.RECORD_INDICATOR.INSERT)) {
				gl.confirmCreateParkJournal(parkJournal, user);
			}
			else {
				try {
					if (bo.getCrossOfficeNumber() != null && !bo.getCrossOfficeNumber().equals("")) {
						ArrayList glAccountItemList = null;
						glAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByCrossOfficeNumber(bo.getCrossOfficeNumber()));
						Logger.getInstance().logDebug("%%%%%%%%% glAccountItemList.size()%%%%%%%" + glAccountItemList.size());
						if (glAccountItemList != null && glAccountItemList.size() > 0) {
							for (int a = 0; a < glAccountItemList.size(); a++) {
								GLAccountItem glAccountItem = (GLAccountItem) glAccountItemList.get(a);
								if (glAccountItem.getDocumentType().equals(TransactionDocumentType.BACKEND_JOURNAL)) {
									for (int b = 0; b < parkJournal.getParkJournalItemValue().size(); b++) {
										IParkJournalItem parkJournalItem = (IParkJournalItem) parkJournal.getParkJournalItemValue().get(b);
										if (glAccountItem.getOfficeCode().equals(parkJournalItem.getOfficeCode())) {
											AFMSAuditTrail.deleteLogAuditTrail(glAccountItem, user);
											glAccountItem.remove();
											break;
										}
									}
								}
							}
						}
						gl.confirmCreateParkJournal(parkJournal, user);
					}
				}
				catch (javax.ejb.FinderException ex) {
					sessionContext.setRollbackOnly();
					throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
				}
				catch (javax.ejb.RemoveException rx) {
					sessionContext.setRollbackOnly();
					throw new com.portrade.ipms.afms.exceptions.ReferentialIntegrityException(new Object[]{GLAccountItemLabelId.OFFICE_CODE_AND_FISCAL_YEAR_AND_DOCUMENT_NUMBER_AND_ITEM_NUMBER});
				}
			}
		}
		catch (javax.ejb.CreateException ex) {
			Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
		}
		catch (java.rmi.RemoteException ex) {
			throw new javax.ejb.EJBException(ex.toString());
		}
	}
  
  //erma 22/01/08 bugId: 26539 Add validate year of posting date (compare with fiscalyear)
  
  private void validateYearOfPostingDate(java.sql.Date postingDate, java.sql.Date documentDate, Integer fiscalYear, com.portrade.ipms.icms.IUser user) throws AFMSException {
  Calendar postingYear = AFMSUtilities.getCalendar(postingDate);
  Logger.getInstance().equals("validateyearofpostingdate");
  try{
    if(postingYear.get(Calendar.YEAR) != fiscalYear.intValue()){
      throw new com.portrade.ipms.afms.exceptions.DifferentPostingYearException(null);
    }   
  }catch(AFMSException ex){
    sessionContext.setRollbackOnly();
    throw ex;


    }
  }
  
  public void confirmCreateSurchargeInvoice(ISurchargeInvoice bo, com.portrade.ipms.icms.IUser user) throws AFMSException {

    CommonFunction commonFunction = null;
    GeneralLedgerSetup glSetup = null;
    AccountReceivableSetup arSetup = null;
    Long aDocumentNumber = null;
    IOffice officeCode = null;
    IAutomaticAccountAssignment glAccount = null;
    String postingType = null;
    Invoice invoice = null;
    SurchargeInvoice surchargeInvoice = null;
    Integer fiscalYear = null;
    Integer period = null;
    String debitCreditType = null;
    DebtorDebitCreditMemo debtorDebitCreditMemo = null;

    boolean surchargeOnSurchargeFlag = false;
    //tml 16 June 2006, BugId: 17213
    boolean skipDateFlag = false;
    boolean excludeProtestDurationFlag = false;
    boolean totalDueSurchargeFlag = false;
    boolean multipleReconAccountFlag = false;

    if (SystemProfile.get(SystemProfile.SKIP_DATE_FLAG) != null && SystemProfile.get(SystemProfile.SKIP_DATE_FLAG).equals("true")) {
      skipDateFlag = true;
    }
    if (SystemProfile.get(SystemProfile.EXCLUDE_PROTEST_DURATION_FLAG) != null && SystemProfile.get(SystemProfile.EXCLUDE_PROTEST_DURATION_FLAG).equals("true")) {
      excludeProtestDurationFlag = true;
    }

    if (SystemProfile.get(SystemProfile.TOTAL_DUE_SURCHARGE_FLAG) != null && SystemProfile.get(SystemProfile.TOTAL_DUE_SURCHARGE_FLAG).equals("true")) {
      totalDueSurchargeFlag = true;
    }

    if (SystemProfile.get(SystemProfile.MULTIPLE_RECON_ACCOUNT_FLAG) != null && SystemProfile.get(SystemProfile.MULTIPLE_RECON_ACCOUNT_FLAG).equals("true")) {
      multipleReconAccountFlag = true;
    }

    if (SystemProfile.get(SystemProfile.SURCHARGE_ON_SURCHARGE_FLAG) != null && SystemProfile.get(SystemProfile.SURCHARGE_ON_SURCHARGE_FLAG).equals("true")) {
      surchargeOnSurchargeFlag = true;
    }

    try {
      commonFunction = commonFunctionHome.create();
      glSetup = generalLedgerSetupHome.create();
      arSetup = accountReceivableSetupHome.create();
    }
    catch (javax.ejb.CreateException ex) {
      Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      fiscalYear = commonFunction.deriveFiscalYear(bo.getOfficeCode(), bo.getPostingDate(), user);
    }
    catch (RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      period = commonFunction.derivePostingPeriod(bo.getOfficeCode(), bo.getPostingPeriod(), bo.getPostingDate(), user);
    }
    catch (RecordNotFoundException ex) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{FiscalYearVariantPeriodLabelId.FISCAL_YEAR_VARIANT_ID});
    }
    catch (java.rmi.RemoteException ex) {
      throw new javax.ejb.EJBException(ex.toString());
    }

    try {
      officeCode = glSetup.retrieveOffice(bo.getOfficeCode(), user);
    }
    catch (RecordNotFoundException x) {
      sessionContext.setRollbackOnly();
      throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{OfficeLabelId.CODE});
    }
    catch (java.rmi.RemoteException x) {
      throw new javax.ejb.EJBException(x.toString());
    }

    Logger.getInstance().logDebug("***BEFORE FOR LOOP surchargeInvoiceList.size() ");

      bo.setFiscalYear(fiscalYear);
      bo.setPostingPeriod(period);
      Logger.getInstance().logDebug("bo.getDocumentDate() = " + bo.getDocumentDate());
      Logger.getInstance().logDebug("bo.getPostingDate() = " + bo.getPostingDate());
      if (bo.getDocumentNumber() == null || bo.getDocumentNumber().equals("")) {
        try {
          aDocumentNumber = commonFunction.getNextDocumentNumber(bo.getOfficeCode(), bo.getFiscalYear(), IConstants.TransactionDocumentType.SURCHARGE_INVOICE, user);
          bo.setDocumentNumber(aDocumentNumber);
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
      }

      bo.setAccountType(IConstants.PostingAccountType.DEBTOR);
      bo.setDocumentType(IConstants.TransactionDocumentType.SURCHARGE_INVOICE);

      bo.setPostingKey(IConstants.TransactionPostingKey.SURCHARGE);
      bo.setProcessStatus(ProcessStatus.PARK);
      bo.setHeaderIndicator(Boolean.TRUE);

      List glAccountItemList = new ArrayList();
      BigDecimal accumulatedAmount = new BigDecimal("0");
      BigDecimal accumulatedAmountInLocalCurrency = new BigDecimal("0");
      String debtorCode = null;
      Logger.getInstance().logDebug("  >>>> BEFORE FOR LOOP IN ITEM LIST ");

      long protestDuration = 0;
      long daysDue = 0;
      java.sql.Date documentDueDate = null;

      if (bo.isConversionIndicator() != null && bo.isConversionIndicator().booleanValue()) {
        try {
          IDebtorReconAccountType debtorReconAccountType = glSetup.retrieveDebtorReconAccountType(bo.getOfficeCode(), bo.getReconAccountType(), user);
          bo.setPaymentTerm(debtorReconAccountType.getPaymentTerm());
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }

        Logger.getInstance().logDebug("paymentTerm during conversion : " + bo.getPaymentTerm());
      }
      if (bo.getInvoicePrefix() != null && !bo.getInvoicePrefix().equals("")) {
        try {
          IInvoicePrefix invoicePrefix = arSetup.retrieveInvoicePrefix(bo.getInvoicePrefix(), user);
          bo.setReconAccountType(invoicePrefix.getInvoiceType());
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }
        Logger.getInstance().logDebug("bo.getReconAccountType() : " + bo.getReconAccountType());
      }

      try {
        if (bo.getPaymentTerm() != null) {
          documentDueDate = commonFunction.getDueDateForTerm1(bo.getPaymentTerm(), AFMSUtilities.getCurrentDate(), bo.getDocumentDate(), bo.getPostingDate(), user);
          bo.setDocumentDueDate(documentDueDate);
        }
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      for (int j = 0; j < bo.getItems().size(); j++) {
        ISurchargeInvoiceItem boItem = (ISurchargeInvoiceItem) bo.getItems().get(j);

        debtorCode = boItem.getDebtorCode();

        Logger.getInstance().logDebug("  >>>>ITEM LIST  COUNT [" + j + "]");
        postingType = IConstants.AutomaticAccountDetermination.INTEREST_EARNED;

        try {
          Logger.getInstance().logDebug("officeCode.getCOA() = " + officeCode.getCOA());
          Logger.getInstance().logDebug("boItem.getOfficeCode() = " + boItem.getOfficeCode());
          Logger.getInstance().logDebug("postingType = " + postingType);
          Logger.getInstance().logDebug("bo.getOfficeCode() = " + bo.getOfficeCode());
          glAccount = glSetup.retrieveAutomaticAccountAssignment(officeCode.getCOA(), bo.getOfficeCode(), postingType, IConstants.TransactionPostingKey.JOURNAL_CREDIT, user);
        }
        catch (java.rmi.RemoteException ex) {
          sessionContext.setRollbackOnly();
          throw new javax.ejb.EJBException(ex.toString());
        }

        accumulatedAmount = accumulatedAmount.add(boItem.getAmount());
        accumulatedAmountInLocalCurrency = accumulatedAmountInLocalCurrency.add(boItem.getAmountInLocalCurrency());
        Logger.getInstance().logDebug("  >>>> Update Invoice ");
        Logger.getInstance().logDebug("  >>>> PK Invoice IConstants.CustomerType.DEBTOR =[" + IConstants.CustomerType.DEBTOR + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getOfficeCode() =[" + boItem.getOfficeCode() + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedRefFiscalYear() =[" + boItem.getClearedRefFiscalYear() + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedRefDocumentNumber() =[" + boItem.getClearedRefDocumentNumber() + "]");
        Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getDocumentNumber() =[" + boItem.getDocumentNumber() + "]");

        if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.DEBTOR_INVOICE.equals(boItem.getInvoiceDocumentType())) {
          setClearRefDocumentNumberAndFiscalYear(boItem, user);

          try {
            invoice = invoiceHome.findByFiscalYearDocumentNumber(boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber());
            invoice.setSurchargeCount(new Integer(boItem.getSurchargeCount().intValue() + 1));
            invoice.setLastSurchargeDate(bo.getDocumentDate());
            invoice.setLastSurchargeDueDate(bo.getDocumentDueDate());
            invoice.setLastUpdateBy(user.getId());
            invoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.INVOICE_NUMBER});
          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
        else if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.SURCHARGE_INVOICE.equals(boItem.getInvoiceDocumentType())) {
          if (surchargeOnSurchargeFlag) {
            setClearRefDocumentNumberAndFiscalYear(boItem, user);
            try {
              Logger.getInstance().logDebug("  >>>> Update Surcharge Invoice ");
              Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedDocumentNumber() =[" + boItem.getClearedRefDocumentNumber() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getClearedRefFiscalYear() =[" + boItem.getClearedRefFiscalYear() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice bo.getIdentification() =[" + boItem.getIdentification() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice boItem.getOfficeCode() =[" + boItem.getOfficeCode() + "]");
              Logger.getInstance().logDebug("  >>>> PK Invoice bo.getRunDate() =[" + boItem.getRunDate() + "]");
              surchargeInvoice = surchargeInvoiceHome.findByDocumentNumber(boItem.getOfficeCode(), boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber());
              surchargeInvoice.setSurchargeCount(new Integer(boItem.getSurchargeCount().intValue() + 1));
              surchargeInvoice.setLastSurchargeDate(bo.getDocumentDate());
              surchargeInvoice.setLastSurchargeDueDate(bo.getDocumentDueDate());
              surchargeInvoice.setLastUpdateBy(user.getId());
              surchargeInvoice.setLastUpdateOn(AFMSUtilities.getCurrentTime());
            }
            catch (javax.ejb.FinderException ex) {
              sessionContext.setRollbackOnly();
              throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.SURCHARGE_INVOICE});
            }
            catch (java.rmi.RemoteException ex) {
              sessionContext.setRollbackOnly();
              throw new javax.ejb.EJBException(ex.toString());
            }

          }
        }
        else if (boItem.getInvoiceDocumentType() != null && IConstants.TransactionDocumentType.DEBTOR_DEBIT_NOTES.equals(boItem.getInvoiceDocumentType())) {
          setClearRefDocumentNumberAndFiscalYear(boItem, user);
          try {
            debtorDebitCreditMemo = debtorDebitCreditMemoHome.findByFiscalYearDocumentNumber(boItem.getClearedRefFiscalYear(), boItem.getClearedRefDocumentNumber());
            debtorDebitCreditMemo.setSurchargeCount(new Integer(boItem.getSurchargeCount().intValue() + 1));
            debtorDebitCreditMemo.setLastSurchargeDate(bo.getDocumentDate());
            debtorDebitCreditMemo.setLastSurchargeDueDate(bo.getDocumentDueDate());
            debtorDebitCreditMemo.setLastUpdateBy(user.getId());
            debtorDebitCreditMemo.setLastUpdateOn(AFMSUtilities.getCurrentTime());
          }
          catch (javax.ejb.FinderException ex) {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.DEBTOR_DEBIT_NOTE});
          }
          catch (java.rmi.RemoteException ex) {
            sessionContext.setRollbackOnly();
            throw new javax.ejb.EJBException(ex.toString());
          }
        }
		Logger.getInstance().logDebug("glAccount.getGlAccount() - " + glAccount.getGlAccount());
        boItem.setGLAccount(glAccount.getGlAccount());
        boItem.setOfficeCode(bo.getOfficeCode());
        boItem.setDocumentNumber(bo.getDocumentNumber());
        boItem.setFiscalYear(bo.getFiscalYear());
        boItem.setAccountType(bo.getAccountType());
        boItem.setDocumentType(bo.getDocumentType());
        Logger.getInstance().logDebug("boitem.glaccount - " + bo.getGLAccount());
        Logger.getInstance().logDebug("boItem.getLastSurchargeDate() = " + boItem.getLastSurchargeDate());
        Logger.getInstance().logDebug("boItem.getLastSurchargeDueDate() = " + boItem.getLastSurchargeDueDate());
        Logger.getInstance().logDebug("boItem.getPostingDate() = " + boItem.getPostingDate());
        Logger.getInstance().logDebug("boItem.getDocumentDate() = " + boItem.getDocumentDate());
        boItem.setPostingKey(IConstants.TransactionPostingKey.JOURNAL_CREDIT);
        boItem.setDebitCreditType(IConstants.DebitCreditType.CREDIT);

        boItem.setPostingPeriod(bo.getPostingPeriod());
        boItem.setProcessStatus(ProcessStatus.PARK);
        boItem.setCurrency(bo.getCurrency());
        boItem.setExchangeRate(bo.getExchangeRate());
        boItem.setHeaderIndicator(Boolean.FALSE);
        glAccountItemList.add(boItem);

      }
      //end for loop
      Logger.getInstance().logDebug("  >>>> END Sub LOOP");

      ICustomer debtorDetail = new DebtorAccountValue();
      Logger.getInstance().logDebug("Querying Debtor Account ");
      try {
        debtorDetail = retrieveDebtorAccount(bo.getOfficeCode(), debtorCode, user);
      }
      catch (RecordNotFoundException ex) {
        sessionContext.setRollbackOnly();
        throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{DebtorAccountLabelId.OFFICE_CODE_AND_ACCOUNT_NUMBER});
      }

      bo.setSubledgerAccount(debtorDetail.getAccountNumber());
      bo.setSubledgerName(debtorDetail.getDebtorName());
      bo.setTin(debtorDetail.getTaxIdentificationNumber());
      bo.setSubledgerOfficeCode(debtorDetail.getOfficeCode());

      List glAccountFromDebtorAccount = new ArrayList();
      Logger.getInstance().logDebug("Querying Recon Header ");
      Logger.getInstance().logDebug("bo.getReconAccountType() = " + bo.getReconAccountType());
      Logger.getInstance().logDebug("debtorCode = " + debtorCode);
      Logger.getInstance().logDebug("bo.getSubledgerOfficeCode() = " + bo.getSubledgerOfficeCode());
      try {
        if (multipleReconAccountFlag) {
          com.portrade.ipms.afms.IDebtorReconAccount boGlAccount = new DebtorReconAccountValue();
          boGlAccount = arSetup.retrieveDebtorReconAccountByAccountType(bo.getSubledgerOfficeCode(), debtorCode, bo.getReconAccountType(), user);
          bo.setGLAccount(boGlAccount.getReconciliationGLAccount());
        }
        else {
          com.portrade.ipms.afms.ICustomer boGlAccount = new DebtorAccountValue();

          AbstractCriteria[] filterGlAccount = {
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_ACCOUNTNUMBER, "=", debtorCode),
              new Criteria(com.portrade.ipms.afms.dao.DebtorAccountDAO.FILTER_OFFICECODE, "=", bo.getOfficeCode())
              };
          glAccountFromDebtorAccount = DAOProxy.list("DebtorAccount", user, filterGlAccount);
          if (glAccountFromDebtorAccount.size() > 0) {
            boGlAccount = (ICustomer) glAccountFromDebtorAccount.get(0);
            bo.setGLAccount(boGlAccount.getReconAccountId());
          }
          else {
            sessionContext.setRollbackOnly();
            throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.GL_ACCOUNT});
          }
        }
      }
      catch (java.sql.SQLException ex) {
        sessionContext.setRollbackOnly();
        if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
          throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
        }
        else {
          throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{SurchargeInvoiceLabelId.GL_ACCOUNT});
        }
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

      bo.setAmount(accumulatedAmount);
      bo.setAmountInLocalCurrency(accumulatedAmountInLocalCurrency);
      bo.setCreatedOn(AFMSUtilities.getCurrentTime());
      glAccountItemList.add(0, bo);

      Logger.getInstance().logDebug("Run commonFunction.postDocument ");
      try {
        commonFunction.postDocument(glAccountItemList, user);
      }
      catch (com.portrade.ipms.afms.exceptions.AFMSException ex) {
        sessionContext.setRollbackOnly();
        throw ex;
      }
      catch (java.rmi.RemoteException ex) {
        throw new javax.ejb.EJBException(ex.toString());
      }

    try {
      Logger.getInstance().logDebug(" Start to createSurchargeInvoice && createSurchargeInvoiceItem ");

        createSurchargeInvoice(bo, user);
        createSurchargeInvoiceItem(bo.getItems(), bo.getDocumentNumber(), bo.getIdentification(),
            bo.getRunDate(), user);

    }
    catch (AFMSException ex) {
      sessionContext.setRollbackOnly();
      throw ex;
    }
  }
  
//Erma BugId: 27326 - called in CommonFunction-processSubModule
// will update the original document in glaccountitem and delete from debtorclearingtransaction
	/**
	 * Description of the Method
	 * @param gLItem Description of the Parameter
	 * @param user Description of the Parameter
	 * @exception AFMSException Description of the Exception
	 */
  public void reversedDebtorPayment(IAbstractGLAccountItem glItem, com.portrade.ipms.icms.IUser user) throws AFMSException{
	  CommonFunction commonFunction = null;
	  List collectionGLItemList = new ArrayList();
	  
	  Logger.getInstance().logDebug("In reversedDebtorPayment");
	  Logger.getInstance().logDebug("glItem.getOfficeCode = " + glItem.getOfficeCode());
	  Logger.getInstance().logDebug("glItem.getFiscalYear - " + glItem.getFiscalYear());
	  Logger.getInstance().logDebug("glItem.getreversedreffiscalyear - " + glItem.getReversedRefFiscalYear());
	  Logger.getInstance().logDebug("glItem.getReversedRef - " + glItem.getReversedRefDocumentNumber());
	  Logger.getInstance().logDebug("glItem.getDocumentNumber - " + glItem.getDocumentNumber());
	  
		
		try {
		  commonFunction = commonFunctionHome.create();
		}
		catch (javax.ejb.CreateException ex) {
		  Logger.getInstance().logDebug("Cannot create home interface: " + ex.toString());
		}
		catch (java.rmi.RemoteException ex) {
		  throw new javax.ejb.EJBException(ex.toString());
		}
	  

	  try{
		  collectionGLItemList = commonFunction.retrieveGLAccountItemByDocumentNumber(glItem.getOfficeCode(), glItem.getReversedRefFiscalYear(), glItem.getReversedRefDocumentNumber(), user);
		  if(collectionGLItemList.size() <= 0){
		   sessionContext.setRollbackOnly();
		   throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{glItem.getReversedRefDocumentNumber()});
		  }
		  else{
			  for(int j = 0; j < collectionGLItemList.size(); j++){
			   Logger.getInstance().logDebug("size = " + collectionGLItemList.size()); 
			   IAbstractGLAccountItem collectionGLItem = (IAbstractGLAccountItem) collectionGLItemList.get(j);
			   Logger.getInstance().logDebug("collectionGLItem.getClearedRefDocumentNumber() = " + collectionGLItem.getClearedRefDocumentNumber());
			   Logger.getInstance().logDebug("collectionGLItem.getClearedRefFiscalYear() = " + collectionGLItem.getClearedRefFiscalYear());
				  
				  if (collectionGLItem.isHeaderIndicator().equals(Boolean.FALSE) && collectionGLItem.getClearedRefDocumentNumber() != null && !collectionGLItem.getClearedRefDocumentNumber().equals("") && (collectionGLItem.getOriginatingModuleType() == null || collectionGLItem.getOriginatingModuleType().equals(""))) {
				  List collectionItemList = new java.util.ArrayList(gLAccountItemHome.findByItemNumber(collectionGLItem.getOfficeCode(), collectionGLItem.getFiscalYear(), collectionGLItem.getDocumentNumber(), collectionGLItem.getItemNo()));
				  Logger.getInstance().logDebug("collectiontemList.size()"+ collectionItemList.size());
				  if(collectionItemList.size() > 0){
				  	for(int k = 0; k < collectionItemList.size(); k++){
						Logger.getInstance().logDebug("inside collectionItemList.size > 0 ");
						  GLAccountItem collectionItem = (GLAccountItem) collectionItemList.get(0);
												  
						  BigDecimal clearedAmountCollection = collectionItem.getClearedAmount().subtract(collectionGLItem.getAmount());
						  if(clearedAmountCollection.compareTo(new BigDecimal(0)) >= 0){
						  	collectionItem.setClearedAmount(clearedAmountCollection);
						  	if(clearedAmountCollection.compareTo(new BigDecimal(0)) == 0){
						  		collectionItem.setClearedRefFiscalYear(null);
						  		collectionItem.setClearedRefDocumentNumber(null);
						  	}
						  		collectionItem.setLastUpdateBy(user.getId());
						  		collectionItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
						  }
						  else{
						  	sessionContext.setRollbackOnly();
						  	throw new NegativeNumberException(new Object[]{GLAccountItemLabelId.INVOICE_CLEARED_AMOUNT});
						  }
				  	}
				  
				  }
				  List invoiceGLAccountItemList = new java.util.ArrayList(gLAccountItemHome.findByItemNumber(collectionGLItem.getOfficeCode(), collectionGLItem.getClearedRefFiscalYear(), collectionGLItem.getClearedRefDocumentNumber(), new Integer(0)));
				  if (invoiceGLAccountItemList.size() > 0) {
				  	Logger.getInstance().logDebug("inside invoiceGLAccount.size > 0");
							  GLAccountItem invoiceGLAccountItem = (GLAccountItem) invoiceGLAccountItemList.get(0);

							  BigDecimal clearedAmount = invoiceGLAccountItem.getClearedAmount().subtract(collectionGLItem.getAmount());

							  if (clearedAmount.compareTo(new BigDecimal(0)) >= 0) {
								  invoiceGLAccountItem.setClearedAmount(clearedAmount);

								  if (clearedAmount.compareTo(new BigDecimal(0)) == 0) {
									  invoiceGLAccountItem.setClearedRefFiscalYear(null);
									  invoiceGLAccountItem.setClearedRefDocumentNumber(null);
								  }
								  invoiceGLAccountItem.setLastUpdateBy(user.getId());
								  invoiceGLAccountItem.setLastUpdateOn(AFMSUtilities.getCurrentTime());
								  AFMSAuditTrail.updateLogAuditTrail(invoiceGLAccountItem, user);
							  }
							  else {
								  sessionContext.setRollbackOnly();
								  throw new NegativeNumberException(new Object[]{GLAccountItemLabelId.INVOICE_CLEARED_AMOUNT});
							  }
					Logger.getInstance().logDebug("bfore delete");
					com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO dao = (com.portrade.ipms.afms.dao.DebtorClearingTransactionDAO) DAOProxy.getDAO("debtorClearingTransaction", user);
					dao.deleteDebtorClearingTransaction(glItem.getOfficeCode(), glItem.getReversedRefFiscalYear(), new Integer(glItem.getReversedRefDocumentNumber().intValue()), user);
					Logger.getInstance().logDebug("after delete");
					
				  }
				  
			  }

		  }
	  }
	 //Logger.getInstance().logDebug("---rollback---");
	  //sessionContext.setRollbackOnly();
	  }
		catch (SQLException ex) {
	  	sessionContext.setRollbackOnly();
			if (String.valueOf(ex.getErrorCode()).equals("-244") || String.valueOf(ex.getErrorCode()).equals("-271")  || String.valueOf(ex.getErrorCode()).equals("-243")){
				throw new com.portrade.ipms.afms.exceptions.UnableToInsertRecordException(new Object[]{errorMessage});
			}
			else {
		  throw new com.portrade.ipms.afms.exceptions.CannotCreateRecordException(new Object[]{DebtorClearingTransactionLabelId.ID});
			}
	}
	  catch (javax.ejb.FinderException ex) {
		sessionContext.setRollbackOnly();
		throw new com.portrade.ipms.afms.exceptions.RecordNotFoundException(new Object[]{ex});
	  }
	  catch (java.rmi.RemoteException ex) {
		throw new javax.ejb.EJBException(ex.toString());
	  }
  }


  
}
